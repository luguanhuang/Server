package KKSG;
import "enum.proto";

option optimize_for = LITE_RUNTIME;

message RegistServer{
	optional string serverName = 1;
	optional uint32 serverID = 2;
	optional SVersion version = 3;
	repeated uint32 serverids = 4;
}

message LoadAccountData{
	optional string account = 1;
	optional bytes role1 = 2;
	optional bytes role2 = 3;
	optional bytes role3 = 4;
	optional bytes role4 = 5;
	optional uint32 selectSlot = 6;
	optional bytes role5 = 7;
	optional bytes role6 = 8;
	optional bytes role7 = 9;
	optional bytes role8 = 10;
	optional bytes role9 = 11;
}

message LoginChallenge{
	optional string challenge = 1;
	optional uint64 session = 2;
}

message ErrorInfo{
	optional uint32 errorno = 1;
	repeated uint32 param = 2;
	optional uint64 param64 = 3;
	optional bool istip = 4;
}

message RoleBriefInfo{
	optional RoleType type = 1;
	optional uint64 roleID = 2;
	optional string name = 3;
	optional int32 level = 4;
	repeated uint32 fashion = 5;
	optional OutLook outlook = 6;
	optional uint32 ppt = 7;
}

message RoleAllInfo{
	optional RoleBrief Brief = 1;
	optional Attribute Attributes = 2;
	optional BagContent Bag = 3;
	optional RoleLotteryInfo Lottery = 4;
	optional StageInfo Stages = 5;
	optional CheckinRecord CheckinRecord = 6;
	optional ActivityRecord ActivityRecord = 7;
	optional ArenaRecord ArenaRecord = 8;
	optional RewardRecord RewardRecord = 9;
	optional BuyGoldFatInfo BuyInfo = 10;
	optional ShopRecord shoprecord = 11;
	optional FlowerRecord flowerrecord = 12;
	optional GuildRecord guildrecord = 13;
	optional PkRecord pkrecord = 14;
	optional RoleConfig config = 15;
	optional TShowVoteRecord tshowVoteRecord = 16;
	optional CampRoleRecord campRoleRecord = 17;
	optional RoleFindBackRecord findBackRecord = 18;
	optional RoleExtraInfo ExtraInfo = 19;
	optional TowerRecord2DB towerRecord = 20;
	optional LoginRecord loginrecord = 21;
	optional PvpData pvpdata = 22;
	optional SQARecord qaRecord = 23;
	optional DragonRecord2DB dragonInfo = 24;
	optional FashionRecord fashionrecord = 25;
	optional LiveRecord liverecord = 26;
	optional PayV2Record payv2 = 27;
	optional PetSysData petsys = 28;
	optional FirstPassRecord firstPassRecord = 29;
	optional IBShopAllRecord ibShopItems = 30;
	optional SpriteRecord SpriteRecord = 31;
	optional SAtlasRecord atlas = 32;
	optional RiskInfo2DB riskRecord = 33;
	optional RoleTask task_record = 34;
	optional IdipData idipRecord = 35;
	optional SpActivity spActivityRecord = 36;
	optional Designation2DB designatinoRecord = 37;
	optional LevelSealRecord levelsealData = 38;
	optional SBuffRecord buffrecord = 39;
	optional RolePushInfo pushInfo = 40;
	optional QQVipInfo qqvip = 41;
	optional TeamRecord teamdbinfo = 42;
	optional RoleMiscData misc = 43;
	optional RolePartnerData partner = 44;
	optional AchieveDbInfo achieve = 45;
	optional SkillRecord skill = 46;
	optional SChatRecord chat = 47;
	optional HeroBattleRecord herobattle = 48;
	optional ReportDataRecord reportdata = 49;
	optional RoleSystem system = 50;
	optional MilitaryRecord military = 51;
	optional PlatformShareResult platformshareresult = 52;
	optional WeekEnd4v4Data weekend4v4Data = 53;
	optional TajieHelp2DB tajieHelpRecord = 54;
	optional DragonGroupDB dragongroupdb = 55;
	optional BattleFieldData battlefield = 56;
	optional NpcFeelingRecord npcflrec = 57;
	optional CompeteDragonInfo2DB competeDragonInfo = 58;
	optional DragonGuildRecordData dragonguild = 59;
}

message SceneRequest{
	optional uint32 sceneID = 1;
	optional uint64 roleID = 2;
	optional uint32 fortID = 3;
}

message UnitAppearance{
	optional uint64 uID = 1;
	optional string unitName = 2;
	optional uint32 unitType = 3;
	optional Vec3 position = 4;
	optional float direction = 5;
	optional Attribute attributes = 6;
	repeated uint32 fashion = 7;
	optional uint32 waveID = 8;
	optional bool isServerControl = 9;
	repeated SkillInfo skills = 10;
	repeated Item equip = 11;
	optional uint32 level = 12;
	optional uint32 PowerPoint = 13;
	repeated Item emblem = 14;
	optional uint32 fightgroup = 15;
	repeated BuffInfo buffs = 16;
	optional bool IsDead = 17;
	optional OutLook outlook = 18;
	optional uint32 viplevel = 19;
	optional uint32 lastlogin = 20;
	optional uint32 nickid = 21;
	optional bool isnewmob = 22;
	repeated uint32 bindskills = 23;
	optional AllBuffsInfo allbuffsinfo = 24;
	repeated SpriteInfo sprites = 25;
	optional PetSingle pet = 26;
	optional uint64 hostid = 27;
	optional EntityCategory category = 28;
	optional uint32 paymemberid = 29;
	optional UnitAppearanceTeam team = 30;
	optional uint32 specialstate = 31;
	repeated Item artifact = 32;
	optional bool mobshieldable = 33;
	optional bool forcedisappear = 34;
}

message Vec3{
	optional float x = 1;
	optional float y = 2;
	optional float z = 3;
}

message UnitAppearList{
	repeated UnitAppearance units = 1;
}

message SyncTimeArg{
	optional int64 time = 1;
}

message SyncTimeRes{
	optional int64 serverTime = 1;
}

message MoveInfo{
	optional int32 Common = 1;
	optional int32 PosXZ = 2;
	optional int32 DesXZ = 3;
}

message SkillDataUnit{
	optional uint32 SkillID = 1;
	optional uint64 Target = 2;
	optional int32 ManualFace = 3;
	optional int32 Slot = 4;
}

message SkillReplyDataUnit{
	optional uint32 SkillID = 1;
	optional uint32 PIndex = 2;
	repeated TargetHurtInfo TargetList = 3;
	optional uint64 FirerID = 4;
	optional uint64 BulletID = 5;
	optional uint64 BulletExtraID = 6;
}

message UpdateField{
	optional int32 TableType = 1;
	optional string key = 2;
	optional string fieldName = 3;
	optional bytes data = 4;
}

message TargetHurtInfo{
	optional uint64 UnitID = 1;
	optional DamageResult Result = 2;
}

message Attribute{
	repeated double basicAttribute = 1;
	repeated double percentAttribute = 2;
	repeated uint32 attrID = 3;
}

message DamageResult{
	optional uint32 Result = 1;
	optional double Value = 2;
	optional int32 Flag = 3;
	optional uint32 DamageType = 4;
	optional int32 ElementType = 5;
	optional bool IsTargetDead = 6;
	optional int32 ComboCount = 7;
}

message SceneCfg{
	optional uint32 SceneID = 1;
	optional int32 SyncMode = 2;
	repeated UnitAppearance enemyWaves = 3;
	repeated DoodadInfo doodads = 4;
	optional uint64 ownerID = 5;
	repeated uint32 preloadEnemyIDs = 6;
	optional bool isWatcher = 7;
	optional bool canMorph = 8;
}

message Buff{
	optional int32 buffID = 1;
	optional int32 buffLevel = 2;
	optional uint32 effecttime = 3;
	optional uint32 skillID = 4;
}

message DeathInfo{
	optional uint64 Killer = 1;
	optional uint64 uID = 2;
	optional bool showSlowCamera = 3;
	optional ReviveType type = 4;
	optional uint32 revivecount = 5;
	optional uint32 costrevivecount = 6;
}

message ChangedAttribute{
	optional uint64 time = 1;
	optional uint64 uID = 2;
	repeated int32 AttrID = 3;
	repeated double AttrValue = 4;
	optional bool showHUD = 5;
	optional bool needHUD = 6;
	optional uint64 CasterID = 7;
}

message SkillInfo{
	optional uint32 skillHash = 1;
	optional uint32 skillLevel = 2;
	optional uint32 skillpoint = 3;
	optional bool isbasic = 4;
}

message SkillLevelupArg{
	optional uint32 skillHash = 1;
}

message SkillLevelupRes{
	optional uint32 errorcode = 1;
}

message Item{
	optional uint64 uid = 1;
	optional uint32 ItemType = 2;
	optional uint32 ItemID = 3;
	optional uint32 ItemCount = 4;
	optional bool isbind = 5;
	optional uint32 cooldown = 6;
	repeated uint32 AttrID = 7;
	repeated uint32 AttrValue = 8;
	repeated uint32 EnhanceAttrId = 9;
	repeated uint32 EnhanceAttrValue = 10;
	optional uint32 EnhanceLevel = 11;
	optional uint32 EnhanceCount = 12;
	optional ItemJade ItemJade = 13;
	optional uint32 FashionLevel = 14;
	repeated CircleDrawData circleDrawDatas = 15;
	optional uint32 EmblemThirdSlot = 16;
	optional ItemEnchant enchant = 17;
	optional ItemRandAttr randAttr = 18;
	optional ItemForge forge = 19;
	repeated EffectData effects = 20;
	optional EmblemSlotType ebslottype = 21;
	optional uint32 smeltCount = 22;
	optional uint32 expirationTime = 23;
	optional ItemFuse fuse = 24;
}

message RoleBrief{
	optional RoleType type = 1;
	optional string name = 2;
	optional uint64 roleID = 3;
	optional string accountID = 4;
	optional uint32 level = 5;
	optional uint64 exp = 6;
	optional uint64 maxexp = 7;
	optional Vec3 position = 8;
	optional int32 sceneID = 9;
	optional float face = 10;
	optional uint32 offlineTime = 11;
	optional bool completeguidestage = 12;
	optional uint64 tutorialBits = 13;
	optional uint32 onlimetime = 14;
	optional uint32 auctionPoint = 15;
	optional uint32 campID = 16;
	optional uint32 accountNumberLastDay = 17;
	optional uint64 lastAccountTime = 18;
	optional uint32 nickID = 19;
	optional bytes tutorialBitsArray = 20;
	optional uint32 titleID = 21;
	optional uint32 paymemberid = 22;
	optional uint32 changenamecount = 23;
	optional OutLookOp op = 24;
	optional uint64 inittime = 25;
}

message LevelChanged{
	optional uint32 level = 1;
	optional uint64 exp = 2;
	optional uint64 maxexp = 3;
	repeated uint32 attrid = 4;
	repeated uint32 attroldvalue = 5;
	repeated uint32 attrnewvalue = 6;
}

message ItemChanged{
	repeated Item NewItems = 1;
	repeated Item AttrChangeItems = 2;
	repeated uint64 RemoveItems = 3;
	repeated uint64 SwapItems = 4;
	repeated uint64 ChangeItems = 5;
	repeated int32 VirtualItemID = 6;
	repeated int64 VirtualItemCount = 7;
	repeated Item recyleadditems = 8;
	repeated uint64 recylechangeitems = 9;
	optional bool IsRearrange = 10;
}

message StageInfo{
	repeated int32 sceneID = 1;
	repeated int32 rank = 2;
	repeated int32 countscenegroupid = 3;
	repeated int32 count = 4;
	optional int32 day = 5;
	repeated int32 buycount = 6;
	repeated int32 cdscenegroupid = 7;
	repeated int32 cooldown = 8;
	repeated uint32 chapterchest = 9;
	repeated uint32 chestOpenedScene = 10;
	optional int32 helperwincount = 11;
	optional int32 helperweekwincount = 12;
	optional uint32 lastweekuptime = 13;
	optional uint32 bossrushmax = 14;
	optional int32 brupday = 15;
	optional int32 BRjoincounttoday = 16;
	optional int32 BRrefreshcounttoday = 17;
	optional BRRankState brrankstate = 18;
	repeated DEStageProgress stageprogress = 19;
	repeated StageAssistOne stageassist = 20;
	optional uint32 holidayid = 21;
	optional uint32 holidaytimes = 22;
	optional AbsPartyInfo absparty = 23;
	optional uint32 kidhelpercount = 24;
	optional uint32 tarjatime = 25;
	optional uint32 tarjaaward = 26;
	optional StageTrophy trophydata = 27;
	repeated DneRecord dnes = 28;
	optional bool despecialflag = 29;
}

message TutorialInfo{
	optional uint32 tutorialID = 1;
}

message Systems{
	repeated uint32 sysIDs = 1;
	repeated uint32 closeSysIDs = 2;
}

message BattleData{
	optional int32 timespan = 1;
	repeated uint32 pickDoodadWaveID = 2;
	optional int32 Combo = 3;
	optional int32 BeHit = 4;
	optional uint32 hppercent = 5;
	repeated uint32 smallmonster = 6;
	repeated uint32 bossrush = 7;
	optional int32 OpenChest = 8;
	optional CliAntiCheatInfo anticheatInfo = 9;
	optional bool isfailed = 10;
	optional BattleFailedData failedinfo = 11;
	optional uint32 found = 12;
	optional uint32 npchp = 13;
	repeated uint32 monster_id = 14;
	repeated uint32 monster_num = 15;
}

message ItemBrief{
	optional uint32 itemID = 1;
	optional uint32 itemCount = 2;
	optional bool isbind = 3;
	optional uint32 cooldown = 4;
}

message AchivementInfo{
	optional uint32 achivementID = 1;
	optional uint32 state = 2;
}

message FetchAchiveArg{
	optional uint32 AchivementID = 1;
}

message FetchAchiveRes{
	optional ErrorCode Result = 1;
}

message BattleRewardChest{
	optional int32 chestType = 1;
	optional int32 itemID = 2;
	optional int32 itemCount = 3;
	optional bool isbind = 4;
}

message SelectChestArg{
	optional uint32 chestIdx = 1;
}

message SelectChestRes{
	repeated BattleRewardChest rewards = 1;
	optional ErrorCode errcode = 2;
}

message TaskOPArg{
	optional int32 taskOP = 1;
	optional int32 taskID = 2;
}

message TaskOPRes{
	optional bool result = 1;
	optional ErrorCode errorcode = 2;
}

message ResetSkillArg{
	optional ResetType resetType = 1;
}

message ResetSkillRes{
	optional ErrorCode errorcode = 1;
	optional RoleType prof = 2;
}

message ChooseProfArg{
	optional RoleType prof = 1;
}

message ChooseProfRes{
	optional ErrorCode errorcode = 1;
}

message SkillChangedData{
	repeated uint32 newSkill = 1;
	repeated uint32 newSkillLevel = 2;
	repeated uint32 removeSkill = 3;
	repeated uint32 changedSkillHash = 4;
	repeated uint32 changedSkillLevel = 5;
	optional int32 skillpoint = 6;
	repeated uint32 skillSlot = 7;
	optional int32 skillType = 8;
	optional uint32 skillpointtwo = 9;
}

message BingSkillArg{
	optional int32 slot = 1;
	optional uint32 skillhash = 2;
}

message BindSkillRes{
	optional ErrorCode errorcode = 1;
	repeated uint32 skillslot = 2;
}

message QueryLotteryCDArg{
}

message QueryLotteryCDRes{
	optional ErrorCode errorcode = 1;
	optional uint32 cooldown = 2;
	optional uint32 goldbuycount = 3;
	optional uint32 goldbuycooldown = 4;
	optional uint32 goldbaodi = 5;
	optional uint32 coinbaodi = 6;
}

message DrawLotteryArg{
	optional uint32 type = 1;
}

message DrawLotteryRes{
	optional ErrorCode errorcode = 1;
	repeated ItemBrief Items = 2;
	optional uint32 nextgoodcount = 3;
	repeated uint32 spriteppt = 4;
}

message RoleLotteryInfo{
	optional uint32 lastDrawTime = 1;
	optional uint32 OneDrawCount = 2;
	optional uint32 MinimumRewardCount = 3;
	optional uint32 goldFreeDrawTime = 4;
	optional uint32 goldFreeDrawCount = 5;
	optional uint32 goldFreeDrawDay = 6;
	optional uint32 goldOneDrawCount = 7;
	optional uint32 goldMinimumRewardCount = 8;
	optional uint32 clickday = 9;
	optional uint32 clickfreetime = 10;
	optional uint32 clickfreecount = 11;
	optional uint32 clickcostcount = 12;
	repeated PandoraDrop pandora = 13;
	optional uint32 lastGiftUpdateTime = 14;
	optional uint32 shareGiftCount = 15;
	optional uint32 spriteMinGuarantee = 16;
	optional uint32 spriteNextMinGuarantee = 17;
}

message EnhanceItemArg{
	optional uint64 UniqueItemId = 1;
	optional uint32 ProtectType = 2;
}

message EnhanceItemRes{
	optional ErrorCode ErrorCode = 1;
	repeated ComAgate comagates = 2;
	optional bool isEnd = 3;
	repeated AttributeInfo nextAttrs = 4;
}

message RoleSummaryStored{
	optional uint64 RoleID = 1;
	optional uint32 Level = 2;
	optional uint32 Profession = 3;
	optional string Name = 4;
	optional Attribute Attribute = 5;
	optional RoleArenaInfo RoleArenaInfo = 6;
	repeated uint32 fashion = 7;
	repeated SkillInfo skills = 8;
	repeated Item equip = 9;
	optional uint32 PowerPoint = 10;
	repeated Item emblem = 11;
	optional uint32 viplevel = 12;
	optional uint32 timelastlogout = 13;
	optional uint32 pptuptime = 14;
	optional uint32 leveluptime = 15;
	optional int32 camp = 16;
	optional uint32 desigation = 17;
	optional uint32 sealtype = 18;
	optional uint32 sealbosscount = 19;
	optional uint32 nickid = 20;
	optional uint32 titleid = 21;
	optional OutLookOp op = 22;
	optional RolePushInfo push_info = 23;
	optional string account = 24;
	optional string device_id = 25;
	repeated SpriteInfo sprites = 26;
	optional uint32 plat_type = 27;
	repeated PetSingle pets = 28;
	optional uint64 fightPetId = 29;
	optional uint32 fashionppt = 30;
	optional uint32 fashionpptuptime = 31;
	repeated uint32 bindskills = 32;
	repeated PayMember privilege = 33;
	optional QQVipInfo qqvip = 34;
	optional StartUpType starttype = 35;
	optional uint32 enhancemaster = 36;
	optional uint32 pkpoint = 37;
	optional string token = 38;
	optional MilitaryRecord military_record = 39;
	repeated uint32 display_fashion = 40;
	repeated Item artifact = 41;
	optional uint32 hair_color_id = 42;
	optional string covername = 43;
	optional uint32 covertype = 44;
	optional PayConsume pre = 45;
	optional uint32 fashion_specialeffects_id = 46;
	optional uint32 backFlowEndTime = 47;
}

message RoleArenaInfo{
	optional uint32 RecordCount = 1;
	repeated RoleArenaRecordInfo RoleArenaRecordInfo = 2;
}

message RoleArenaRecordInfo{
	optional uint32 RecordMask = 1;
	optional uint32 RecordTime = 2;
	optional uint64 ChallengedId = 3;
}

message RankListRawData{
	optional uint32 RankType = 1;
	optional uint32 serverid = 2;
	optional uint32 Len = 3;
	optional uint32 Index = 4;
	optional uint32 MaxIndex = 5;
	optional bytes RankListData = 6;
}

message QuerySceneDayCountArg{
	repeated uint32 groupid = 1;
	optional uint32 type = 2;
}

message QuerySceneDayCountRes{
	repeated uint32 sceneid = 1;
	repeated uint32 scenecout = 2;
	repeated uint32 scenebuycount = 3;
	repeated uint32 chestOpenedScene = 4;
	optional ErrorCode errorcode = 5;
}

message RankList{
	repeated RankData RankData = 1;
}

message ClientQueryRankListArg{
	optional uint32 RankType = 1;
	optional uint32 TimeStamp = 2;
	optional uint32 profession = 3;
	optional uint64 guildid = 4;
	optional int32 firstPassID = 5;
	optional uint32 sendPunishData = 6;
}

message ClientQueryRankListRes{
	optional uint32 RankType = 1;
	optional uint32 TimeStamp = 2;
	optional RankList RankList = 3;
	optional ErrorCode ErrorCode = 4;
	optional RankData RoleRankData = 5;
	optional uint32 RankAllCount = 6;
}

message RemoveReward{
	optional uint64 RoleId = 1;
	optional uint64 UniqueId = 2;
}

message GMCmdArg{
	optional string cmd = 1;
	repeated string args = 2;
}

message GMCmdRes{
	optional bool result = 1;
	optional string outputMessage = 2;
	optional bytes datablob = 3;
}

message DecomposeEquipmentArg{
	repeated uint64 equipuniqueid = 1;
	repeated uint32 count = 2;
}

message DecomposeEquipmentRes{
	optional ErrorCode ErrorCode = 1;
	repeated float param = 2;
}

message ReconnArg{
	optional uint64 session = 1;
	optional uint32 sceneid = 2;
	optional uint64 roleid = 3;
}

message ReconnRes{
	optional ErrorCode result = 1;
}

message UpdateGlobalConfig{
	optional uint32 ConfigId = 1;
	optional string ConfigValue = 2;
}

message EmblemLevelUpArg{
	repeated uint64 EmblemUniqueId = 1;
}

message EmblemLevelUpRes{
	optional ErrorCode ErrorCode = 1;
	optional bool islevelup = 2;
}

message UseItemArg{
	optional uint64 uid = 1;
	optional uint32 count = 2;
	optional uint32 OpType = 3;
	repeated uint64 uids = 4;
	optional uint32 itemID = 5;
	optional uint64 petid = 6;
	optional uint32 suit_id = 7;
	optional uint32 color_id = 8;
}

message UseItemRes{
	optional ErrorCode ErrorCode = 1;
	repeated ItemBrief ResultItems = 2;
	optional uint64 uid = 3;
	optional BagExpandData expand = 4;
}

message FashionChanged{
	optional uint64 roleID = 1;
	repeated uint32 position = 2;
	repeated uint32 newItemID = 3;
}

message ItemJade{
	optional uint32 SlotInfo = 1;
	repeated ItemJadeSingle ItemJadeSingle = 2;
}

message ItemJadeSingle{
	optional uint32 SlotPos = 1;
	optional uint32 ItemId = 2;
	repeated uint32 AttrId = 3;
	repeated uint32 AttrValue = 4;
}

message JadeComposeArg{
	optional uint32 ComposeType = 1;
	optional uint64 JadeUniqueId = 2;
	optional uint64 EquipUniqueId = 3;
	optional uint32 SlotPos = 4;
	optional uint32 AddLevel = 5;
}

message JadeOperationRes{
	optional ErrorCode ErrorCode = 1;
}

message JadeOperationArg{
	optional uint32 OperationType = 1;
	optional uint64 EquipUniqueId = 2;
	optional uint64 JadeUniqueId = 3;
	optional uint32 Pos = 4;
}

message JadeComposeRes{
	optional ErrorCode ErrorCode = 1;
}

message RankData{
	optional uint64 RoleId = 1;
	optional string RoleName = 2;
	optional uint32 RoleLevel = 3;
	optional uint32 time = 4;
	optional float damage = 5;
	optional uint32 powerpoint = 6;
	optional uint32 flowercount = 7;
	optional uint32 Rank = 8;
	optional uint32 guildicon = 9;
	optional string guildname = 10;
	optional uint32 pkpoint = 11;
	optional uint32 tshowvotecount = 12;
	optional uint32 intervaltimestamp = 13;
	optional uint32 profession = 14;
	repeated uint64 RoleIds = 15;
	repeated string RoleNames = 16;
	optional uint32 towerHardLevel = 17;
	optional uint32 towerFloor = 18;
	optional uint32 towerThroughTime = 19;
	repeated MapIntItem receiveFlowers = 20;
	optional uint32 guildBossIndex = 21;
	optional string guildBossName = 22;
	optional string guildBossDpsMax = 23;
	optional uint32 titleID = 24;
	repeated uint32 titleIDs = 25;
	optional int32 commendNum = 26;
	optional uint32 sceneid = 27;
	optional uint32 bossavghppercent = 28;
	optional int32 groupid = 29;
	optional uint64 petuid = 30;
	optional uint32 petid = 31;
	optional string headpic = 32;
	optional StartUpType starttype = 33;
	optional bool is_vip = 34;
	optional bool is_svip = 35;
	optional uint32 usetime = 36;
	optional LeagueRankData leagueinfo = 37;
	optional HeroRankData heroinfo = 38;
	optional string strRoleid = 39;
	optional uint32 starlevel = 40;
	optional uint32 usectime = 41;
	optional MilitaryRankData military_info = 42;
	optional PkRankExtraData pkextradata = 43;
	optional SkyCraftRankData scdata = 44;
	optional SurviveRankData survive = 45;
	optional SkyCityRankData skycity = 46;
}

message CheckinArg{
}

message CheckinRes{
	optional ErrorCode ErrorCode = 1;
	optional uint32 DayCheckInfo = 2;
	optional uint32 DayCanCheck = 3;
	optional uint32 DayMakeUp = 4;
	optional uint32 Bonus = 5;
	optional uint32 StartDay = 6;
}

message CheckinRecord{
	optional uint32 CheckinInfo = 1;
	optional uint32 CheckinTime = 2;
	optional uint32 CheckinCount = 3;
}

message CheckinInfoNotify{
	optional uint32 DayCheckInfo = 1;
	optional uint32 DayCanCheck = 2;
	optional uint32 DayMakeUp = 3;
	repeated uint32 ItemId = 4;
	repeated uint32 ItemCount = 5;
	optional uint32 StartDay = 6;
	optional bool IsOddMonth = 7;
}

message ActivityRecord{
	repeated uint32 ActivityId = 1;
	repeated uint32 FinishCount = 2;
	optional uint32 ActivityAllValue = 3;
	optional uint32 DoubleActivityId = 4;
	optional uint32 ChestGetInfo = 5;
	repeated uint32 NeedFinishCount = 6;
	optional uint32 activityWeekValue = 7;
	optional uint64 LastUpdateTime = 8;
	optional uint32 guildladdertime = 9;
}

message ActivityRoleNotify{
	optional ActivityRecord ActivityRecord = 1;
}

message GetActivityChestRes{
	optional ErrorCode ErrorCode = 1;
	optional uint32 ChestGetInfo = 2;
	repeated uint32 ItemId = 3;
	repeated uint32 ItemCount = 4;
}

message GetActivityChestArg{
	optional uint32 ChestIndex = 1;
}

message FashionComposeArg{
	optional uint32 fashion_id = 1;
	optional string uid1 = 2;
	optional string uid2 = 3;
}

message FashionComposeRes{
	optional ErrorCode result = 1;
}

message BuyJadeSlotArg{
	optional uint64 EquipUId = 1;
}

message BuyJadeSlotRes{
	optional ErrorCode ErrorCode = 1;
}

message ArenaRecord{
	optional uint32 OptimalRank = 1;
	optional uint32 point = 2;
	optional uint32 dayupdate = 3;
	repeated uint32 pointreward = 4;
	repeated uint32 rankreward = 5;
}

message GetUnitAppearanceArg{
	optional uint64 roleid = 1;
	optional int32 mask = 2;
	optional uint32 type = 3;
	optional uint64 petId = 4;
}

message GetUnitAppearanceRes{
	optional UnitAppearance UnitAppearance = 1;
	optional ErrorCode errorcode = 2;
}

message gateflag{
	optional bool flag = 1;
}

message PayInfo{
	optional uint64 TotalPay = 1;
	optional uint32 PayIDFlag = 2;
	optional uint32 MonthCardLeftDay = 3;
	optional uint32 LastMonthCardTimeStamp = 4;
	optional uint32 vipLevel = 5;
	optional uint32 vippoint = 6;
}

message RewardInfo{
	optional uint64 UniqueId = 1;
	optional uint32 Type = 2;
	optional uint32 SubType = 3;
	optional uint32 State = 4;
	optional uint32 TimeStamp = 5;
	repeated string Param = 6;
	repeated ItemBrief Item = 7;
	optional string name = 8;
	optional string comment = 9;
	optional uint32 uniqueday = 10;
	optional bool isget = 11;
}

message RewardRecord{
	repeated RewardInfo RewardInfo = 1;
	optional bytes given = 2;
	optional bytes taken = 3;
	optional uint32 nextdayreward = 4;
	repeated uint32 onlinereward = 5;
}

message GetSystemRewardArg{
	optional uint64 RewardUniqueId = 1;
}

message RewardChanged{
	repeated RewardInfo AddedRewardInfo = 1;
	repeated uint64 RemovedRewardUniqueId = 2;
}

message GetSystemRewardRes{
	optional ErrorCode ErrorCode = 1;
}

message BuyGoldFatInfo{
	optional uint32 day = 1;
	optional int32 BuyGoldCount = 2;
	repeated int32 BuyFatigueCount = 3;
	optional int32 BuyDragonCount = 4;
	optional BackFlowBuy backflow = 5;
}

message SweepArg{
	optional uint32 sceneID = 1;
	optional uint32 count = 2;
}

message SweepRes{
	optional ErrorCode result = 1;
	repeated SweepResult rewards = 2;
	optional int32 abyssleftcount = 3;
	optional bool isexpseal = 4;
}

message SweepResult{
	repeated ItemBrief items = 1;
}

message ReviveArg{
	optional uint32 selectBuff = 1;
	optional ReviveType type = 2;
	optional ClientReviveInfo clientinfo = 3;
}

message ReviveRes{
	optional ErrorCode result = 1;
	repeated uint32 bufflist = 2;
}

message QueryShopItemArg{
	optional uint32 type = 1;
	optional bool isrefresh = 2;
}

message QueryShopItemRes{
	repeated ShopItem ShopItem = 1;
	optional ErrorCode errorcode = 2;
	optional uint32 refreshcount = 3;
	optional uint32 cooklevel = 4;
}

message BuyShopItemRes{
	optional ErrorCode ErrorCode = 1;
}

message BuyShopItemArg{
	optional uint64 ItemUniqueId = 1;
	optional uint32 count = 2;
}

message ShopItem{
	optional Item Item = 1;
	optional uint32 slot = 2;
	optional uint32 buycount = 3;
	optional uint32 dailybuycount = 4;
	optional uint32 weekbuycount = 5;
}

message TeamBrief{
	optional int32 teamID = 1;
	optional int32 teamMemberCount = 2;
	optional int32 teamState = 3;
	optional string leaderName = 4;
	optional uint32 expID = 5;
	optional bool haspassword = 6;
	optional uint32 leaderLevel = 7;
	optional uint32 leaderPowerPoint = 8;
	optional RoleType leaderProfession = 9;
	optional TeamExtraInfo extrainfo = 10;
	optional string password = 11;
	optional KMatchType matchtype = 12;
	optional bool kingback = 13;
}

message FetchTeamListArg{
	repeated uint32 categoryID = 1;
	optional uint32 expID = 2;
}

message FetchTeamListRes{
	repeated TeamBrief teams = 1;
	repeated TeamFullDataNtf TheTeams = 2;
	optional ErrorCode errcode = 3;
}

message TeamOPArg{
	optional TeamOperate request = 1;
	optional int32 teamID = 2;
	optional string password = 3;
	optional uint32 expID = 4;
	optional uint64 roleid = 5;
	optional TeamExtraInfo extrainfo = 6;
	optional uint64 param = 7;
	optional TeamMemberType membertype = 8;
	optional string account = 9;
	optional bool isplatfriend = 10;
}

message TeamOPRes{
	optional ErrorCode result = 1;
	optional uint64 problem_roleid = 2;
	optional int32 GoddessGetRewardsCount = 3;
	repeated TeamCountClient teamcount = 4;
	optional int32 weeknestexpid = 5;
	optional uint32 opentime = 6;
	optional uint32 wnrewardleftcount = 7;
	optional uint32 wnrewardmaxcount = 8;
}

message TeamChanged{
	optional TeamBrief teamBrief = 1;
	repeated uint64 leaveMember = 2;
	repeated TeamMember addMember = 3;
	repeated TeamMember chgstateMember = 4;
}

message TeamMember{
	optional uint64 memberID = 1;
	optional RoleType profession = 2;
	optional string name = 3;
	optional int32 level = 4;
	optional uint32 powerpoint = 5;
	optional int32 state = 6;
	repeated uint32 fashion = 7;
	optional uint32 sceneID = 8;
	optional int32 leftcount = 9;
	optional bool robot = 10;
	optional uint64 guildid = 11;
	optional uint64 dragonguildid = 12;
	optional OutLook outlook = 13;
	optional uint32 vipLevel = 14;
	optional uint32 paymemberid = 15;
	optional TeamMemberType membertype = 16;
	optional uint32 tarjatime = 17;
	optional uint32 serverid = 18;
	optional bool kingback = 19;
}

message ReviveInfo{
	optional uint64 roleID = 1;
	repeated uint32 bufflist = 2;
	optional ReviveType type = 3;
}

message BuyGoldAndFatigueArg{
	optional buyextype type = 1;
	optional uint32 fatigueID = 2;
	optional uint32 count = 3;
}

message BuyGoldAndFatigueRes{
	optional ErrorCode result = 1;
}

message GetWorldBossStateArg{
	optional uint32 type = 1;
}

message GetWorldBossStateRes{
	optional uint32 TimeLeft = 1;
	optional uint32 BossHp = 2;
	optional uint32 BossId = 3;
}

message AddTempAttrArg{
	optional uint32 type = 1;
}

message AddTempAttrRes{
	optional ErrorCode ErrorCode = 1;
	optional uint32 count = 2;
}

message ReviveCountdownInfo{
	optional int32 countdownTime = 1;
	optional uint32 revivecost = 2;
	optional uint32 revivecosttype = 3;
}

message SaveRankListChange{
	optional uint32 RankType = 1;
	optional RankList RankListChange = 2;
}

message FatigueRecoverTimeInfo{
	repeated uint32 fatigueID = 1;
	repeated uint32 timeleft = 2;
}

message EnterSceneCoolDownQuery{
	repeated uint32 groupid = 1;
	optional uint32 type = 2;
}

message EnterSceneCoolDownNotify{
	repeated uint32 groupid = 1;
	repeated uint32 cooldown = 2;
}

message QueryReward{
	optional uint64 RoleId = 1;
}

message AddReward{
	optional uint64 RoleId = 1;
	optional uint64 UniqueId = 2;
	optional bytes RewardInfo = 3;
}

message LogMsg{
	optional int32 serverID = 1;
	optional string tableName = 2;
	repeated string key = 3;
	repeated string value = 4;
	optional string primaryKey = 5;
	optional string primaryValue = 6;
	optional LogDBType dbType = 7;
}

message BagContent{
	repeated Item Equips = 1;
	repeated Item Emblems = 2;
	repeated Item Items = 3;
	optional uint32 enhanceSuit = 4;
	repeated uint64 virtualitems = 5;
	repeated Item Artifacts = 6;
	optional uint32 extraSkillEbSlotNum = 7;
	repeated BagExpandData expand = 8;
	optional bool FuseCompensation = 9;
	optional bool ForgeCompensation = 10;
}

message AttributeInfo{
	optional uint32 id = 1;
	optional uint32 value = 2;
}

message ChatForward{
	optional ChatInfo chatinfo = 1;
	repeated uint64 roleidlist = 2;
}

message ChatNotify{
	optional ChatInfo chatinfo = 1;
}

message ChatInfo{
	optional uint32 channel = 1;
	optional ChatSource source = 2;
	optional ChatDest dest = 3;
	optional string info = 4;
	repeated ChatParam param = 5;
	optional uint32 priority = 6;
	optional uint32 time = 7;
	optional bool issystem = 8;
	optional uint64 storeKeyId = 9;
	optional uint64 audioUid = 10;
	optional uint32 audioLen = 11;
	repeated ChatSource destList = 12;
	optional bool isbroadcast = 13;
	optional uint32 level = 14;
	optional bool isRecruit = 15;
	optional bool isDragonGuildRecruit = 16;
	optional GroupChatTeamInfo groupchatinfo = 17;
	optional ChatSource groupchatnewrole = 18;
}

message ChatSource{
	optional uint64 roleid = 1;
	optional uint32 profession = 2;
	optional string name = 3;
	optional uint32 viplevel = 4;
	optional uint32 powerpoint = 5;
	optional uint32 coverDesignationID = 6;
	optional uint32 paymemberid = 7;
	optional uint32 military_rank = 8;
	optional uint32 heroid = 9;
	optional string desname = 10;
	optional PayConsume pre = 11;
	optional bool isBackFlow = 12;
}

message ChatDest{
	repeated uint64 roleid = 1;
}

message QueryOpenGameArg{
}

message QueryOpenGameRes{
	optional uint32 timeLeft = 1;
	optional ErrorCode errcode = 2;
}

message ChatParam{
	optional ChatParamRole role = 1;
	optional ChatParamItem item = 2;
	optional ChatParamNum num = 3;
	optional ChatParamGuild guild = 4;
	optional ChatParamTeam team = 5;
	optional ChatParamLink link = 6;
	optional ChatParamSpectate spectate = 7;
	optional ChatParamDragonGuild dragonguild = 8;
}

message ChatParamRole{
	optional uint64 uniqueid = 1;
	optional string name = 2;
	optional uint32 profession = 3;
}

message ChatParamItem{
	optional ItemBrief item = 1;
}

message ChatParamNum{
	optional uint32 num = 1;
}

message ShopRecordOne{
	optional uint32 type = 1;
	optional uint32 updatetime = 2;
	repeated Item items = 3;
	repeated uint32 slots = 4;
	repeated ItemBrief buycount = 5;
	repeated ItemBrief dailybuycount = 6;
	optional uint32 refreshcount = 7;
	optional uint32 refreshtime = 8;
	optional uint32 refreshday = 9;
	optional bool ishint = 10;
	repeated ItemBrief weekbuycount = 11;
}

message ShopRecord{
	optional uint32 dayupdate = 1;
	repeated ShopRecordOne shops = 2;
	optional uint32 weekupdate = 3;
}

message FashionChangedData{
	optional FashionNTFType changeType = 1;
	repeated FashionData fashion = 2;
	optional uint32 special_effects_id = 3;
}

message FashionData{
	optional uint32 itemID = 1;
	optional uint32 level = 2;
	optional uint64 uid = 3;
	optional uint32 timeleft = 4;
	optional uint32 pos = 5;
	repeated AttributeInfo attrs = 6;
	optional uint32 timeend = 7;
}

message SocialInfo2Db{
	optional uint64 roleid = 1;
	optional bytes friend = 2;
	optional bytes flower = 3;
	optional bytes note = 4;
	optional bytes gaojigu = 5;
	optional bytes tshow = 6;
}

message Friend2Db{
	repeated uint64 roleid = 1;
	repeated uint32 degree = 2;
	repeated bool delete = 3;
	repeated DegreeAddCount counts = 4;
	repeated FriendApply apply = 5;
	repeated uint32 daydegree = 6;
	repeated uint32 receive = 7;
	repeated uint32 send = 8;
	repeated uint32 receiveall = 9;
	repeated uint32 updatetime = 10;
	repeated uint32 receivetime = 11;
	optional FriendRecord record = 12;
	repeated uint64 blacklist = 13;
	repeated uint64 nonotifyrole = 14;
}

message Flower2Db{
	optional uint32 allcount = 1;
	optional uint32 weekcount = 2;
	optional uint32 week = 3;
	repeated uint64 recordroleid = 4;
	repeated uint32 recordcount = 5;
	repeated uint32 recordtime = 6;
	repeated uint64 roleid = 7;
	repeated uint32 count = 8;
	optional uint32 updatetime = 9;
	repeated uint32 updegreelevel = 10;
	repeated MapIntItem receiveFlowersToday = 11;
	repeated MapIntItem receiveFlowersYestoday = 12;
	repeated MapIntItem receiveFlowersTotal = 13;
	repeated FlowerInfo sendInfo = 14;
	optional uint32 updatetimeYestoday = 15;
	repeated MapIntItem sendFlowersTotal = 16;
	repeated ReceiveRoleFlowerInfo receiveFlowerRoleDetail = 17;
	repeated MapIntItem receiveFlowersThisWeek = 18;
	optional FlowerActivityData activityFlowerData = 19;
}

message SaveSocialInfoNtf{
	repeated SocialInfo2Db socialinfo = 1;
}

message QueryGateArg{
	optional string token = 1;
	optional string account = 2;
	optional string password = 3;
	optional LoginType type = 4;
	optional string pf = 5;
	optional string openid = 6;
	optional PlatType platid = 7;
	optional string version = 8;
}

message QueryGateRes{
	optional bytes loginToken = 1;
	optional bytes gateconfig = 2;
	optional string userphone = 3;
	optional LoginGateData RecommandGate = 4;
	repeated SelfServerData servers = 5;
	optional uint32 loginzoneid = 6;
	repeated LoginGateData allservers = 7;
	optional bool in_white_list = 8;
	optional PlatNotice notice = 9;
	optional ErrorCode error = 10;
	optional PlatBanAccount baninfo = 11;
	optional bool freeflow = 12;
	optional int32 cctype = 13;
	repeated PlatFriendServer platFriendServers = 14;
	repeated uint32 bespeakserverids = 15;
}

message LoginVerifyArg{
	optional bytes loginToken = 1;
	optional uint32 serverid = 2;
	optional uint64 uid = 3;
	optional bool isbackflowserver = 4;
}

message LoginVerifyRes{
	optional string userid = 1;
	optional bool isgm = 2;
	optional ErrorCode result = 3;
	optional bool account_backflow = 4;
}

message AddFriendArg{
	optional uint64 friendroleid = 1;
	optional string name = 2;
}

message AddFriendRes{
	optional ErrorCode errorcode = 1;
	optional Friend2Client frienddata = 2;
}

message RemoveFriendArg{
	optional uint64 friendroleid = 1;
}

message RemoveFriendRes{
	optional ErrorCode errorcode = 1;
}

message Friend2Client{
	optional uint64 roleid = 1;
	optional uint32 profession = 2;
	optional uint32 level = 3;
	optional uint32 powerpoint = 4;
	optional uint32 viplevel = 5;
	optional uint32 lastlogin = 6;
	optional string name = 7;
	optional uint32 roleaudioid = 8;
	optional uint32 audioid = 9;
	optional uint32 degreelevel = 10;
	optional uint32 degreeleft = 11;
	optional uint32 daydegree = 12;
	optional uint32 receivegiftstate = 13;
	optional uint32 sendgiftstate = 14;
	optional uint32 alldegree = 15;
	optional uint32 receiveall = 16;
	optional string guildname = 17;
	optional uint32 receivetime = 18;
	optional uint32 nickid = 19;
	optional uint32 titleid = 20;
	optional uint32 paymemberid = 21;
	optional EMentorRelationPosition mentortype = 22;
	optional string openid = 23;
	optional string nickname = 24;
}

message OperateRecord{
	optional uint32 position = 1;
	optional string arg = 2;
	optional string account = 3;
}

message AddBlackListArg{
	optional uint64 otherroleid = 1;
	optional string name = 2;
}

message AddBlackListRes{
	optional ErrorCode errorcode = 1;
	optional Friend2Client black = 2;
}

message RemoveBlackListArg{
	optional uint64 otherroleid = 1;
}

message RemoveBlackListRes{
	optional ErrorCode errorcode = 1;
}

message RandomFriendWaitListArg{
	optional string match = 1;
}

message RandomFriendWaitListRes{
	repeated uint64 roleid = 1;
	repeated uint32 profession = 2;
	repeated string name = 3;
	repeated uint32 level = 4;
	repeated uint32 powerpoint = 5;
	repeated uint32 viplevel = 6;
	optional ErrorCode errorcode = 7;
	repeated uint32 lastlogin = 8;
	repeated uint64 guildid = 9;
	repeated string guildname = 10;
	repeated uint32 nickid = 11;
	repeated uint32 titleid = 12;
}

message BlackListReport{
}

message BlackListNtf{
	repeated Friend2Client blacklist = 1;
}

message FlowerRecord{
	repeated uint64 roleid = 1;
	repeated uint32 count = 2;
	optional uint32 updateday = 3;
	optional bool getRankReward = 4;
	optional uint32 getFlowerTime = 5;
	optional uint32 getFlowerNum = 6;
}

message SendFlowerArg{
	optional uint64 roleid = 1;
	optional uint32 count = 2;
	optional uint32 sendItemID = 3;
	optional uint32 costItemID = 4;
	optional uint32 costItemNum = 5;
}

message ShowFlowerPageRes{
	optional uint32 allcount = 1;
	optional uint32 weekcount = 2;
	optional uint32 weekrank = 3;
	optional uint32 cansendcount = 4;
	repeated uint32 cansendstate = 5;
	repeated uint64 recordroleid = 6;
	repeated uint32 recordcount = 7;
	repeated uint32 recordtime = 8;
	repeated string recordname = 9;
	optional string rolename = 10;
	optional uint32 roleprofession = 11;
	repeated uint64 otherroleid = 12;
	repeated string othername = 13;
	repeated uint32 othercount = 14;
	repeated uint32 otherprofession = 15;
	repeated uint32 updegreelevel = 16;
	repeated MapIntItem sendFlowersTotal = 17;
	repeated FlowerInfo2Client sendLog = 18;
	repeated MapIntItem receiveFlowersTotal = 19;
	repeated ReceiveRoleFlowerInfo2Client receiveRank = 20;
	optional ErrorCode errorcode = 21;
}

message ShowFlowerPageArg{
	optional uint64 roleid = 1;
}

message SendFlowerRes{
	optional ErrorCode errorcode = 1;
	optional uint32 fatigue = 2;
}

message GuildInfo{
	optional string name = 1;
	optional uint64 leaderID = 2;
	optional string leaderName = 3;
	optional int32 level = 4;
	optional int32 memberCount = 5;
	optional bool isSendApplication = 6;
	optional uint64 id = 7;
	optional int32 ppt = 8;
	optional int32 needapproval = 9;
	optional int32 icon = 10;
	optional int32 capacity = 11;
	optional string annoucement = 12;
	optional uint32 guildExp = 13;
	optional uint32 titleID = 14;
	optional uint32 prestige = 15;
}

message FetchGuildListArg{
	optional int32 start = 1;
	optional int32 count = 2;
	optional int32 reason = 3;
	optional int32 sortType = 4;
	optional bool reverse = 5;
	optional string name = 6;
}

message FetchGuildListRes{
	repeated GuildInfo guilds = 1;
	optional ErrorCode errorcode = 2;
}

message FetchChapterChestArg{
	optional int32 chapterID = 1;
	optional int32 chestID = 2;
}

message FetchChapterChestRes{
	optional ErrorCode result = 1;
}

message RoleStateReport{
	repeated uint64 roleid = 1;
	repeated uint32 state = 2;
	repeated uint32 timelastlogin = 3;
}

message RoleStateNtf{
	repeated uint64 roleid = 1;
	repeated uint32 state = 2;
	repeated uint32 timelastlogin = 3;
}

message CreateOrJoinGuild{
	optional bool iscreate = 1;
	optional uint64 gid = 2;
	optional string gname = 3;
	optional int32 icon = 4;
}

message CreateOrJoinGuildRes{
	optional ErrorCode result = 1;
	optional uint64 gid = 2;
	optional string name = 3;
}

message FetchGAPPArg{
}

message FetchGAPPRes{
	optional ErrorCode result = 1;
	repeated uint64 roleid = 2;
	repeated string rolename = 3;
	repeated uint32 ppt = 4;
	repeated uint32 time = 5;
	repeated uint32 level = 6;
	repeated RoleType profession = 7;
}

message GuildApprovalArg{
	optional uint64 roleid = 1;
	optional int32 type = 2;
}

message GuildApprovalRes{
	optional ErrorCode result = 1;
}

message LeaveGuildArg{
	optional uint64 roleID = 1;
}

message LeaveGuildRes{
	optional ErrorCode result = 1;
}

message ChangeGuildSettingArg{
	optional int32 Icon = 1;
	optional int32 powerpoint = 2;
	optional int32 needapproval = 3;
	optional string annoucement = 4;
}

message ChangeGuildSettingRes{
	optional ErrorCode result = 1;
}

message GuildMemberInfo{
	optional uint64 roleid = 1;
	optional int32 position = 2;
	optional int32 contribute = 3;
	optional uint32 updateTime = 4;
	optional uint32 groupFightContribute = 5;
	optional uint32 joinTime = 6;
	optional GuildBindStatus bind_status = 7;
	optional uint32 update_bind_time = 8;
}

message MyGuild{
	optional uint64 gid = 1;
	optional int32 position = 2;
	optional int32 level = 3;
	optional uint32 icon = 4;
	optional string name = 5;
}

message GuildSettingChanged{
	optional int32 Icon = 1;
	optional int32 RecuitPPT = 2;
	optional int32 needApproval = 3;
	optional string annoucement = 4;
}

message GuildBriefArg{
	optional uint64 guildid = 1;
}

message GuildBriefRes{
	optional string name = 1;
	optional string leaderName = 2;
	optional string annoucement = 3;
	optional uint64 leaderID = 4;
	optional int32 level = 5;
	optional int32 membercount = 6;
	optional int32 capacity = 7;
	optional int32 icon = 8;
	optional ErrorCode result = 9;
	optional uint32 recuritppt = 10;
	optional int32 needApproval = 11;
	optional uint32 exp = 12;
	optional int32 rank = 13;
	optional uint32 activity = 14;
	optional uint32 activityOne = 15;
	optional uint32 activityTwo = 16;
	optional uint32 activityThree = 17;
	optional uint32 prestige = 18;
}

message GuildMemberArg{
	optional uint64 guildid = 1;
}

message GuildMemberRes{
	optional ErrorCode result = 1;
	repeated GuildMemberData members = 2;
	optional uint32 recvFatigue = 3;
	optional uint32 FatigueMax = 4;
	repeated uint64 guildinheritid = 5;
}

message GuildMemberData{
	optional string name = 1;
	optional uint64 roleid = 2;
	optional int32 position = 3;
	optional uint32 contribute = 4;
	optional uint32 ppt = 5;
	optional uint32 flag = 6;
	optional uint32 level = 7;
	optional RoleType profession = 8;
	optional uint32 lastlogin = 9;
	optional uint32 vip = 10;
	optional bool isonline = 11;
	optional uint32 activity = 12;
	optional uint32 paymemberid = 13;
	optional uint32 title = 14;
	optional uint32 task_luck = 15;
}

message GuildRecord{
	optional uint32 cardplaycount = 1;
	optional uint32 cardchangecount = 2;
	optional uint32 updateday = 3;
	optional uint32 checkin = 4;
	optional uint32 boxmask = 5;
	optional uint32 cardbuychangecount = 6;
	optional uint32 recvFatigue = 7;
	optional uint32 askBonusTime = 8;
	optional uint32 getCheckInBonusNum = 9;
	repeated uint32 darereward = 10;
	optional bool ishintcard = 11;
	repeated GuildSkill guildskills = 12;
	optional uint64 cardmatchid = 13;
	optional uint32 inheritTeaTime = 14;
	optional uint32 inheritStuTime = 15;
	optional RoleGuildBonusData bonusData = 16;
	optional uint32 guildinheritcdtime = 17;
	optional uint32 teacherinherittime = 18;
	repeated MapKeyValue partyreward = 19;
}

message StartGuildCardArg{
}

message StartGuildCardRes{
	optional ErrorCode errorcode = 1;
	repeated uint32 card = 2;
	optional uint32 result = 3;
	optional uint32 store = 4;
}

message QueryGuildCardArg{
}

message QueryGuildCardRes{
	optional uint32 playcount = 1;
	optional uint32 changecount = 2;
	optional uint32 canplaycount = 3;
	optional uint32 canchangecount = 4;
	optional uint32 allcount = 5;
	optional uint32 canallcount = 6;
	optional uint32 bestresult = 7;
	repeated uint32 bestcards = 8;
	optional uint32 buychangcount = 9;
	optional string bestrole = 10;
	optional ErrorCode errorcode = 11;
}

message ChangeGuildCardArg{
	optional uint32 card = 1;
}

message ChangeGuildCardRes{
	optional ErrorCode errorcode = 1;
	optional uint32 card = 2;
	optional uint32 result = 3;
}

message EndGuildCardArg{
}

message EndGuildCardRes{
	optional ErrorCode errorcode = 1;
	optional uint32 result = 2;
}

message ChangeGuildPositionArg{
	optional uint64 roleid = 1;
	optional int32 position = 2;
}

message ChangeGuildPositionRes{
	optional ErrorCode result = 1;
}

message GuildAllDBData{
	optional uint64 gid = 1;
	optional uint32 optype = 2;
	optional bytes brief = 3;
	optional bytes application = 4;
	optional bytes history = 5;
	optional bytes card = 6;
	optional bytes guildBonus = 7;
	optional bytes checkin = 8;
	optional string name = 9;
	optional bytes guildGoblin = 10;
	optional bytes guildactivity = 11;
	optional bytes guildwage = 12;
	optional bytes guildcamp = 13;
	optional bytes garden = 14;
	optional bytes guilddonate = 15;
}

message GStoreBrief{
	optional uint64 gid = 1;
	optional uint64 leaderID = 2;
	optional int32 level = 3;
	optional int32 icon = 4;
	optional int32 recuitppt = 5;
	optional int32 needapproval = 6;
	optional int32 capacity = 7;
	optional string annoucement = 8;
	optional string leaderName = 9;
	optional string name = 10;
	repeated GuildMemberInfo members = 11;
	optional uint32 exp = 12;
	optional uint32 lastexp = 13;
	repeated GuildSkillData skillData = 14;
	optional uint32 dare = 15;
	optional uint32 bossIndex = 16;
	optional uint32 dareLvl = 17;
	optional uint32 opentime = 18;
	optional uint32 prestige = 19;
	optional GuildBindGroupInfo bind_info = 20;
	optional uint32 max_territory_level = 21;
}

message GAppInfo{
	optional uint64 roleID = 1;
	optional uint32 time = 2;
}

message GStoreApplications{
	repeated GAppInfo apps = 1;
}

message DoodadInfo{
	optional int32 waveid = 1;
	optional int32 type = 2;
	optional uint32 id = 3;
	optional uint32 count = 4;
}

message GetOtherGuildBriefArg{
	optional uint64 roleid = 1;
}

message GetOtherGuildBriefRes{
	optional ErrorCode errorcode = 1;
	optional string guildname = 2;
	optional string leadername = 3;
	optional uint64 leaderid = 4;
	optional uint32 guildlevel = 5;
	optional uint32 icon = 6;
	optional string announcement = 7;
	optional uint32 currentcount = 8;
	optional uint32 allcount = 9;
}

message GHisRecord{
	optional uint32 type = 1;
	optional uint32 time = 2;
	optional uint32 position = 3;
	optional uint64 roleid = 4;
	optional string rolename = 5;
}

message GuildHistoryArg{
}

message GuildHistoryRes{
	optional ErrorCode result = 1;
	repeated GHisRecord records = 2;
}

message GHisRecordList{
	repeated GHisRecord records = 1;
}

message GuildCard{
	optional uint32 updateday = 1;
	optional uint32 allcount = 2;
	optional uint32 result = 3;
	repeated uint32 cards = 4;
	optional uint64 roleid = 5;
	repeated CardPointRecord matchrecord = 6;
	repeated CardPointRecord teamrecord = 7;
}

message LoginArg{
	optional uint32 gameserverid = 1;
	optional bytes token = 2;
	optional string ios = 3;
	optional string android = 4;
	optional string pc = 5;
	optional string openid = 6;
	optional ClientInfo clientInfo = 7;
	optional uint32 loginzoneid = 8;
}

message LoginRes{
	optional ErrorCode result = 1;
	optional string version = 2;
	optional LoadAccountData accountData = 3;
	optional uint32 function_open = 4;
	optional LoginExtraData data = 5;
	optional LoginReconnectInfo rinfo = 6;
}

message GuildFatigueArg{
	optional int32 optype = 1;
	optional uint64 targetID = 2;
}

message GuildFatigueRes{
	optional ErrorCode result = 1;
	optional int32 totalsend = 2;
	optional int32 totalrecv = 3;
}

message QueryGuildCheckinArg{
}

message QueryGuildCheckinRes{
	optional uint32 checkincount = 1;
	optional uint32 allcount = 2;
	optional uint32 checkin = 3;
	optional uint32 boxmask = 4;
	optional ErrorCode errorcode = 5;
}

message GuildCheckinArg{
	optional uint32 type = 1;
}

message GuildCheckinRes{
	optional ErrorCode errorcode = 1;
}

message GetGuildCheckinBoxArg{
	optional uint32 index = 1;
}

message GetGuildCheckinBoxRes{
	optional ErrorCode errorcode = 1;
}

message GuildCheckinBoxNtf{
	optional uint32 processbar = 1;
	optional uint32 boxmask = 2;
}

message StageCountResetArg{
	optional uint32 groupid = 1;
}

message StageCountResetRes{
	optional ErrorCode errorcode = 1;
}

message GetGuildCheckinRecordsArg{
}

message GetGuildCheckinRecordsRes{
	repeated uint64 roleid = 1;
	repeated string name = 2;
	repeated uint32 type = 3;
	repeated uint32 timestamp = 4;
	optional ErrorCode errorcode = 5;
}

message GuildBonus{
	optional uint32 bonusID = 1;
	optional uint32 bonusType = 2;
	optional uint32 maxPeopleNum = 3;
	optional uint32 bonusNum = 4;
	optional uint32 sendTime = 5;
	optional string sourceName = 6;
	optional string content = 7;
	repeated GetGuildBonusInfo getBonusList = 8;
	optional uint32 contentType = 9;
	optional uint64 sourceID = 10;
	optional uint64 leaderID = 11;
	optional uint64 luckestID = 12;
	optional uint32 getTime = 13;
}

message GetGuildBonusInfo{
	optional uint64 roleID = 1;
	optional string roleName = 2;
	optional uint32 getNum = 3;
	optional uint32 getTime = 4;
	optional bool canThank = 5;
}

message GuildBonusAppear{
	optional uint32 bonusID = 1;
	optional uint32 bonusType = 2;
	optional uint32 maxPeopleNum = 3;
	optional uint32 bonusStatus = 4;
	optional uint32 leftOpenTime = 5;
	optional uint32 leftBringBackTime = 6;
	optional string sourceName = 7;
	optional uint32 alreadyGetPeopleNum = 8;
	optional uint32 needCheckInNum = 9;
	optional uint32 bonusContentType = 10;
	optional uint64 sourceID = 11;
	optional string iconUrl = 12;
}

message GetGuildBonusListArg{
}

message GetGuildBonusListResult{
	repeated GuildBonusAppear bonusList = 1;
	optional ErrorCode errorcode = 2;
}

message GetGuildBonusDetailInfoArg{
	optional uint32 bonusID = 1;
}

message GetGuildBonusDetailInfoResult{
	optional GuildBonusAppear bonusInfo = 1;
	optional string content = 2;
	repeated GetGuildBonusInfo getBonusRoleList = 3;
	optional ErrorCode errorcode = 4;
	optional uint32 bonusNum = 5;
	optional uint32 bonusContentType = 6;
	optional uint64 leaderID = 7;
	optional uint64 luckestID = 8;
	optional bool canThank = 9;
}

message GetGuildBonusRewardArg{
	optional uint32 bonusID = 1;
}

message GetGuildBonusRewardResult{
	optional uint32 getValue = 1;
	optional ErrorCode errorcode = 2;
	optional int32 bonusType = 3;
}

message GuildCheckin{
	optional uint32 updateday = 1;
	optional uint32 process = 2;
	optional uint32 count = 3;
	repeated uint64 roleid = 4;
	repeated uint32 type = 5;
	repeated uint32 timestamp = 6;
}

message GuildBonusList{
	optional uint32 curBonusID = 1;
	repeated GuildBonus bonusList = 2;
	repeated GuildCheckInBonusData checkInBonusData = 3;
	optional uint32 updateDay = 4;
	repeated GuildBonus sendList = 5;
}

message OpenSceneChestArg{
	optional uint32 sceneID = 1;
}

message OpenSceneChestRes{
	optional ErrorCode result = 1;
}

message ChatOfflineNotify{
	repeated ChatInfo rolechat = 1;
	repeated ChatInfo guildchat = 2;
	repeated ChatInfo worldchat = 3;
	repeated ChatInfo teamchat = 4;
	optional PrivateChatList privatechatlist = 5;
	repeated ChatInfo partnerchat = 6;
	repeated ChatInfo groupchat = 7;
}

message GuildBestCardsNtf{
	optional uint32 bestresult = 1;
	repeated uint32 bestcards = 2;
	optional string bestrole = 3;
	optional uint32 type = 4;
	optional uint32 match_type = 5;
}

message ExecuteLevelScriptNtf{
	optional string script = 1;
}

message ReportBattleArg{
	optional BattleData battledata = 1;
}

message ReportBattleRes{
	optional ErrorCode result = 1;
}

message OnlineRewardNtf{
	repeated uint32 state = 1;
	repeated uint32 timeleft = 2;
}

message NextDayRewardNtf{
	optional uint32 state = 1;
	optional uint32 timeleft = 2;
}

message GetOnlineRewardArg{
	optional uint32 index = 1;
}

message GetOnlineRewardRes{
	optional ErrorCode errorcode = 1;
}

message GetNextDayRewardArg{
}

message GetNextDayRewardRes{
	optional ErrorCode errorcode = 1;
}

message OnlineRewardReport{
}

message NextDayRewardReport{
}

message HintNotify{
	repeated uint32 systemid = 1;
	optional bool isremove = 2;
}

message PositionCheck{
	optional uint64 uid = 1;
	optional Vec3 position = 2;
	optional float face = 3;
}

message PositionCheckList{
	repeated PositionCheck positions = 1;
}

message ChatParamGuild{
	optional uint64 guildid = 1;
	optional string guildname = 2;
}

message ChatParamTeam{
	optional uint32 teamid = 1;
	optional uint32 expeditionid = 2;
	optional string teamname = 3;
}

message ChatArg{
	optional ChatInfo chatinfo = 1;
}

message ChatRes{
	optional ErrorCode errorcode = 1;
	optional uint32 cooldown = 2;
}

message EnemyDoodadInfo{
	optional int32 waveid = 1;
	optional int32 type = 2;
	optional uint32 id = 3;
	optional uint32 count = 4;
	optional Vec3 pos = 5;
	optional uint32 index = 6;
	optional uint32 dropperTemplateID = 7;
	optional uint64 roleid = 8;
}

message EnemyDropDoodadInfo{
	repeated EnemyDoodadInfo doodadInfo = 1;
}

message RollInfo{
	optional uint64 roleID = 1;
	optional uint32 rollValue = 2;
}

message RollInfoRes{
	repeated RollInfo info = 1;
	optional ErrorCode errCode = 2;
}

message randomtask{
	optional int32 taskid = 1;
}

message TeamSelect{
	optional int64 roleid = 1;
	optional int32 index = 2;
}

message SelectedBox{
	optional uint64 roleid = 1;
	optional BoxType boxtype = 2;
	optional uint32 itemid = 3;
	optional uint32 count = 4;
}

message buffInfo{
	optional uint64 uid = 1;
	optional BuffInfo addbuff = 2;
	optional BuffInfo removebuff = 3;
	optional BuffInfo updatebuff = 4;
	optional AllBuffsInfo allbuffsinfo = 5;
}

message TeamInvite{
	optional uint32 inviteID = 1;
	optional uint32 invTime = 2;
	optional uint64 invguildid = 3;
	optional uint64 invdragonguildid = 4;
	optional uint64 invfromroleid = 5;
	optional uint64 invtoroleid = 6;
	optional string invfromrolename = 7;
	optional TeamBrief teambrief = 8;
}

message TeamInviteAck{
	optional bool accept = 1;
	optional uint32 inviteid = 2;
	optional string password = 3;
}

message OtherFetchDoodadRes{
	repeated RollInfo rollInfos = 1;
	optional EnemyDoodadInfo doodadInfo = 2;
}

message DelayInfo{
	optional uint32 delay = 1;
}

message PkPrepareNtf{
	optional uint32 beginorend = 1;
}

message PkResult{
	optional PkResultType result = 1;
	optional int32 winpoint = 2;
	optional uint32 honorpoint = 3;
	optional int32 rank = 4;
	repeated ItemBrief items = 5;
	optional int32 firstrank = 6;
	optional uint32 dragoncount = 7;
	optional KKVsRoleState mystate = 8;
	optional KKVsRoleState opstate = 9;
}

message PkRecord{
	optional uint32 point = 1;
	optional uint32 week = 2;
	optional uint32 unused_win = 3;
	optional uint32 unused_lose = 4;
	optional uint32 unused_continuewin = 5;
	optional uint32 honorpoint = 6;
	repeated uint32 boxtaken = 7;
	repeated PkOneRecord records = 8;
	optional uint32 unused_continuelose = 9;
	repeated uint32 prowin = 10;
	repeated uint32 prolose = 11;
	optional uint32 unused_lastwin = 12;
	optional uint32 unused_lastlose = 13;
	repeated uint32 prodraw = 14;
	optional uint32 unused_draw = 15;
	optional uint32 pointlastlose = 16;
	optional uint32 day = 17;
	optional uint32 rewardcounttoday = 18;
	optional uint32 todayplaytime = 19;
	optional PkBaseHist histweek = 20;
	optional PkBaseHist histall = 21;
	optional uint32 pkdaytimes = 22;
	optional uint32 weektimes = 23;
	optional uint32 last7daystime = 24;
	optional PkRecordSubInfo info2v2 = 25;
	optional uint32 oneweekresettime = 26;
	optional uint32 lastweekpoint = 27;
	optional PkBaseHist histday = 28;
}

message PkTimeoutNtf{
	optional uint32 timeout = 1;
}

message PkOneRecord{
	optional uint64 opposer = 1;
	optional uint32 profession = 2;
	optional string name = 3;
	optional int32 point = 4;
	optional uint32 honorpoint = 5;
	optional PkResultType result = 6;
}

message SkillResultReqUnit{
	optional uint32 SkillID = 1;
	optional Vec3 Pos = 2;
	optional float Face = 3;
	optional int32 TriggerTime = 4;
	optional int32 ResultToken = 5;
	optional Vec3 ResultAt = 6;
	optional float ResultForward = 7;
	repeated uint64 TargetList = 8;
}

message GuildGoblinInfoArg{
}

message GuildGoblinInfoRes{
	optional int32 level = 1;
	optional int32 leftEnterCount = 2;
	optional int32 guildTotalKillCount = 3;
	repeated GuildGoblinRoleKillInfo memberRankInfo = 4;
	optional ErrorCode errorCode = 5;
}

message GuildGoblinRoleKillInfo{
	optional uint64 roleID = 1;
	optional string roleName = 2;
	optional int32 killNum = 3;
	optional int32 ability = 4;
	optional int32 roleLevel = 5;
}

message GuildGoblinSceneInfo{
	optional int32 killNum = 1;
	optional int32 contribute = 2;
}

message GuildGoblinResult{
	optional bool getGuildBonus = 1;
	optional int32 curRank = 2;
}

message GuildGoblinSave{
	optional int32 totalKillNum = 1;
	repeated KillGoblinInfo killGoblinInfo = 2;
	optional int32 updateTime = 3;
}

message MapIntItem{
	optional uint64 key = 1;
	optional uint32 value = 2;
}

message KillGoblinInfo{
	optional uint64 roleID = 1;
	optional string roleName = 2;
	optional int32 killNum = 3;
	optional int32 ability = 4;
	optional int32 roleLevel = 5;
}

message QueryPkInfoRes{
	optional uint32 rank1v1 = 1;
	optional uint32 rewardcount = 2;
	optional PkRecord info = 3;
	optional uint32 timelimit = 4;
	optional uint32 rankrewardleftT = 5;
	optional uint32 rank2v2 = 6;
}

message BulletUnitData{
	optional uint32 SkillId = 1;
	optional int32 TriggerTime = 2;
	optional int32 ResultToken = 3;
	optional Vec3 Pos = 4;
	optional float Face = 5;
	optional int32 AdditionalDegree = 6;
	optional uint64 BulletToken = 7;
	optional uint64 Target = 8;
}

message SkillBulletResultReqUnit{
	optional uint64 BulletId = 1;
	optional Vec3 ResultAt = 2;
	optional float ResultForward = 3;
	repeated uint64 TargetList = 4;
	optional bool IsCollided = 5;
}

message FinishStateInfo{
	optional SceneFinishState state = 1;
	optional int32 countdown = 2;
}

message PkRoleInfo{
	optional PkRoleRec pkrec = 1;
	optional RoleSmallInfo rolebrief = 2;
	optional uint32 serverid = 3;
}

message PkRoleInfoNtf{
	repeated PkRoleInfo pkroleinfo = 1;
}

message CircleDrawData{
	optional uint32 index = 1;
	optional uint32 itemid = 2;
	optional uint32 itemcount = 3;
	optional uint32 prob = 4;
}

message CircleDrawGive{
	optional uint32 itemid = 1;
	optional uint32 index = 2;
}

message AddLevelScriptExtString{
	optional string extString = 1;
	optional uint32 sceneTempID = 2;
	optional int32 waveID = 3;
}

message BossRushResult{
	optional uint32 currentmax = 1;
	optional uint32 lastmax = 2;
}

message SceneDamageRankNtf{
	repeated string name = 1;
	repeated float damage = 2;
	repeated uint64 roleid = 3;
}

message SceneLeftDoodad{
	repeated ItemBrief items = 1;
}

message GMHttpArg{
	optional string command = 1;
	repeated string keys = 2;
	repeated string values = 3;
	optional uint32 httpid = 4;
	optional uint32 serverid = 5;
}

message GMHttpRes{
	optional int32 result = 1;
	optional string resultstring = 2;
	optional string errorMsg = 3;
}

message ReconnectNtf{
	optional bool isadd = 1;
	optional uint32 sceneid = 2;
}

message ChangeSupplementReport{
	optional uint64 uniqueid = 1;
	optional uint32 slot = 2;
}

message ChangeSupplementNtf{
	optional ErrorCode errorcode = 1;
	repeated uint64 uniqueids = 2;
}

message UseSupplementReq{
	optional uint64 uniqueid = 1;
	optional uint32 itemid = 2;
}

message UseSupplementRes{
	optional ErrorCode errorcode = 1;
}

message RoleConfig{
	repeated string type = 1;
	repeated string value = 2;
}

message SetRoleConfigReq{
	optional string type = 1;
	optional string value = 2;
}

message SetRoleConfigRes{
	optional ErrorCode errorcode = 1;
}

message RegisterLoginNtf{
	optional uint32 serverid = 1;
	optional string platform = 2;
	optional ServerInfoPara data = 3;
}

message QTEOperation{
	optional uint32 type = 1;
	optional uint64 monsterid = 2;
}

message TokenNoitfyData{
	optional bytes logintoken = 1;
	optional int32 serverid = 2;
}

message ServerState{
	optional int32 serverID = 1;
	optional int32 serverState = 2;
}

message ServerListArg{
	repeated ServerState stateList = 1;
}

message FriendDegreeUpNtf{
	optional uint64 roleid = 1;
	optional string friendname = 2;
	optional uint32 orginlevel = 3;
	optional uint32 currentlevel = 4;
	optional uint32 currentleft = 5;
	optional uint32 daydegree = 6;
	optional uint32 alldegree = 7;
}

message DegreeAddCount{
	repeated uint32 type = 1;
	repeated uint32 count = 2;
}

message GaoJiGuModel{
	optional int32 id = 1;
	optional int32 movement = 2;
	optional string name = 3;
	optional int32 showTime = 4;
	repeated FashionData fashion = 5;
	optional float hour = 6;
}

message GaoJiGu2Db{
	optional int32 level = 1;
	repeated GaoJiGuModel models = 2;
	optional int32 exp = 3;
	optional uint32 updateTime = 4;
	optional FishingInfo fishingInfo = 5;
}

message Position{
	optional uint64 uid = 1;
	optional int32 pos_x = 2;
	optional int32 pos_y = 3;
	optional int32 pos_z = 4;
	optional int32 face = 5;
	optional bool bTransfer = 6;
}

message TeleportNoticeState{
	optional bool onnotice = 1;
}

message LoginGateData{
	optional string ip = 1;
	optional string zonename = 2;
	optional string servername = 3;
	optional int32 port = 4;
	optional int32 serverid = 5;
	optional uint32 state = 6;
	optional uint32 flag = 7;
	optional bool isbackflow = 8;
	optional uint32 backflowlevel = 9;
}

message FishingInfo{
	optional int32 level = 1;
	optional int32 exp = 2;
	optional int32 fishingNum = 3;
	optional int32 timestamp = 4;
	optional int32 recoverNum = 5;
}

message LevelUpSlotAttrArg{
	optional uint32 slot = 1;
	optional uint32 count = 2;
}

message LevelUpSlotAttrRes{
	optional ErrorCode errorcode = 1;
	repeated uint32 uplevels = 2;
}

message AllyMatchRoleID{
	optional uint64 allyID = 1;
	optional uint64 roleID = 2;
}

message ChatParamLink{
	optional uint32 id = 1;
	optional string content = 2;
	repeated uint64 param = 3;
}

message TeamFullDataNtf{
	optional bool hasTeam = 1;
	optional TeamBrief teamBrief = 2;
	repeated TeamMember members = 3;
}

message TShowTopListArg{
	optional int32 type = 1;
	optional int32 index = 2;
}

message TShowTopListRes{
	optional ErrorCode error = 1;
	repeated RoleBriefInfo rolesInfo = 2;
	optional bool isEnd = 3;
}

message TShowRoleVoteCount{
	optional uint64 roleID = 1;
	optional string roleName = 2;
	optional int32 num = 3;
}

message TShowVoteRecord{
	optional int32 updateTime = 1;
	repeated TShowRoleDailyVoteData voteData = 2;
	optional bool haveSendRank = 3;
}

message TShow2DB{
	repeated TShowRoleVoteCount voteInfo = 1;
	optional uint32 updatetime = 2;
	optional uint32 week = 3;
}

message TShowRoleDailyVoteData{
	optional uint64 roleID = 1;
	optional int32 freeCount = 2;
	optional int32 costCount = 3;
}

message RoleStateMatch{
	optional bool IsMatching = 1;
	optional StopMatchReason stopmatchreason1 = 2;
	optional KMatchType matchtype = 3;
}

message PetSingle{
	optional uint64 uid = 1;
	optional uint32 petid = 2;
	optional uint32 level = 3;
	optional uint32 exp = 4;
	optional uint32 sex = 5;
	optional uint32 power = 6;
	optional uint32 mood = 7;
	optional uint32 hungry = 8;
	repeated uint32 fixedskills = 9;
	repeated uint32 randskills = 10;
	optional SPetRecord record = 11;
	optional uint32 max_level = 12;
	optional bool canpairride = 13;
}

message PetOperationRes{
	optional ErrorCode errorcode = 1;
	optional uint64 followpetid = 2;
	optional bool ismoodup = 3;
	optional bool ishuneryup = 4;
	repeated PetInviteInfo invite = 5;
}

message PetOperationArg{
	optional PetOP type = 1;
	optional uint64 uid = 2;
	optional ItemBrief food = 3;
	optional uint64 destpet_id = 4;
	optional bool setpairride = 5;
}

message PetChangeNotfiy{
	optional PetOP type = 1;
	repeated PetSingle pet = 2;
	optional uint32 delexp = 3;
	repeated petGetSkill getskills = 4;
	optional uint32 delskillid = 5;
}

message CampInfo2DB{
	optional uint32 campID = 1;
	optional bytes fortInfo = 2;
}

message CampRoleRecord{
	optional uint32 lastCampID = 1;
	optional CampTaskInfo2DB taskInfo = 2;
}

message CampInfoDataNtf{
	repeated CampInfo2DB campInfos = 1;
}

message SPetRecord{
	optional uint32 touchStartTime = 1;
	optional uint32 touchHourAttr = 2;
	optional uint32 touchTodayAttr = 3;
	optional uint32 followStartTime = 4;
	optional uint32 followTodayAttr = 5;
	optional uint32 hungryStartTime = 6;
	optional uint32 moodStartTime = 7;
	optional uint32 max_level = 8;
}

message CampTaskInfo{
	optional uint32 taskID = 1;
	optional int32 taskStatus = 2;
}

message CampTaskInfo2DB{
	optional int32 resetTime = 1;
	repeated CampTaskInfo infos = 2;
	optional int32 refreshTimes = 3;
	optional int32 rewardTimes = 4;
	optional int32 rewardTime = 5;
}

message NewBattleResult{
	optional StageResultInfo stageInfo = 1;
	optional SpecialStageInfo specialStage = 2;
	repeated StageRoleResult roleReward = 3;
	optional bool isFinalResult = 4;
	optional StageWatchInfo watchinfo = 5;
	optional StageGuildInfo guildinfo = 6;
	optional bool isexpseal = 7;
}

message StageResultInfo{
	optional uint32 stageType = 1;
	optional uint32 stageID = 2;
	optional bool isStageFailed = 3;
	optional uint32 timespan = 4;
	optional uint32 abyssid = 5;
	optional MobaBattleResult mobabattle = 6;
	optional WeekEnd4v4TeamResult weekend4v4tmresult = 7;
	optional bool end = 8;
}

message SpecialStageInfo{
	optional uint32 arenaup = 1;
	optional BossRushResult bossrushresult = 2;
	optional bool arenamissed = 3;
}

message StageRoleResult{
	optional uint32 money = 1;
	optional uint32 exp = 2;
	optional uint32 stars = 3;
	optional uint32 firststars = 4;
	optional uint32 startLevel = 5;
	optional uint32 startExp = 6;
	optional string rolename = 7;
	repeated ItemBrief items = 8;
	repeated ItemBrief starreward = 9;
	optional GuildGoblinResult guildGoblinResult = 10;
	optional PkResult pkresult = 11;
	optional uint64 roleid = 12;
	optional uint32 score = 13;
	optional float damage = 14;
	optional uint32 deathcount = 15;
	optional uint32 maxcombo = 16;
	optional uint32 vipscore = 17;
	optional int32 viplevel = 18;
	optional uint32 endlevel = 19;
	optional uint32 endexp = 20;
	optional uint64 gid = 21;
	optional bool isLeader = 22;
	optional int32 profession = 23;
	optional TowerResult towerResult = 24;
	optional int32 killcount = 25;
	optional int32 killcontinuemax = 26;
	optional float treat = 27;
	optional PVPResult pvpresult = 28;
	repeated BattleRewardChest box = 29;
	repeated ItemBrief guildreward = 30;
	optional bool ishelper = 31;
	optional DragonExpResult deresult = 32;
	optional SkyCityFinalInfo skycity = 33;
	optional bool isexpseal = 34;
	optional uint32 guildexp = 35;
	optional uint32 guildcon = 36;
	optional uint32 guilddargon = 37;
	optional uint32 reswar = 38;
	optional ItemBrief teamcostreward = 39;
	optional uint32 serverid = 40;
	optional HorseAward horse = 41;
	optional InvFightBattleResult invfightresult = 42;
	optional HeroBattleResult heroresult = 43;
	optional uint32 military_rank = 44;
	optional uint32 assitnum = 45;
	optional uint32 behitdamage = 46;
	optional uint32 multikillcountmax = 47;
	optional CustomBattleResult custombattle = 48;
	optional MobaBattleRoleResult mobabattle = 49;
	optional WeekEnd4v4BattleRoleData weekend4v4roledata = 50;
	optional BigMeleeBattleResult bigmelee = 51;
	optional BattleFieldBattleResult battlefield = 52;
	optional bool isboxexcept = 53;
}

message SMail{
	optional uint64 uid = 1;
	optional uint32 type = 2;
	optional bool isread = 3;
	optional bool isdelete = 4;
	optional uint32 state = 5;
	optional uint32 timestamp = 6;
	optional uint32 timeexpire = 7;
	optional bool istemplate = 8;
	optional uint64 srcid = 9;
	optional string srcname = 10;
	optional string title = 11;
	optional string content = 12;
	repeated ItemBrief items = 13;
	optional int32 timeleft = 14;
	repeated Item xitems = 15;
	optional int32 reason = 16;
	optional int32 subreason = 17;
	optional string extparam = 18;
}

message FetchMailArg{
	optional uint32 page = 1;
	optional uint32 count = 2;
}

message FetchMailRes{
	optional uint32 page = 1;
	optional uint32 pagecount = 2;
	repeated SMail mails = 3;
}

message MailOpArg{
	optional uint32 optype = 1;
	repeated uint64 uid = 2;
}

message MailOpRes{
	optional ErrorCode errorcode = 1;
	repeated uint64 expireuid = 2;
}

message BuyTeamSceneCountP{
	optional int32 type = 1;
}

message BuyTeamSceneCountRet{
	optional uint32 maxcount = 1;
	optional uint32 buycount = 2;
	optional uint32 entercount = 3;
	optional ErrorCode errcode = 4;
}

message SceneFlame{
	optional uint32 sceneid = 1;
	optional AbyssFlameStage stage = 2;
}

message ExpFindBackData{
	repeated ExpFindBackInfo expBackInfos = 1;
}

message ExpFindBackArg{
	optional bool isFree = 1;
}

message ExpFindBackRes{
	optional ErrorCode error = 1;
}

message ExpFindBackInfo{
	optional ExpBackType type = 1;
	optional int32 usedCount = 2;
}

message RoleFindBackRecord{
	optional int32 openTime = 1;
	optional int32 updateTime = 2;
	optional bool isFoundBack = 3;
	repeated ExpFindBackInfo usedInfos = 4;
	repeated ExpFindBackInfo curUsedInfos = 5;
	optional int32 findBackOpenTime = 6;
	optional int32 itemBackUpdateTime = 7;
	repeated ItemFindBackInfo itemFindBackInfosHis = 8;
	repeated ItemFindBackInfo itemFindBackInfoCur = 9;
	optional uint32 unlockSealTime = 10;
	repeated UnlockSealFindBackData unlockSealData = 11;
	optional int32 notifyBackTime = 12;
}

message SVersion{
	optional uint32 type = 1;
	repeated string ios = 2;
	repeated string android = 3;
	repeated string pc = 4;
}

message ClientInfo{
	optional int32 PlatID = 1;
	optional string ClientVersion = 2;
	optional string SystemSoftware = 3;
	optional string SystemHardware = 4;
	optional string TelecomOper = 5;
	optional string Network = 6;
	optional int32 ScreenWidth = 7;
	optional int32 ScreenHight = 8;
	optional float Density = 9;
	optional string LoginChannel = 10;
	optional string CpuHardware = 11;
	optional int32 Memory = 12;
	optional string GLRender = 13;
	optional string GLVersion = 14;
	optional string DeviceId = 15;
	optional string ip = 16;
	optional string pf = 17;
	optional StartUpType starttype = 18;
	optional string token = 19;
	optional LoginType logintype = 20;
}

message AutoFight{
	optional bool autof = 1;
}

message RoleExtraInfo{
	optional uint32 lastLevelUpTime = 1;
	optional uint32 lastLoginTime = 2;
	optional uint32 lastLogoutTime = 3;
	optional uint32 loginTimes = 4;
	optional uint32 lastFatigueRecoverTime = 5;
	optional string fristchannel = 6;
	optional bool channelmask = 7;
}

message GetTowerActivityTopArg{
}

message GetTowerActivityTopRes{
	optional ErrorCode error = 1;
	repeated TowerRecord infos = 2;
	optional int32 leftResetCount = 3;
}

message TowerSceneInfoData{
	optional int32 leftTime = 1;
	optional int32 curTowerFloor = 2;
	repeated ItemBrief items = 3;
}

message TowerResult{
	optional bool isNewRecord = 1;
	optional int32 towerFloor = 2;
}

message TowerRecord2DB{
	repeated TowerRecord records = 1;
	optional int32 m_updateTime = 2;
	optional int32 useResetCount = 3;
}

message TeamCountInfo{
	optional int32 teamType = 1;
	optional int32 finishCountToday = 2;
	optional int32 buyCountToday = 3;
	optional int32 extraAddCount = 4;
	optional uint32 helpcount = 5;
}

message TowerRecord{
	optional int32 openHardLevel = 1;
	optional int32 reachTopFloor = 2;
	optional int32 bestTime = 3;
	optional int32 sweepTime = 4;
	optional int32 sweepFloor = 5;
	optional int32 curFloor = 6;
	optional int32 curCostTime = 7;
	optional int32 refreshCount = 8;
	optional int32 refreshResult = 9;
	repeated int32 gotFloorFirstPassReward = 10;
}

message GetDesignationReq{
}

message GetDesignationRes{
	optional ErrorCode result = 1;
	optional uint32 coverDesignationID = 2;
	optional uint32 abilityDesignationID = 3;
	repeated bool dataList = 4;
	optional uint32 maxPPT = 5;
	optional string name = 6;
}

message SetDesignationReq{
	optional uint32 type = 1;
	optional uint32 designationID = 2;
}

message SetDesignationRes{
	optional ErrorCode result = 1;
	repeated bool dataList = 2;
	optional string name = 3;
}

message GetClassifyDesignationReq{
	optional uint32 type = 1;
}

message GetClassifyDesignationRes{
	optional ErrorCode result = 1;
	repeated StcDesignationInfo dataList = 2;
}

message CoverDesignationNtf{
	optional uint32 designationID = 1;
	optional string desname = 2;
}

message AchieveBriefInfo{
	optional uint32 achieveClassifyType = 1;
	optional uint32 achievePoint = 2;
	optional uint32 maxAchievePoint = 3;
	optional uint32 canRewardCount = 4;
}

message GetAchieveBrifInfoReq{
}

message GetAchieveBrifInfoRes{
	optional ErrorCode result = 1;
	optional uint32 achievePoint = 2;
	optional uint32 maxAchievePoint = 3;
	repeated AchieveBriefInfo dataList = 4;
	optional uint32 rewardId = 5;
}

message GetAchieveClassifyInfoReq{
	optional uint32 type = 1;
}

message GetAchieveClassifyInfoRes{
	optional ErrorCode result = 1;
	repeated StcAchieveInfo dataList = 2;
}

message ReachAchieveNtf{
	optional uint32 achieveID = 1;
}

message ReqAutoPlay{
	optional bool isautoplay = 1;
}

message RetAutoPlay{
	optional bool succ = 1;
}

message StcDesignationInfo{
	optional uint32 designationID = 1;
	optional bool isNew = 2;
	optional uint32 reachTimestamp = 3;
	optional string name = 4;
	optional uint32 type = 5;
}

message StcAchieveInfo{
	optional uint32 achieveID = 1;
	optional uint32 rewardStatus = 2;
}

message GetAchieveRewardReq{
	optional uint32 achieveID = 1;
}

message GetAchieveRewardRes{
	optional ErrorCode result = 1;
}

message ReachDesignationNtf{
	optional uint32 designationID = 1;
}

message GetLevelSealInfoArg{
}

message GetLevelSealInfoRes{
	optional ErrorCode errorcode = 1;
	optional LevelSealInfo levelSealData = 2;
}

message LevelSealInfo{
	optional uint32 type = 1;
	optional uint32 endTime = 2;
	optional uint32 unLockBossCount = 3;
	optional uint32 status = 4;
	optional uint32 totalCollectCount = 5;
	optional uint32 selfCollectCount = 6;
	optional int32 selfAwardCountIndex = 7;
}

message LevelSealOverExpArg{
}

message LevelSealOverExpRes{
	optional ErrorCode errorcode = 1;
	optional uint32 m_uStatus = 2;
}

message ReconectSync{
	optional RoleAllInfo self = 1;
	repeated UnitAppearance units = 2;
	optional UnitAppearance selfAppearance = 3;
	optional DeathInfo deathinfo = 4;
	optional bool isautofight = 5;
	optional ReconnectScene scene = 6;
}

message GetAchievePointRewardReq{
	optional uint32 rewardId = 1;
}

message GetAchievePointRewardRes{
	optional ErrorCode result = 1;
}

message STC_ACHIEVE_POINT_REWARD{
	optional uint32 rewardId = 1;
	optional uint32 rewardStatus = 2;
}

message LoginRewardReq{
}

message LoginReward{
	optional int32 day = 1;
	optional uint32 itemID = 2;
	optional LoginRewardState state = 3;
	repeated ItemBrief items = 4;
}

message LoginRewardRet{
	repeated LoginReward rewards = 1;
	optional bool open = 2;
	optional uint32 logindayforreward = 3;
	optional uint32 sectoday = 4;
}

message LoginRewardGetReq{
	optional int32 day = 1;
}

message LoginRewardGetRet{
	optional ErrorCode ret = 1;
}

message OutLook{
	optional OutLookGuild guild = 1;
	optional OutLookDesignation designation = 2;
	optional OutLookEquip equips = 3;
	optional OutLookTitle title = 4;
	optional OutLookOp op = 5;
	optional OutLookSprite sprite = 6;
	optional OutLookState state = 7;
	optional OutLookMilitaryRank military = 8;
	optional OutLookDisplayFashion display_fashion = 9;
	optional OutLookConsumePre pre = 10;
}

message OutLookGuild{
	optional string name = 1;
	optional uint32 icon = 2;
	optional uint64 id = 3;
}

message OutLookEquip{
	repeated uint32 itemid = 1;
	repeated uint32 enhancelevel = 2;
	repeated uint32 slot = 3;
	optional uint32 enhancemaster = 4;
}

message OutLookDesignation{
	optional uint32 id = 1;
	optional string name = 2;
}

message OutLookChange{
	optional uint64 roleid = 1;
	optional OutLook outlook = 2;
}

message PreloadRoleData{
	optional uint32 profession = 1;
	repeated uint32 skillhash = 2;
}

message LoginRecord{
	optional uint32 loginDayCount = 1;
	optional uint32 logindayforloginreward = 2;
	optional uint32 lastUpdateDay = 3;
	optional int32 lrostate = 4;
	repeated LoginReward loginRewards = 5;
}

message FiveRewardState{
	optional uint32 logindaycount = 1;
	optional LoginRewardState fivedayRS = 2;
	optional LoginRewardState twodayRS = 3;
	optional LoginRewardState threedayRS = 4;
	optional LoginRewardState sevendayRS = 5;
}

message FiveRewardRes{
	optional bool twoday = 1;
	optional bool fiveday = 2;
	optional bool threeday = 3;
	optional bool sevenday = 4;
}

message FiveRewardRet{
	optional ErrorCode ret = 1;
}

message PvpOneRec{
	optional int32 wincount = 1;
	optional int32 losecount = 2;
	optional int32 drawcount = 3;
	optional uint64 mvpID = 4;
	repeated PvpRoleBrief myside = 5;
	repeated PvpRoleBrief opside = 6;
	optional uint32 military = 7;
}

message PvpData{
	repeated PvpOneRec pvprecs = 1;
	optional int32 wincountall = 2;
	optional int32 losecountall = 3;
	optional int32 drawcountall = 4;
	optional int32 joincounttodayint = 5;
	optional int32 wincountthisweek = 6;
	optional uint32 lastdayupt = 7;
	optional uint32 lastweekupt = 8;
	optional bool weekrewardhaveget = 9;
	optional uint32 todayplaytime = 10;
	optional uint32 todayplaytimes = 11;
}

message StepSyncData{
	optional int32 PosXZ = 1;
	optional uint64 EntityID = 2;
	optional int32 Skillid = 3;
	optional int32 HitIdx = 4;
	optional uint64 OpposerID = 5;
	optional bool HitForceToFly = 6;
	optional int32 HitParalyzeFactor = 7;
	optional bool PresentInFreezed = 8;
	optional bool FreezedFromHit = 9;
	optional bool Passive = 10;
	optional int32 Common = 11;
	optional int32 Velocity = 12;
	optional int32 SkillCommon = 13;
}

message NewGuildBonusData{
	optional bool showIconInScreen = 1;
}

message GuildCheckInBonusInfoArg{
}

message GuildCheckInBonusInfoRes{
	optional ErrorCode errorcode = 1;
	optional bool isCheckedIn = 2;
	optional int32 checkInNum = 3;
	optional int32 onlineNum = 4;
	optional int32 guildMemberNum = 5;
	repeated GuildBonusAppear checkInBonusInfo = 6;
	optional int32 leftAskBonusTime = 7;
	optional int32 timeofday = 8;
}

message SendGuildBonusArg{
}

message SendGuildBonusRes{
	optional ErrorCode errorcode = 1;
}

message AskForCheckInBonusArg{
}

message AskForCheckInBonusRes{
	optional ErrorCode errorcode = 1;
}

message ThanksForBonusArg{
	optional uint32 bonusID = 1;
}

message ThanksForBonusRes{
	optional ErrorCode errorcode = 1;
}

message GuildCheckInBonusData{
	optional uint32 bonusID = 1;
	optional uint32 contentType = 2;
	optional uint32 needCheckInNum = 3;
}

message PvpArg{
	optional PvpReqType type = 1;
}

message StepSyncInfo{
	repeated StepSyncData DataList = 1;
	optional uint32 StepFrame = 2;
}

message PvpBaseData{
	optional int32 wincountall = 1;
	optional int32 losecountall = 2;
	optional int32 drawcountall = 3;
	optional int32 wincountthisweek = 4;
	optional int32 wincountweekmax = 5;
	optional int32 jointodayintime = 6;
	optional int32 jointodayintimemax = 7;
	optional int32 matchingcount = 8;
	optional bool weekRewardHaveGet = 9;
}

message GetAllRoleArg{
	optional string account = 1;
	optional uint32 id = 2;
	optional uint32 serverid = 3;
}

message PvpHistory{
	repeated PvpOneRec recs = 1;
}

message PvpRes{
	optional PvpBaseData basedata = 1;
	optional PvpHistory history = 2;
	optional PvpReqType reqtype = 3;
	optional ErrorCode err = 4;
}

message GetAllRoleRes{
	repeated RoleAllInfo RoleAllInfoList = 1;
	optional ErrorCode result = 2;
}

message TssSdkAntiData{
	optional bytes anti_data = 1;
	optional uint32 anti_data_len = 2;
}

message PVPResult{
	optional int32 mygroup = 1;
	optional int32 wingroup = 2;
	optional int32 killleadercount = 3;
	optional bool ismvp = 4;
	repeated ItemBrief dayjoinreward = 5;
	repeated ItemBrief winreward = 6;
}

message QANotify{
	optional uint32 type = 1;
	optional bool is_playing = 2;
	optional bool is_over = 3;
}

message AgreeQAReq{
	optional bool agree = 1;
	optional uint32 type = 2;
}

message AgreeQARes{
	optional ErrorCode result = 1;
}

message PushQuestionNtf{
	optional uint32 qid = 1;
	optional uint32 serialNum = 2;
}

message GMCloseQARoom{
}

message GiveUpQuestionNtf{
}

message AnswerAckNtf{
	optional uint64 roleId = 1;
	optional string answer = 2;
	optional bool correct = 3;
	optional uint32 times = 4;
	optional uint32 rank = 5;
	optional uint64 audioUid = 6;
	optional uint32 answertime = 7;
	optional string userName = 8;
	optional uint32 coverDesignationId = 9;
	optional uint32 audioTime = 10;
	optional uint32 profession = 11;
}

message PvpBattleBeginData{
	optional int32 thisGameCount = 1;
	optional int32 allGameCount = 2;
	optional uint64 group1Leader = 3;
	optional uint64 group2Leader = 4;
	optional uint32 contiTime = 5;
}

message PvpBattleEndData{
	optional int32 wingroup = 1;
	optional bool isAllEnd = 2;
	optional PVP_ONEGAMEEND_REASON reason = 3;
}

message PvpBattleKill{
	optional uint64 killID = 1;
	optional uint64 deadID = 2;
	optional uint32 reviveTime = 3;
	optional int32 contiKillCount = 4;
	repeated uint64 assitids = 5;
}

message DoAddFriendArg{
	optional FriendOpType op = 1;
	repeated uint64 roleid = 2;
}

message DoAddFriendRes{
	optional ErrorCode errorcode = 1;
	repeated uint64 failedlist = 2;
}

message FriendOpNotify{
	optional FriendOpType op = 1;
	repeated Friend2Client friendlist = 2;
	repeated Friend2Client applylist = 3;
	repeated uint64 deletelist = 4;
	repeated uint64 deleteapplylist = 5;
	repeated uint64 senderid = 6;
	optional FriendGift giftcount = 7;
	repeated uint32 receivedtime = 8;
}

message FriendApply{
	optional uint64 roleid = 1;
	optional uint32 timestamp = 2;
}

message RoleSmallInfo{
	optional uint64 roleID = 1;
	optional string roleName = 2;
	optional uint32 roleLevel = 3;
	optional uint32 roleProfession = 4;
	optional uint32 rolePPT = 5;
}

message GetFlowerLeftTimeArg{
}

message GetFlowerLeftTimeRes{
	optional ErrorCode errorCode = 1;
	optional int32 leftTime = 2;
	optional bool canGet = 3;
}

message GetFlowerArg{
}

message GetFlowerRes{
	optional ErrorCode errorCode = 1;
	optional int32 leftTime = 2;
	optional bool canGet = 3;
}

message GetFlowerRewardArg{
}

message GetFlowerRewardRes{
	optional ErrorCode errorCode = 1;
}

message FriendGiftOpArg{
	optional FriendOpType op = 1;
	repeated uint64 roleid = 2;
}

message FriendGiftOpRes{
	optional ErrorCode errorcode = 1;
}

message FriendRecord{
	optional uint32 uniqueday = 1;
	optional uint32 receive = 2;
	optional uint32 send = 3;
	optional uint32 lastquerytime = 4;
	repeated uint64 sends = 5;
}

message GetFlowerRewardListArg{
}

message GetFlowerRewardListRes{
	optional ErrorCode errorCode = 1;
	repeated RoleBriefInfo briefList = 2;
	optional bool canGetReward = 3;
}

message AudioBrief{
	optional uint64 audioUid = 1;
	optional bytes audio = 2;
	optional bytes text = 3;
}

message GetAudioListReq{
	repeated uint64 audioUidList = 1;
	optional uint32 rpcid = 2;
}

message GetAudioListRes{
	optional ErrorCode result = 1;
	repeated AudioBrief dataList = 2;
}

message UpLoadAudioReq{
	optional bytes audio = 1;
	optional bytes text = 2;
	optional uint32 srctype = 3;
	optional uint32 savetype = 4;
	optional bool iscross = 5;
	optional uint32 rpcid = 6;
	optional uint64 audiouid = 7;
}

message UpLoadAudioRes{
	optional ErrorCode result = 1;
	optional uint64 audiodownuid = 2;
}

message EnhanceTransterArg{
	optional uint64 originuid = 1;
	optional uint64 destuid = 2;
}

message EnhanceTransterRes{
	optional bool isperfect = 1;
	optional ErrorCode errorcode = 2;
}

message PvpNowUnitData{
	optional uint64 roleID = 1;
	optional string roleName = 2;
	optional uint32 roleLevel = 3;
	optional uint32 roleProfession = 4;
	optional int32 killCount = 5;
	optional int32 dieCount = 6;
	optional int32 groupid = 7;
}

message PvpNowGameData{
	optional int32 group1WinCount = 1;
	optional int32 group2WinCount = 2;
	optional int32 drawWinCount = 3;
	optional uint32 LeftTime = 4;
	optional bool isAllEnd = 5;
	optional uint64 group1Leader = 6;
	optional uint64 group2Leader = 7;
	repeated PvpNowUnitData nowUnitdData = 8;
	optional ErrorCode errcode = 9;
}

message roArg{
	optional bool bNoShowLog = 1;
}

message FlowerInfo{
	optional uint64 roleID = 1;
	optional uint32 count = 2;
	optional uint32 timestamp = 3;
	optional uint32 itemID = 4;
}

message GetQADataReq{
}

message GetQADataRes{
	optional uint32 qid = 1;
	optional uint32  serialnum = 2;
	optional uint32 leftTime = 3;
	optional ErrorCode result = 4;
}

message QAOverNtf{
	optional uint32 total = 1;
	optional uint32 correct = 2;
	repeated ItemBrief dataList = 3;
}

message QARoomRankNtf{
	repeated QARoomRankData dataList = 1;
	optional uint32 myscore = 2;
}

message QARoomRankData{
	optional uint64 uuid = 1;
	optional uint32 score = 2;
}

message FriendGift{
	optional uint32 SendLeft = 1;
	optional uint32 ReceiveLeft = 2;
}

message ReceiveRoleFlowerInfo{
	repeated MapIntItem flowers = 1;
	optional uint64 roleid = 2;
}

message FlowerInfo2Client{
	optional uint64 roleID = 1;
	optional uint32 itemID = 2;
	optional uint32 count = 3;
	optional uint32 timestamp = 4;
	optional string roleName = 5;
}

message ReceiveRoleFlowerInfo2Client{
	optional uint64 roleID = 1;
	optional string roleName = 2;
	repeated MapIntItem flowers = 3;
}

message GuildSkillData{
	optional int32 SkillId = 1;
	optional int32 MaxLvl = 2;
}

message AskGuildSkillInfoArg{
}

message AskGuildSkillInfoReq{
	optional ErrorCode errorcode = 1;
	repeated GuildSkillData SkillLel = 2;
	optional int32 LastGuildExp = 3;
	repeated GuildSkillData roleSkills = 4;
}

message StudyGuildSkillArg{
	optional uint32 skillId = 1;
}

message StudyGuildSkillRes{
	optional ErrorCode errorcode = 1;
	optional uint32 skillId = 2;
	optional uint32 skillLel = 3;
	optional uint32 lastExp = 4;
}

message UploadChatInfoNtf{
	optional uint32 channel = 1;
	optional uint64 storekey = 2;
	optional string chatinfolist = 3;
}

message FMBArg{
}

message FMBRes{
	optional bool refuse = 1;
}

message FMDArg{
	optional uint64 quitRoleID = 1;
	optional string quitRoleName = 2;
}

message GetDragonTopInfoArg{
}

message GetDragonTopInfoRes{
	optional ErrorCode errorCode = 1;
	repeated DragonInfo2Client dragonInfo = 2;
}

message DragonRecord{
	optional int32 dragonType = 1;
	optional int32 hardLevel = 2;
	optional int32 curFloor = 3;
	optional int32 updateTime = 4;
	optional int32 dragonDiamondBoxTimes = 5;
}

message MapKeyValue{
	optional uint64 key = 1;
	optional uint64 value = 2;
}

message SQARecord{
	optional uint32 cur_qa_type = 1;
	repeated MapKeyValue trigger_time = 2;
	repeated MapKeyValue used_count = 3;
	optional uint32 last_reset_time = 4;
	optional uint32 last_end_time = 5;
}

message DragonRecord2DB{
	repeated DragonRecord record = 1;
	optional int32 updateDay = 2;
	optional int32 updateHardDragonDay = 3;
	optional int32 updateSmallDragonDay = 4;
}

message DragonInfo2Client{
	optional int32 dragonType = 1;
	optional int32 hardLevel = 2;
	optional int32 curFloor = 3;
	optional int32 refreshTimes = 4;
	optional DragonWeakType weakType = 5;
}

message RegisterGs2MsArg{
	optional uint32 serverid = 1;
	optional uint32 line = 2;
}

message RegisterGs2MsRes{
	optional ErrorCode errorcode = 1;
	optional uint32 openservertime = 2;
	optional GameAppType apptype = 3;
	optional PlatType plat = 4;
	optional uint32 combineservertime = 5;
	optional uint32 backflowlevel = 6;
}

message RegisterGt2MsArg{
	optional uint32 serverID = 1;
	optional uint32 line = 2;
}

message TeamInvRoleInfo{
	optional uint64 userID = 1;
	optional string userName = 2;
	optional uint32 userLevel = 3;
	optional uint32 userVip = 4;
	optional uint32 userPowerPoint = 5;
	optional string guildName = 6;
	optional uint32 degree = 7;
	optional int32 profession = 8;
	optional uint64 teamguildid = 9;
	optional uint64 roleguildid = 10;
	optional uint64 roledragonguildid = 11;
	optional TeamInvRoleState state = 12;
	optional bool wanthelp = 13;
}

message RegisterGt2MsRes{
	optional ErrorCode errorcode = 1;
}

message TeamInviteArg{
	optional int32 expid = 1;
}

message ListenAddress{
	optional string ip = 1;
	optional uint32 port = 2;
}

message NewGateConnectedData{
	optional uint32 line = 1;
	optional ListenAddress addr = 2;
}

message TeamInviteRes{
	repeated TeamInvRoleInfo friend = 1;
	repeated TeamInvRoleInfo guild = 2;
	repeated TeamInvRoleInfo rec = 3;
	optional ErrorCode errcode = 4;
}

message InviteRufuse{
	optional string name = 1;
}

message RegisterGs2GtArg{
	optional uint32 serverID = 1;
	optional uint32 line = 2;
}

message RegisterGs2GtRes{
	optional ErrorCode errorcode = 1;
	optional uint32 gtline = 2;
}

message InvHistoryArg{
	optional InvHReqType type = 1;
}

message RegisterGt2GsRes{
	optional ErrorCode errorcode = 1;
	optional uint32 gsline = 2;
}

message InvHistoryRes{
	repeated TeamInvite invUnfH = 1;
	optional ErrorCode ret = 2;
}

message RegisterGt2GsArg{
	optional uint32 serverID = 1;
	optional uint32 line = 2;
}

message ReceiveFlowerData{
	optional int32 itemID = 1;
	optional int32 itemCount = 2;
	optional uint64 sendRoleID = 3;
	optional string sendName = 4;
	optional int32 power = 5;
	optional int32 profession = 6;
	optional int32 vip = 7;
}

message LoginRequestNewArg{
	optional string openid = 1;
	optional string token = 2;
	optional ClientInfo clientInfo = 3;
	optional uint32 loginzoneid = 4;
	optional uint32 serverid = 5;
	optional string ios = 6;
	optional string android = 7;
	optional string pc = 8;
}

message StartBattleFailedRes{
	optional uint64 proUserID = 1;
	optional ErrorCode reason = 2;
}

message IdentifyEmblemArg{
	optional uint64 uid = 1;
}

message LoginRequestNewRes{
	optional int32 result = 1;
	optional LoadAccountData accountData = 2;
	optional uint32 function_open = 3;
	optional LoginExtraData data = 4;
	optional LoginReconnectInfo rinfo = 5;
	optional string version = 6;
}

message IdentifyEmblemRes{
	optional ErrorCode errorcode = 1;
}

message RoleGuildContribute{
	optional uint64 roleId = 1;
	optional string RoleName = 2;
	optional int32 contribute = 3;
	optional uint32 updateTime = 4;
}

message ReadAccountDataArg{
	optional uint32 opertype = 1;
	optional string account = 2;
	optional uint32 serverid = 3;
	optional uint32 rpcid = 4;
	optional ReadAccountDataType readType = 5;
}

message OpenGuildQAReq{
}

message OpenGuildQARes{
	optional ErrorCode result = 1;
}

message ReadAccountDataRes{
	optional ErrorCode result = 1;
	optional LoadAccountData accountData = 2;
}

message GetGuildQADataReq{
}

message GetGuildQADataRes{
	optional ErrorCode result = 1;
	optional uint32 status = 2;
	optional uint32 time = 3;
}

message CreateRoleNewArg{
	optional RoleType type = 1;
	optional string name = 2;
}

message CreateRoleNewRes{
	optional ErrorCode result = 1;
	optional RoleAllInfo roleData = 2;
}

message MulActivitInfo{
	optional int32 id = 1;
	optional MulActivityTimeState openstate = 2;
	optional uint32 lefttime = 3;
	optional int32 dayjoincount = 4;
	optional uint32 beginmin = 5;
	optional uint32 endmin = 6;
	optional ActOpenState real_open_state = 7;
	optional bool is_playing = 8;
}

message MulActivityArg{
	optional int32 acid = 1;
}

message MulActivityRes{
	repeated MulActivitInfo actinfo = 1;
	optional int32 myguildlevel = 2;
	optional ErrorCode errcode = 3;
}

message CreateRoleOnDBNewArg{
	optional uint32 rpcID = 1;
	optional RoleAllInfo roleData = 2;
}

message QARoomData{
	optional uint64 guild_id = 1;
	optional uint32 status = 2;
	optional uint32 room_id = 3;
}

message CreateRoleOnDBNewRes{
	optional ErrorCode result = 1;
	optional uint32 nickid = 2;
}

message SelectRoleNewArg{
	optional int32 index = 1;
}

message SelectRoleNewRes{
	optional ErrorCode result = 1;
	optional int32 banTime = 2;
	optional int32 endTime = 3;
	optional string reason = 4;
}

message EnterSceneArg{
	optional uint32 mapID = 1;
	repeated RoleAllInfo roleDataList = 2;
	repeated uint64 roleSessionList = 3;
	optional EnterSceneType type = 4;
	optional uint32 rpcid = 5;
	optional bool isgm = 6;
	optional uint32 destSceneID = 7;
	optional uint32 newSceneUniqueID = 8;
	optional SceneSwitchData switchData = 9;
	repeated FriendList friendlist = 10;
	repeated ClientInfo cliInfoList = 11;
	repeated uint32 rolenum = 12;
	repeated bool account_backflow = 13;
}

message FashionRecord{
	repeated FashionData bodyfashion = 1;
	repeated FashionData bagfashion = 2;
	repeated uint32 collected = 3;
	repeated uint32 display_fashion = 4;
	repeated ActivateFashionCharm own_fashins = 5;
	repeated uint32 own_display_items = 6;
	optional bool conversion = 7;
	optional uint32 hair_color_id = 8;
	repeated ActivateHairColor hair_color_info = 9;
	repeated ItemBrief fashionsynthersis_fail_info = 10;
	optional uint32 fashioncompose_time = 11;
	optional uint32 fashionibshop_buy_time = 12;
	optional uint32 special_effects_id = 13;
	repeated uint32 special_effects_list = 14;
	optional uint32 compose_success_num = 15;
	optional uint32 compose_failed_num = 16;
	repeated MapIntItem quality_num_list = 17;
}

message InvUnfState{
	optional int32 inviteID = 1;
	optional bool isdeleted = 2;
}

message EnterSceneRes{
	optional ErrorCode result = 1;
	optional uint32 mapid = 2;
	optional uint32 sceneid = 3;
}

message SelectRoleNtfData{
	optional RoleAllInfo roleData = 1;
	optional uint32 serverid = 2;
	optional bool backflow_firstenter = 3;
}

message ReadRoleDataArg{
	optional uint64 roleid = 1;
	optional RoleDataReadType readType = 2;
	optional uint32 param = 3;
	optional uint32 rpcid = 4;
	optional int32 index = 5;
}

message GetWatchInfoByIDArg{
	optional int32 type = 1;
}

message GetWatchInfoByIDRes{
	optional ErrorCode error = 1;
	optional int32 curTime = 2;
	repeated OneLiveRecordInfo liveRecords = 3;
}

message OneLiveRecordInfo{
	optional uint32 liveID = 1;
	optional int32 DNExpID = 2;
	optional int32 watchNum = 3;
	optional int32 commendNum = 4;
	optional bool hasFriend = 5;
	optional int32 beginTime = 6;
	optional int32 tianTiLevel = 7;
	optional int32 guildBattleLevel = 8;
	repeated LiveNameInfo nameInfos = 9;
	optional LiveType liveType = 10;
	optional bool hasGuild = 11;
	optional bool canEnter = 12;
	optional uint32 sceneID = 13;
	optional uint32 curWatchNum = 14;
	optional uint32 mapID = 15;
	optional bool isCross = 16;
}

message LiveNameInfo{
	optional uint64 guildID = 1;
	optional string guildName = 2;
	optional int32 guildIcon = 3;
	optional RoleBriefInfo roleInfo = 4;
	optional string teamLeaderName = 5;
	optional bool isLeft = 6;
	optional string teamName = 7;
	optional uint64 leagueID = 8;
}

message ReadRoleDataRes{
	optional ErrorCode result = 1;
	optional RoleAllInfo roleData = 2;
}

message LeaveSceneArg{
	repeated uint64 rolelist = 1;
	optional LeaveSceneType type = 2;
	optional uint32 rpcid = 3;
	optional string account = 4;
	optional uint32 destLine = 5;
	optional LogoutType logoutType = 6;
	optional uint32 line = 7;
}

message GetMyWatchRecordArg{
}

message GetMyWatchRecordRes{
	optional ErrorCode error = 1;
	optional int32 myCommendedNum = 2;
	optional int32 myWatchedNum = 3;
	optional OneLiveRecordInfo myMostWatchedRecord = 4;
	optional OneLiveRecordInfo myMostCommendedRecord = 5;
	repeated OneLiveRecordInfo myRecentRecords = 6;
	optional bool visibleSetting = 7;
}

message EnterWatchBattleArg{
	optional uint32 liveID = 1;
	optional LiveType type = 2;
}

message EnterWatchBattleRes{
	optional ErrorCode error = 1;
	optional OneLiveRecordInfo liveInfo = 2;
}

message ChangeWatchRoleArg{
	optional uint64 roleID = 1;
}

message LeaveSceneRes{
	optional ErrorCode result = 1;
	repeated RoleAllInfo dataList = 2;
}

message ChangeWatchRoleRes{
	optional ErrorCode error = 1;
}

message CommendWatchBattleArg{
}

message CommendWatchBattleRes{
	optional ErrorCode error = 1;
}

message ChangeGsLineData{
	optional uint64 sessionID = 1;
	optional uint32 line = 2;
	optional bool is_cross_gs = 3;
	optional bool keepalive = 4;
}

message SaveRoleDataArg{
	optional uint64 roleid = 1;
	optional string account = 2;
	optional int32 slot = 3;
	repeated string fieldName = 4;
	repeated string fieldData = 5;
	optional string briefData = 6;
	optional uint32 param = 7;
	optional ChangeProSaveData changepro = 8;
}

message SaveRoleDataRes{
	optional ErrorCode result = 1;
}

message guildBossDamage{
	optional uint64 roleid = 1;
	optional uint64 damage = 2;
}

message AskGuildBossInfoArg{
}

message AskGuildBossInfoRes{
	optional ErrorCode errorcode = 1;
	optional uint32 bossId = 2;
	optional uint32 needKillBossId = 3;
	optional bool isFirstKill = 4;
	optional bool isLeader = 5;
	optional uint32 needguildlvl = 6;
}

message BossRushData{
	optional int32 confid = 1;
	optional int32 buffid1 = 2;
	optional int32 buffid2 = 3;
	optional int32 currank = 4;
	optional int32 maxrank = 5;
	optional int32 currefreshcount = 6;
	optional int32 maxrefreshcount = 7;
	optional int32 joincounttoday = 8;
	optional int32 joincountmax = 9;
}

message BossRushArg{
	optional BossRushReqStatus type = 1;
}

message BossRushRes{
	optional ErrorCode ret = 1;
	optional BossRushData data = 2;
	optional UnitAppearance bossApp = 3;
	optional int32 leftcount = 4;
}

message QAEnterRoomNtf{
	optional uint64 roleID = 1;
	optional string name = 2;
	optional uint32 profession = 3;
	optional uint32 vip = 4;
	optional uint32 time = 5;
	optional uint32 coverDesignationID = 6;
}

message KickAccountData{
	optional KickType reason = 1;
}

message DoEnterSceneArg{
	optional uint32 sceneid = 1;
}

message ReturnToSelectRoleArg{
}

message ReturnToSelectRoleRes{
	optional LoadAccountData accountData = 1;
}

message DoEnterSceneRes{
	optional uint32 fightgroup = 1;
	optional float face = 2;
	optional Vec3 pos = 3;
	repeated UnitAppearance otherunits = 4;
	optional bool iswatchend = 5;
	optional ErrorCode errorcode = 6;
	optional OutLookState state = 7;
	optional bool is_cross = 8;
	optional string battlestamp = 9;
	optional uint32 specialstate = 10;
	optional SSceneState scenestate = 11;
	optional LoginReconnectEnterSceneData lrdata = 12;
	optional float initface = 13;
}

message WatchBattleData{
	optional int32 watchNum = 1;
	optional int32 commendNum = 2;
}

message ChangeSceneVerifyArg{
	optional uint32 mapid = 1;
	repeated uint64 rolelist = 2;
	optional uint32 line = 3;
	optional uint64 destSceneID = 4;
	optional SceneSwitchData data = 5;
	optional bool isDestCross = 6;
	optional uint32 destLine = 7;
}

message LiveRecord{
	optional OneLiveRecordInfo mostViewedRecord = 1;
	optional OneLiveRecordInfo mostCommendedRecord = 2;
	repeated OneLiveRecordInfo recentRecords = 3;
	optional uint32 myTotalCommendedNum = 4;
	optional uint32 myTotalViewedNum = 5;
	optional bool livevisible = 6;
}

message TakeOffAllJadeArg{
	optional uint64 uid = 1;
}

message TakeOffAllJadeRes{
	optional ErrorCode errorcode = 1;
}

message GuildArenaData{
	optional uint64 guildId = 1;
	optional string guildName = 2;
	optional uint32 guildIcon = 3;
}

message NoticeGuildBossEnd{
	optional bool isWin = 1;
}

message GuildArenaGroupData{
	optional uint32 battleId = 1;
	optional uint64 guildOneId = 2;
	optional uint64 guildTwoId = 3;
	optional uint64 winerId = 4;
	optional uint32 warstate = 5;
	optional uint32 watchId = 6;
	optional uint32 state = 7;
}

message ChangeSceneVerifyRes{
	optional ErrorCode result = 1;
	optional uint32 destLine = 2;
}

message AskGuildArenaInfoArg{
}

message AskGuildArenaInfoReq{
	repeated guildArenaWarData warData = 1;
	repeated GuildInfo allguildInfo = 2;
	optional GuildArenaState timeState = 3;
	optional ErrorCode errorcode = 4;
}

message AdjustGuildArenaRolePosArg{
	optional uint32 pos = 1;
	optional uint64 roleId = 2;
}

message AdjustGuildArenaRolePosRes{
	optional ErrorCode errorCode = 1;
	repeated GuildDarenaUnit fightunits = 2;
}

message UpdateGuildArenaState{
	optional uint32 warType = 1;
	optional uint32 battleId = 2;
	optional uint32 state = 3;
}

message guildArenaWarData{
	optional uint32 warType = 1;
	repeated GuildArenaGroupData guildArenaGroupData = 2;
}

message SweepTowerArg{
	optional int32 hardLevel = 1;
	optional ItemBrief cost = 2;
}

message SweepTowerRes{
	optional ErrorCode error = 1;
	optional int32 leftTime = 2;
}

message ResetTowerArg{
	optional int32 hardLevel = 1;
}

message ResetTowerRes{
	optional ErrorCode error = 1;
}

message GmfJoinBattleArg{
	optional uint32 leftTime = 1;
}

message GmfJoinBattleRes{
	optional bool join = 1;
}

message GmfOneBattleEnd{
	optional GMFFailReason reason = 1;
	optional GmfRoleBrief winrole = 2;
	optional GmfRoleBrief loselrole = 3;
	optional GmfGuildBrief winguild = 4;
	optional GmfGuildBrief loseguild = 5;
}

message GmfRole{
	optional uint64 roleID = 1;
	optional string rolename = 2;
	optional uint32 pkpoint = 3;
	optional int32 index = 4;
	optional GuildMatchFightState state = 5;
	optional int32 guildpos = 6;
	optional int32 profession = 7;
}

message GmfRoleDatas{
	optional GmfHalfRoles halfrole11 = 1;
	optional GmfHalfRoles halfrole22 = 2;
}

message WorldChannelLeftTimesNtf{
	optional uint32 leftTimes = 1;
}

message GuildDarenaUnit{
	optional uint64 roleId = 1;
	optional uint32 state = 2;
}

message GetGoddessTrialRewardsArg{
}

message GetGoddessTrialRewardsRes{
	optional ErrorCode errorcode = 1;
	optional uint32 leftGoddessReward = 2;
}

message GuildBossTimeOut{
}

message UpdateRoleSummaryData{
	repeated RoleSummaryStored datas = 1;
	repeated uint32 masks = 2;
	repeated uint32 timestamp = 3;
}

message D2GDesignationNtf{
	optional uint64 roleID = 1;
	repeated MapKeyValue dataList = 2;
}

message AskGuildArenaTeamInfoArg{
}

message AskGuildArenaTeamInfoRes{
	repeated GuildDarenaUnit fightUnit = 1;
	repeated GuildMemberData guildMember = 2;
	optional ErrorCode errorcode = 3;
}

message SynGuildArenaBattleInfo{
	optional uint32 warType = 1;
	repeated GuildArenaGroupData arenaBattleInfo = 2;
	optional GuildArenaState timestate = 3;
	optional uint32 state = 4;
}

message SynGuildArenaFightUnit{
	optional uint32 pos = 1;
	optional uint32 state = 2;
}

message GuildArenaSimpleDeployArg{
}

message GuildArenaSimpleDeployRes{
	repeated GuildDarenaUnit fightunit = 1;
	optional ErrorCode errorcode = 2;
}

message StageWatchInfo{
	optional uint32 wathccount = 1;
	optional uint32 likecount = 2;
}

message MulActivityCha{
	optional int32 opencount = 1;
	repeated MulActivitInfo changeInfo = 2;
}

message MailOperationData{
	optional uint64 roleID = 1;
	optional SMail mailData = 2;
	optional MailOpType op = 3;
	optional bool bytemplate = 4;
	optional uint64 templateID = 5;
}

message GmfAllFightEnd{
	optional GmfGuildBrief winguild = 1;
	optional GmfGuildBrief loseguild = 2;
	optional GMF_FINAL_WIN_TYPE wintype = 3;
}

message WorldBossStateNtf{
	optional WorldBossState state = 1;
	optional uint32 time = 2;
	optional bool iswin = 3;
}

message BattleStatisticsData{
	optional uint64 roleid = 1;
	optional string name = 2;
	optional uint32 type = 3;
	optional uint32 profession = 4;
	optional double damageall = 5;
	optional uint32 deadcount = 6;
	optional uint32 killcount = 7;
	optional uint32 killcontinue = 8;
	optional uint32 treatcount = 9;
	optional uint32 combomax = 10;
	optional uint32 assitnum = 11;
}

message BattleWatcherNtf{
	repeated BattleStatisticsData data = 1;
	optional StageWatchInfo watchinfo = 2;
	optional uint64 mvp = 3;
	optional uint64 winuid = 4;
	repeated BattleStarData star = 5;
	optional uint32 scenetype = 6;
}

message NoticeGuildArenaBegin{
	optional bool isstart = 1;
}

message StageGuildInfo{
	optional uint32 guildexp = 1;
	optional uint32 guildcon = 2;
	optional uint32 dragon = 3;
}

message AddAttrCount{
	optional uint32 count = 1;
}

message GuildSkillAllData{
	repeated GuildSkillData skillLevel = 1;
	optional int32 lastGuildExp = 2;
}

message SceneSwitchData{
	optional uint64 sceneOwner = 1;
	repeated uint64 watchers = 2;
	repeated RoleSceneSwitchExtra roleextralist = 3;
	optional SceneSwitchTeamData teamdata = 4;
	repeated uint64 guildladderid = 5;
	optional PvpBattleInfo pvpdata = 6;
	optional HorseSwitchData horsedata = 7;
	optional PkBattleInfo pkinfo = 8;
	repeated RoleCrossData crossdata = 9;
	repeated uint64 deadRoles = 10;
	optional int32 alreadyCostTime = 11;
}

message NotifyEnemyEnterFight{
	optional bool enterfight = 1;
	optional uint64 enemyid = 2;
}

message RoleSceneSwitchExtra{
	optional uint64 roleid = 1;
	repeated ItemBrief TowerReward = 2;
	optional int32 robotlookupid = 3;
	optional int32 towerStartFloor = 4;
	optional uint32 abyssid = 5;
}

message SceneSwitchTeamData{
	optional int32 teamID = 1;
	optional uint32 curSceneIndex_nouse = 2;
	repeated uint32 sceneIDs_nouse = 3;
	optional int32 towerReachFloor = 4;
	optional int32 towerUseTime = 5;
	repeated RoleSummaryStored robotsummarystored = 6;
	repeated uint64 robotID = 7;
	repeated RoleBuff rolebufflist = 8;
	optional TeamSynAll teamsyndata = 9;
	optional uint32 airsceneid = 10;
	optional TeamCrossChangeSceneExtra csextra = 11;
}

message CreateBattleParam{
	optional uint64 guildid = 1;
	optional GmfScenePara gmfpara = 2;
	repeated GuildArenaData guildInfo = 3;
	optional string guildname = 4;
	optional WorldBossBornInfo worldboss = 5;
	optional SceneOwnerInfo owner = 6;
	optional SkyCitySceneInfo skycity = 7;
	optional SceneGardenInfo gardeninfo = 8;
	optional ResWarSceneInfo reswar = 9;
	optional PvpBattleInfo pvpinfo = 10;
	optional InvFightBattleInfo invfightinfo = 11;
	optional HeroBattleInfo herobattle = 12;
	optional GCFCreateBattleInfo guildcastle = 13;
	optional PkBattleInfo pkinfo = 14;
	optional LeagueBattleInfo lbinfo = 15;
	optional guildbossinfo guildbossinfo = 16;
	optional SkyCraftInfo scinfo = 17;
	optional CustomBattleParam custombattle = 18;
	optional KMatchFightData kmatchfightdata = 19;
	optional MobaBattleInfo mobabattle = 20;
	optional BMReadySceneInfo bmreadyinfo = 21;
	optional BMFightSceneInfo bmfight = 22;
	optional SceneSwitchTeamData teamdata = 23;
	optional WeddingCreateInfo weddinginfo = 24;
	optional BFRoleEnter bffight = 25;
}

message CreateBattleSceneArg{
	optional uint64 uid = 1;
	optional uint32 destLine = 2;
	optional uint32 mapID = 3;
	optional CreateBattleParam param = 4;
	optional uint32 createtype = 5;
}

message ChatCanSendReq{
	optional ChatInfo chatinfo = 1;
	optional uint32 rpcid = 2;
}

message CreateBattleSceneRes{
	optional ErrorCode result = 1;
	optional uint32 sceneInstanceID = 2;
	optional uint32 sceneLine = 3;
}

message CreateBattleArg{
	optional uint32 rpcid = 1;
	optional uint32 mapID = 2;
	optional uint32 sceneID = 3;
	optional CreateBattleParam param = 4;
	optional uint32 line = 5;
	optional uint64 uid = 6;
}

message CreateBattleRes{
	optional ErrorCode result = 1;
	optional SceneGardenInfo gardeninfo = 2;
}

message SceneDestroyedData{
	optional uint32 sceneID = 1;
}

message ChatCanSendRes{
	optional ErrorCode result = 1;
	optional uint32 cooldown = 2;
}

message NoticeForwardNtf{
	optional NoticeType type = 1;
	optional uint64 uid = 2;
	optional ChatInfo chatinfo = 3;
	optional uint64 roleid = 4;
}

message SyncLiveInfoToMsData{
	optional OneLiveRecordInfo updateList = 1;
	optional uint32 deleteList = 2;
	optional uint32 sceneID = 3;
	optional bool sort = 4;
}

message GetWatchInfoByTypeArg{
	optional int32 liveType = 1;
	optional uint32 rpcid = 2;
}

message GetWatchInfoByTypeRes{
	optional ErrorCode error = 1;
	repeated OneLiveRecordInfo liveRecords = 2;
	optional int32 curTime = 3;
}

message EnterWatchBattleMsArg{
	optional int32 liveType = 1;
	optional uint32 liveID = 2;
	optional uint32 rpcid = 3;
}

message EnterWatchBattleMsRes{
	optional ErrorCode error = 1;
	optional uint32 sceneID = 2;
	optional uint32 sceneTemplateID = 3;
	optional bool isToCross = 4;
	optional uint32 crossGsLineID = 5;
}

message SynGuildArenaRoleOnline{
	optional uint64 roleid = 1;
	optional bool online = 2;
}

message BuffList{
	optional uint64 roleid = 1;
	repeated Buff buffs = 2;
	optional uint64 casterid = 3;
}

message RolesFinishScene{
	repeated uint64 role = 1;
	optional string scenename = 2;
}

message SceneEndData{
	optional uint32 sceneid = 1;
	optional string scenename = 2;
	repeated uint64 roles = 3;
	optional uint32 scenetype = 4;
	optional bool iswin = 5;
}

message LoadOffLineChatNtf{
	optional uint64 roleID = 1;
}

message QMHRPkArg{
	optional uint32 sceneuniid = 1;
	optional PkRankData rankdata = 2;
	optional PkNVNType type = 3;
}

message QMHRPkRes{
	optional uint32 allrank = 1;
	optional uint64 roleid = 2;
	optional uint32 lastrank = 3;
	optional uint32 currank = 4;
}

message FriendQueryReportNew{
	optional FriendOpType op = 1;
}

message MsLevelSealInfo{
	optional uint32 type = 1;
	optional uint32 level = 2;
	optional uint32 startTime = 3;
	optional uint32 endTime = 4;
	repeated uint32 BossID = 5;
	optional uint32 totalBossCount = 6;
	optional uint32 bossBuff = 7;
	optional bool IsGmNotify = 8;
	optional uint32 totalCollectCount = 9;
	optional uint32 updateTime = 10;
	optional LevelSealUnlockInfo unlockinfo = 11;
}

message IncBossCountArg{
	optional uint32 type = 1;
	optional uint32 count = 2;
	optional uint32 collectCount = 3;
}

message IncBossCountRes{
	optional ErrorCode result = 1;
}

message guildarenadisplace{
	repeated GuildDarenaUnit units = 1;
}

message GmfRoleState{
	optional uint64 roleid = 1;
	optional GuildMatchFightState state = 2;
	optional string rolename = 3;
	optional float powerpoint = 4;
}

message GmfRoom{
	optional uint64 uid = 1;
	optional uint32 wartype = 2;
	optional int32 battleid = 3;
	optional uint64 guildid11 = 4;
	optional uint64 guildid22 = 5;
	optional uint32 createtime = 6;
	optional uint32 perstigerank11 = 7;
	optional uint32 perstigerank22 = 8;
}

message guildbossindex{
	optional uint64 guildid = 1;
	optional uint32 bossindex = 2;
	optional uint32 curid = 3;
}

message sceneid{
	repeated uint32 sceenid = 1;
}

message ReportWatcherNtf{
	optional ChatInfo chatinfo = 1;
	repeated uint64 roleIDList = 2;
}

message RoleBuff{
	optional uint64 roleid = 1;
	optional Buff buff = 2;
}

message NotifyTransferWall{
	optional bool transfer = 1;
	optional int32 wallid = 2;
}

message UpdateFriendOnDB{
	optional uint64 roleid = 1;
	optional string name = 2;
	optional Friend2Db info = 3;
}

message FriendList{
	repeated uint64 friends = 1;
}

message UpdateFriendOnGS{
	optional bool isadd = 1;
	optional uint64 roleid = 2;
	repeated uint64 friendid = 3;
}

message AddMailGS{
	repeated uint64 roleids = 1;
	optional SMail mail = 2;
}

message GuildBossResultData{
	optional uint64 guildId = 1;
	optional uint32 bossIndex = 2;
	optional uint32 endtime = 3;
	optional string bossname = 4;
	optional double damage = 5;
}

message NoticeGuildBossDoEndArg{
}

message NoticeGuildBossDoEndRes{
	repeated GuildBossResultData resultData = 1;
}

message GmfUpdateData{
	optional GmfRoom roomdata = 1;
	optional GmfAddLive addlive = 2;
	optional GmfFightResult result = 3;
	optional GmfEnterStop enterstop = 4;
}

message GmfWaitOtherArg{
	optional uint32 lefttime = 1;
}

message GmfWaitFightArg{
	optional uint32 lefttime = 1;
}

message IconWatchListNum{
	optional uint32 num = 1;
}

message OnlineNumNtf{
	optional uint32 timekey = 1;
	optional uint32 serverid = 2;
	optional uint32 zoneid = 3;
	optional uint32 iosnum = 4;
	optional uint32 androidnum = 5;
	optional GameAppType appid = 6;
}

message KillGoblinTotalInfo{
	repeated uint64 members = 1;
	optional int32 killNum = 2;
	optional int32 killEliteNum = 3;
	optional uint64 guildID = 4;
	optional int32 goblinLevel = 5;
	repeated guildreward guildreward = 6;
}

message FirstEnterSceneNtf{
	optional uint64 roleid = 1;
}

message QueryPowerPointArg{
}

message QueryPowerPointRes{
	repeated uint32 bqID = 1;
	repeated double ppt = 2;
	optional ErrorCode errorcode = 3;
}

message RegisterMs2LoginArg{
	optional uint32 zoneid = 1;
	optional uint32 serverid = 2;
	repeated uint32 serverids = 3;
}

message RegisterMs2LoginRes{
	optional ErrorCode result = 1;
	optional uint32 loginsvrid = 2;
}

message gmguildbosstime{
	optional uint32 starttime = 1;
	optional uint32 endtime = 2;
}

message GuildExpData{
	optional uint64 guildid = 1;
	optional uint32 guildexp = 2;
	optional uint32 guildprestige = 3;
	optional uint32 mine = 4;
}

message GuildConData{
	optional uint64 roleid = 1;
	optional uint32 guildcon = 2;
}

message GuildExpAndConData{
	repeated GuildExpData guildexps = 1;
	repeated GuildConData guildcons = 2;
	optional string scenename = 3;
	optional ResWarBase reswar = 4;
	optional WeekNestSceneInfo weeknestinfo = 5;
	optional BioHellSceneInfo biohellinfo = 6;
	optional CompeteDragonSceneInfo competedragoninfo = 7;
}

message guildid{
	optional uint64 id = 1;
	optional uint64 dpsid = 2;
	optional string dps = 3;
	optional uint32 bossindex = 4;
	optional bool isfirstkill = 5;
	repeated guildBossDamage roledamages = 6;
}

message WorldBossSyncGS{
	optional uint32 state = 1;
	optional WorldBossSceneDamage scenedamage = 2;
}

message WorldBossSyncMS{
	optional WorldBossSyncTime timenode = 1;
	optional bool isbossdead = 2;
	optional WorldBossRoleDamage damage = 3;
	optional uint32 sceneid = 4;
}

message WorldBossSyncTime{
	optional uint32 beginhour = 1;
	optional uint32 beginmin = 2;
	optional uint32 endhour = 3;
	optional uint32 endmin = 4;
}

message WorldBossBornInfo{
	optional uint32 enemyid = 1;
	optional float attackpercent = 2;
	optional float maxhp = 3;
	optional float currenthp = 4;
}

message WorldBossAttrNtf{
	optional uint32 count = 1;
}

message GetWorldBossTimeLeftArg{
}

message GetWorldBossTimeLeftRes{
	optional uint32 timeleft = 1;
	optional uint32 guildrolecount = 2;
}

message JoinRoom{
}

message JoinRoomReply{
	optional string url1 = 1;
	optional string url2 = 2;
	optional string url3 = 3;
	optional int64 roomID = 4;
	optional int64 roomKey = 5;
	optional int32 memberID = 6;
}

message QuitRoom{
	optional int64 roomID = 1;
	optional int32 memberID = 2;
}

message VoipRoomMember{
	optional int32 memberID = 1;
	optional uint64 roleID = 2;
	optional string name = 3;
	optional uint32 state = 4;
}

message UpdateVoipRoomMemberNtf{
	repeated VoipRoomMember dataList = 1;
}

message PayBaseInfo{
	optional string paramID = 1;
	optional bool isPay = 2;
}

message PayCard{
	optional uint32 type = 1;
	optional uint32 remainedCount = 2;
	optional bool isGet = 3;
}

message GetPayAllInfoArg{
}

message GetPayAllInfoRes{
	optional ErrorCode errcode = 1;
	optional PayAllInfo info = 2;
}

message PayCardAwardArg{
	optional int32 type = 1;
}

message PayCardAwardRes{
	optional ErrorCode errcode = 1;
	optional PayCard info = 2;
}

message PayAllInfo{
	repeated PayBaseInfo pay = 1;
	repeated PayCard card = 2;
	optional PayAileen aileen = 3;
	optional uint32 vipLevel = 4;
	optional uint32 totalPay = 5;
	optional bool payCardFirstClick = 6;
	optional bool payAileenFirstClick = 7;
	optional bool payFirstAward = 8;
	optional bool payFirstAwardClick = 9;
	optional bool buyGrowthFund = 10;
	repeated int32 growthFundLevelInfo = 11;
	repeated int32 growthFundLoginInfo = 12;
	optional bool growthFundClick = 13;
	repeated int32 VipLevelGift = 14;
	optional uint32 payCardRemainTime = 15;
	optional uint32 totalLoginDays = 16;
	optional int32 payType = 17;
	repeated PayMember payMemberInfo = 18;
	optional bool isIosOpen = 19;
	optional uint32 rewardCoolTime = 20;
}

message PayAileen{
	optional uint32 remainedTime = 1;
	repeated PayAileenInfo AileenInfo = 2;
	optional uint32 weekDays = 3;
}

message PayV2Record{
	repeated PayBaseInfo pay = 1;
	repeated PayAileenRecord aileen = 2;
	optional uint32 vipPoint = 3;
	optional uint32 vipLevel = 4;
	optional uint32 totalPay = 5;
	optional uint32 payCardButtonStatus = 6;
	optional uint32 payAileenButtonStatus = 7;
	optional uint32 lastFirstPayAwardTime = 8;
	repeated PayAwardRecord growthFundLevelInfo = 9;
	repeated PayAwardRecord growthFundLoginInfo = 10;
	repeated PayAwardRecord vipLevelGiftInfo = 11;
	optional uint32 payFirstAwardButtonStatus = 12;
	optional uint32 growthFundButtonStatus = 13;
	repeated PayMemberRecord payMemberInfo = 14;
	optional PayMemberPrivilege privilege = 15;
	optional uint32 lastUpdateDay = 16;
	optional bool isEverPay = 17;
	repeated PayconsumeBrief consumelist = 18;
	optional PaytssInfo weekcard = 19;
	optional PaytssInfo monthcard = 20;
	optional PaytssInfo growthfund = 21;
	optional uint32 rewardTime = 22;
	optional uint32 growthfundnotifytime = 23;
	optional PayConsume consume = 24;
	optional PayConsumeRebate rebate = 25;
}

message PayAileenInfo{
	optional string paramID = 1;
	optional int32 itemID = 2;
	optional bool isBuy = 3;
}

message PayAileenRecord{
	optional string paramID = 1;
	optional int32 itemID = 2;
	optional uint32 lastBuyTime = 3;
	optional PaytssInfo detail = 4;
	optional uint32 lastdelivertime = 5;
}

message PayClickArg{
	optional int32 buttonType = 1;
	optional int32 memberid = 2;
}

message PayClickRes{
	optional ErrorCode errcode = 1;
	optional bool payCardFirstClick = 2;
	optional bool payAileenFirstClick = 3;
	optional bool payFirstAwardClick = 4;
	optional bool growthFundClick = 5;
	repeated PayMember info = 6;
}

message GetActivityInfoRes{
	optional ErrorCode errorcode = 1;
	optional ActivityRecord Record = 2;
}

message GetActivityInfoArg{
}

message AIDebugMsg{
	optional int32 level = 1;
	optional string msg = 2;
}

message PetSysData{
	optional uint64 fightid = 1;
	optional uint64 followid = 2;
	optional uint32 petseats = 3;
	optional uint64 lastfollowid = 4;
	repeated PetSingle pets = 5;
}

message SynPetInfoArg{
	optional uint64 uid = 1;
}

message SynPetInfoRes{
	optional uint32 mood = 1;
	optional uint32 hungry = 2;
}

message BuffInfo{
	optional uint32 BuffID = 1;
	optional uint32 BuffLevel = 2;
	optional uint32 LeftTime = 3;
	optional uint64 MobUID = 4;
	optional double MaxHP = 5;
	optional double CurHP = 6;
	optional uint32 StackCount = 7;
	optional bool bReduceCD = 8;
	optional int32 TransformID = 9;
}

message AllBuffsInfo{
	optional uint32 BuffState = 1;
	repeated int32 StateParamIndex = 2;
	repeated int32 StateParamValues = 3;
}

message BRRankState{
	optional int32 confid = 1;
	optional int32 brbid1 = 2;
	optional int32 brbid2 = 3;
	optional int32 rank = 4;
}

message PayFirstAwardArg{
}

message PayFirstAwardRes{
	optional ErrorCode errcode = 1;
}

message GrowthFundAwardArg{
	optional int32 type = 1;
	optional int32 value = 2;
}

message GrowthFundAwardRes{
	optional ErrorCode errcode = 1;
	repeated int32 growthFundLevelInfo = 2;
	repeated int32 growthFundLoginInfo = 3;
}

message MSGetFlowerRewardArg{
	optional uint32 rpcid = 1;
}

message MSGetFlowerRewardRes{
	optional ErrorCode error = 1;
	optional int32 rank = 2;
	optional int32 totalRank = 3;
}

message MSSendFlowerArg{
	optional int32 itemID = 1;
	optional int32 itemCount = 2;
	optional uint32 rpcid = 3;
	optional uint64 roleID = 4;
}

message MSSendFlowerRes{
	optional ErrorCode error = 1;
}

message NewGetFlowerRewardListArg{
}

message NewGetFlowerRewardListRes{
	optional ErrorCode errorCode = 1;
	repeated RoleBriefInfo briefList = 2;
	optional bool canGetReward = 3;
}

message GetFlowerRewardStateArg{
	optional uint32 rpcid = 1;
}

message GetFlowerRewardStateRes{
	optional ErrorCode error = 1;
	optional bool getState = 2;
}

message TeamSynMember{
	optional uint64 roleID = 1;
	optional TeamMemberType memType = 2;
	optional uint32 serverid = 3;
}

message TeamSynAll{
	repeated TeamSynMember members = 1;
	optional int32 teamID = 2;
	optional uint64 leaderID = 3;
	optional int32 expid = 4;
	optional uint64 guildID = 5;
	optional uint32 pptlimit = 6;
	optional uint32 teamcost = 7;
	optional bool haspassword = 8;
}

message TeamSynPara{
	optional SyncTeamM2C type = 1;
	optional TeamSynAll dataall = 2;
	repeated uint64 roleids = 3;
	optional int32 teamid = 4;
	optional int32 expid = 5;
	optional uint64 leaderid = 6;
	repeated TeamSynAll teamlist = 7;
}

message TeamSynRes{
	repeated TeamSynExtraData memberextradata = 1;
}

message TeamStartBattleM2GArg{
	optional SceneSwitchData ssdata = 1;
}

message TeamStartBattleM2GRes{
	optional ErrorCode errcode = 1;
}

message TeamOPM2GArg{
	optional TeamOPArg c2mArg = 1;
	optional uint32 delayid = 2;
	optional uint64 roleID = 3;
	optional TeamSynAll dataall = 4;
	optional uint64 league_teamid = 5;
}

message TeamOPM2GRes{
	optional TeamOPRes c2mRes = 1;
	optional TeamHelper teamnothelper = 2;
	optional TeamHelper teamhelper = 3;
}

message BuyVipLevelGiftArg{
	optional int32 vipLevel = 1;
}

message BuyVipLevelGiftRes{
	optional ErrorCode errcode = 1;
	repeated int32 VipLevelGift = 2;
}

message PayAwardRecord{
	optional int32 id = 1;
	optional uint32 lastGetAwardTime = 2;
}

message AddTemplateMailData{
	optional SMail mailData = 1;
}

message StartRollNtfData{
	optional EnemyDoodadInfo  info = 1;
}

message ChooseRollReqArg{
	optional int32 chooseType = 1;
	optional EnemyDoodadInfo info = 2;
}

message ChooseRollReqRes{
	optional ErrorCode error = 1;
}

message GuildActivitySave{
	optional uint32 weekactivity = 1;
	optional uint32 losetimes = 2;
	repeated roleActivity roleacts = 3;
	repeated roleActivity lastweek = 4;
}

message roleActivity{
	optional uint64 roleid = 1;
	optional uint32 activity = 2;
}

message SelfServerData{
	optional LoginGateData servers = 1;
	optional uint32 level = 2;
}

message CheckQueuingReq{
	optional bool iscancel = 1;
}

message CheckQueuingNtf{
	optional uint32 rolecount = 1;
	optional uint32 timeleft = 2;
	optional ErrorCode errorcode = 3;
}

message NoticeHungryDown{
	optional uint64 petid = 1;
	optional uint32 hungry = 2;
}

message TitleLevelUpArg{
}

message TitleLevelUpRes{
	optional ErrorCode errorcode = 1;
	optional uint32 titleID = 2;
}

message FirstPassInfoReqArg{
}

message FirstPassInfoReqRes{
	optional ErrorCode error = 1;
	repeated FirstPassStageInfo2Client stageInfos = 2;
}

message FirstPassStageInfo{
	optional int32 firstPassID = 1;
	optional bool isGetReward = 2;
	optional int32 rank = 3;
	optional bool hasCommended = 4;
	optional int32 totalRank = 5;
	repeated uint32 commendedStarLevels = 6;
}

message FirstPassRewardNtfData{
	optional bool hasFirstPassReward = 1;
	optional bool hasCommendReward = 2;
}

message GetFirstPassRewardArg{
	optional int32 firstPassID = 1;
}

message GetFirstPassRewardRes{
	optional ErrorCode error = 1;
}

message CommendFirstPassArg{
	optional int32 firstPassID = 1;
}

message CommendFirstPassRes{
	optional ErrorCode error = 1;
	optional int32 commendNum = 2;
	optional int32 starLevel = 3;
}

message MSCommendFirstPassArg{
	optional int32 fistPassID = 1;
	optional int32 rpcID = 2;
	optional bool isGetTopInfo = 3;
	optional int32 serverid = 4;
}

message MSCommendFirstPassRes{
	optional ErrorCode error = 1;
	repeated uint64 roleIDs = 2;
	optional int32 commendNum = 3;
	optional int32 passTime = 4;
	repeated UnitAppearance infos = 5;
	optional int32 starLevel = 6;
}

message FirstPassRecord{
	repeated FirstPassStageInfo infos = 1;
}

message OutLookTitle{
	optional uint32 titleID = 1;
}

message FirstPassGetTopRoleInfoArg{
	optional int32 firstPassID = 1;
}

message FirstPassGetTopRoleInfoRes{
	optional ErrorCode error = 1;
	repeated UnitAppearance infos = 2;
	optional int32 commendNum = 3;
	optional int32 time = 4;
	optional int32 starLevel = 5;
}

message GetRankInfoArg{
	optional uint32 rankType = 1;
	optional uint32 rank = 2;
	optional int32 firstPassID = 3;
	optional uint32 rpcID = 4;
	optional bool getFirstPassReward = 5;
}

message GetRankInfoRes{
	repeated RankData data = 1;
	repeated FirstPassRankInfo firstPassRankInfos = 2;
}

message UpdateSelfServer{
	optional string accountid = 1;
	optional uint32 serverid = 2;
	optional uint32 level = 3;
}

message PvpG2MArg{
	optional uint64 roleID = 1;
	optional uint32 delayID = 2;
	optional PvpArg c2gArg = 3;
}

message PvpG2MRes{
	optional PvpRes c2gRes = 1;
}

message GMCmdg2mArg{
	optional uint32 delayID = 1;
	optional uint64 roleID = 2;
	optional GMCmdArg c2gArg = 3;
}

message GMCmdg2mRes{
	optional GMCmdRes c2gRes = 1;
	optional bool handled = 2;
}

message MSRobotSumamryArg{
	optional uint64 roleID = 1;
	optional MSUseSumamryType type = 2;
	optional int32 lookupid = 3;
}

message MSRobotSumamryRes{
	optional RoleSummaryStored summaryStored = 1;
	optional bool success = 2;
	optional uint64 robotID = 3;
}

message TeamSynExtraData{
	optional uint64 roleid = 1;
	optional int32 leftcount = 2;
	optional uint64 guildid = 3;
	optional uint32 sceneid = 4;
	optional uint64 dragonguildId = 5;
	optional bool kingback = 6;
}

message TeamEvent{
	optional TeamEventG2M type = 1;
	optional uint64 roleid = 2;
}

message TeamChangeExpArg{
	optional TeamSynAll teamalldata = 1;
}

message TeamChangeExpRes{
	optional ErrorCode ret = 1;
	optional int32 expid = 2;
	optional TeamHelper teamnothelper = 3;
}

message SaveRoleSummaryData{
	repeated RoleSummaryStored data = 1;
	optional bool is_cross_rolesummary = 2;
}

message titleChangeData{
	optional uint32 titleID = 1;
}

message GMToolCommandArg{
	optional string cmd = 1;
	optional string args = 2;
	optional uint32 delayid = 3;
	optional uint32 type = 4;
}

message UpdateMSRankListArg{
	optional uint32 rankType = 1;
	optional int32 firstPassID = 2;
	optional RankData info = 3;
}

message UpdateMSRankListRes{
	optional ErrorCode error = 1;
	repeated MapIntItem rank = 2;
}

message FirstPassRankInfo{
	optional int32 firstPassID = 1;
	optional int32 myRank = 2;
	optional int32 totalRank = 3;
	optional uint32 topRankStarLevel = 4;
}

message FirstPassNewCommendRewardData{
	optional int32 firstPassID = 1;
	repeated int32 serverIDs = 2;
}

message PkReqArg{
	optional PkReqType type = 1;
	optional uint32 index = 2;
	optional PkNVNType nvntype = 3;
}

message PkReqRes{
	optional ErrorCode errorcode = 1;
	optional uint32 time = 2;
	optional QueryPkInfoRes allinfo = 3;
}

message PkReqM2GArg{
	optional uint32 delayid = 1;
	optional uint64 sessionID = 2;
	optional PkReqArg c2mArg = 3;
}

message PkReqM2GRes{
	optional PkReqRes c2mRes = 1;
	optional uint32 point = 2;
	optional bool addrobot = 3;
	optional PkRoleRec pkrec = 4;
	optional uint32 rolelevel = 5;
}

message ClearPrivateChatListArg{
	optional uint32 type = 1;
	optional uint64 roleid = 2;
}

message ClearPrivateChatListRes{
	optional ErrorCode errorcode = 1;
}

message QAIDNameList{
	repeated QAIDName idname = 1;
}

message QAIDName{
	optional uint64 uuid = 1;
	optional string name = 2;
}

message GMToolCommandRes{
	optional bool result = 1;
	optional string errMsg = 2;
}

message CreateGuildCostArg{
	optional uint32 rpcid = 1;
	optional bool iscreate = 2;
	optional uint64 roleid = 3;
}

message CreateGuildCostRes{
	optional ErrorCode errorcode = 1;
}

message AuctionReqM2GArg{
	optional uint32 delayid = 1;
	optional uint64 sessionID = 2;
	optional AuctionAllReqArg c2mArg = 3;
	optional Item itemdata = 4;
	optional uint32 perprice = 5;
	optional uint32 mysalecount = 6;
}

message AuctionReqM2GRes{
	optional AuctionAllReqRes c2mRes = 1;
	optional Item itemdata = 2;
}

message petGetSkill{
	optional uint32 petLvl = 1;
	optional uint32 skillid = 2;
}

message PrivateChatList{
	repeated ChatSource rolelist = 1;
	repeated bool hasOfflineChat = 2;
	repeated uint32 lastChatTime = 3;
}

message SynRoleInGuild{
	optional uint64 roleid = 1;
}

message FightGroupChangeNtf{
	optional uint64 uid = 1;
	optional uint32 fightgroup = 2;
}

message EnterGuildPowerArg{
	optional uint32 rpcid = 1;
	optional bool iscreate = 2;
	optional uint64 roleid = 3;
}

message EnterGuildPowerRes{
	optional uint32 roleattr = 1;
	optional ErrorCode errorcode = 2;
}

message PunishData{
	optional string account = 1;
	optional uint64 roleid = 2;
	optional uint32 punishdate = 3;
	optional uint32 punishtype = 4;
	optional int32 bantime = 5;
	optional string reason = 6;
	optional string rankdata = 7;
	optional int32 op = 8;
}

message EventNotify{
	optional string notify = 1;
}

message OutLookOp{
	optional OutLookType weapon = 1;
	optional OutLookType clothes = 2;
}

message ChangeOutLookOpArg{
	optional OutLookOp op = 1;
}

message ChangeOutLookOpRes{
	optional ErrorCode errorcode = 1;
}

message ItemFindBackInfo{
	optional ItemFindBackType id = 1;
	optional int32 subtype = 2;
	optional int32 useCount = 3;
	optional int32 towerLevel = 4;
	optional int32 dayTime = 5;
	optional int32 findBackCount = 6;
	optional int32 level = 7;
	repeated MapIntItem onceBackExp = 8;
}

message ItemFindBackInfoArg{
}

message ItemFindBackInfoRes{
	optional ErrorCode error = 1;
	repeated ItemFindBackInfo2Client backInfo = 2;
	optional int32 time = 3;
}

message ItemFindBackInfo2Client{
	optional ItemFindBackType id = 1;
	optional int32 findBackCount = 2;
	optional int32 dragonCoinCost = 3;
	repeated ItemBrief dragonCoinFindBackItems = 4;
	optional int32 goldCoinCost = 5;
	repeated ItemBrief goldCoinFindBackItems = 6;
	optional int32 dayTime = 7;
	optional int32 roleLevel = 8;
}

message ItemFindBackArg{
	optional ItemFindBackType id = 1;
	optional int32 findBackCount = 2;
	optional int32 backType = 3;
}

message ItemFindBackRes{
	optional ErrorCode error = 1;
}

message ItemFindBackData{
	optional bool isDayFirstNofity = 1;
}

message IBShopAllRecord{
	optional uint32 nLastTime = 1;
	repeated IBShopOneRecord allIBShopItems = 2;
	optional uint32 nVipLv = 3;
	optional bool bLimitHot = 4;
	repeated IBGiftOrder orders = 5;
	optional uint32 paydegree = 6;
	optional uint32 daytime = 7;
}

message SpriteInfo{
	optional uint64 uid = 1;
	optional uint32 SpriteID = 2;
	repeated uint32 AttrID = 3;
	repeated double AttrValue = 4;
	repeated double AddValue = 5;
	optional uint32 SkillID = 6;
	repeated uint32 PassiveSkillID = 7;
	optional uint32 Level = 8;
	optional uint32 EvolutionLevel = 9;
	optional uint32 Exp = 10;
	optional uint32 PowerPoint = 11;
	optional uint32 TrainExp = 12;
	repeated uint32 EvoAttrID = 13;
	repeated double EvoAttrValue = 14;
	repeated uint32 ThisLevelEvoAttrID = 15;
	repeated double ThisLevelEvoAttrValue = 16;
}

message IBShopOneRecord{
	optional uint32 nGoodsID = 1;
	optional uint32 activity = 2;
	optional uint32 activitytime = 3;
	optional uint32 nItemCount = 4;
	optional uint32 nUpdateTime = 5;
}

message SpriteRecord{
	repeated SpriteInfo SpriteData = 1;
	repeated uint64 InFight = 2;
	repeated bool Books = 3;
	optional SpriteInfo NewAwake = 4;
	optional uint32 version = 5;
}

message SynGuildInfo{
	optional uint64 roleid = 1;
	optional uint64 guildid = 2;
}

message IBQueryItemReq{
	optional uint32 type = 1;
	optional uint32 subtype = 2;
}

message IBShopItemInfo{
	optional uint32 goodsid = 1;
	optional uint32 itemid = 2;
	optional uint32 nlimittime = 3;
	optional uint32 nlimitcount = 4;
	optional uint32 nbuycount = 5;
	optional bool gift = 6;
}

message IBBuyItemReq{
	optional uint32 goodsid = 1;
	optional uint32 count = 2;
}

message IBBuyItemRes{
	optional ErrorCode errorcode = 1;
}

message IBQueryItemRes{
	optional ErrorCode errorcode = 1;
	repeated IBShopItemInfo iteminfo = 2;
	repeated uint32 newproducts = 3;
	optional bool viptab = 4;
}

message ActivatAtlasArg{
	optional uint32 teamid = 1;
}

message ActivatAtlasRes{
	optional ErrorCode errorcode = 1;
}

message AutoBreakAtlasArg{
	repeated uint32 quilts = 1;
	optional uint32 groupId = 2;
}

message WorldBossRoleDamage{
	repeated uint64 roleid = 1;
	repeated float damage = 2;
}

message AutoBreakAtlasRes{
	optional ErrorCode errorcode = 1;
}

message breakAtlas{
	optional uint32 atlaId = 1;
	optional uint32 atlaNum = 2;
}

message breakAtlasRes{
	optional ErrorCode errorcode = 1;
}

message WorldBossSceneDamage{
	optional uint32 sceneid = 1;
	optional float damage = 2;
}

message CliAntiCheatInfo{
	optional uint32 currentHp = 1;
	optional uint32 totalDamage = 2;
	optional uint32 totalHurt = 3;
	optional uint32 totalRecovery = 4;
	repeated uint32 monsterRfsTimes = 5;
	optional string battleStamp = 6;
}

message SpriteChanged{
	repeated SpriteInfo NewSprites = 1;
	repeated SpriteInfo ChangedSprites = 2;
	repeated uint64 RemovedSprites = 3;
}

message SpriteOperationArg{
	optional SpriteType Type = 1;
	optional uint64 uid = 2;
	optional uint32 FeedItemID = 3;
	repeated uint64 uids = 4;
	repeated uint32 notToChoose = 5;
	optional uint32 resetTrainChoose = 6;
}

message SpriteOperationRes{
	optional ErrorCode ErrorCode = 1;
	optional uint32 Exp = 2;
	optional SpriteInfo AwakeSpriteBefore = 3;
	optional SpriteInfo AwakeSprite = 4;
	repeated uint64 InFight = 5;
	repeated uint32 LastTrainAttrID = 6;
	repeated uint32 LastTrainAttrValue = 7;
}

message BossRushPara{
	optional int32 rank = 1;
	optional bool win = 2;
}

message CardAttr{
	optional uint32 id = 1;
	optional uint32 num = 2;
}

message SynCardAttr{
	repeated CardAttr addAttr = 1;
	repeated CardAttr addper = 2;
	repeated CardAttr allAttr = 3;
	optional uint32 groupId = 4;
}

message AllSynCardAttr{
	repeated SynCardAttr allAttrs = 1;
}

message DEProgress{
	optional uint32 sceneID = 1;
	optional int32 bossavghppercent = 2;
	optional DEProgressState state = 3;
}

message DEProgressArg{
}

message DEProgressRes{
	repeated DEProgress allpro = 1;
	optional int32 allcount = 2;
	optional int32 leftcount = 3;
	optional ErrorCode errcode = 4;
	optional uint32 serverseallevel = 5;
}

message DERank{
	optional int32 rank = 1;
	optional uint64 roleID = 2;
	optional string rolename = 3;
	optional DEProgress progress = 4;
	repeated ItemBrief reward = 5;
}

message DERankArg{
}

message DERankRes{
	repeated DERank ranks = 1;
	optional uint32 rewardlefttime = 2;
	optional ErrorCode errcode = 3;
}

message WorldBossEndArg{
}

message WorldBossEndRes{
	repeated WorldBossDamageInfo damages = 1;
	optional WorldBossDamageInfo selfdamage = 2;
}

message WorldBossDamageInfo{
	optional string rolename = 1;
	optional float damage = 2;
	optional uint32 rank = 3;
}

message RiskGridInfo{
	optional int32 x = 1;
	optional int32 y = 2;
	optional RiskGridType gridType = 3;
	optional ItemBrief rewardItem = 4;
	optional RiskBoxState boxState = 5;
}

message RiskOneMapInfo{
	repeated RiskGridInfo grids = 1;
	optional int32 curX = 2;
	optional int32 curY = 3;
	repeated RiskBoxInfo boxInfos = 4;
	optional int32 mapid = 5;
	optional int32 moveDirection = 6;
}

message RiskBoxInfo{
	optional RiskBoxState state = 1;
	optional int32 leftTime = 2;
	optional ItemBrief item = 3;
	optional int32 beginTime = 4;
	optional int32 slot = 5;
}

message RiskMapInfos{
	repeated RiskOneMapInfo infos = 1;
	optional int32 diceNum = 2;
	optional int32 leftDiceTime = 3;
	repeated RiskBoxInfo boxInfos = 4;
}

message GetRiskMapInfosArg{
	optional int32 mapID = 1;
	optional bool isRefresh = 2;
	optional bool onlyCountInfo = 3;
}

message GetRiskMapInfosRes{
	optional ErrorCode error = 1;
	optional RiskMapInfos mapInfo = 2;
}

message PlayDiceNtfData{
	optional bool isDiceFull = 1;
	optional int32 mapID = 2;
	optional int32 slot = 3;
}

message PlayDiceRequestArg{
	optional int32 mapid = 1;
	optional int32 randValue = 2;
}

message PlayDiceRequestRes{
	optional ErrorCode error = 1;
	optional int32 getValue = 2;
	optional int32 leftDiceTime = 3;
}

message PlayDiceOverData{
}

message ChangeRiskBoxStateArg{
	optional RiskBoxState destState = 1;
	optional int32 slot = 2;
	optional int32 mapID = 3;
}

message ChangeRiskBoxStateRes{
	optional ErrorCode error = 1;
	repeated ItemBrief openBoxRewards = 2;
}

message ReEnterRiskBattleArg{
}

message ReEnterRiskBattleRes{
	optional ErrorCode error = 1;
}

message RiskInfo2DB{
	optional RiskMapInfos infos = 1;
	optional int32 updatetime = 2;
	optional int32 getDiceTime = 3;
	optional int32 getDiceNum = 4;
	optional RoleRiskInfo riskInfo = 5;
}

message DEStageProgress{
	optional uint32 sceneid = 1;
	repeated uint32 bossids = 2;
	repeated int32 bosshppercenet = 3;
}

message LevelSealExchangeArg{
}

message LevelSealExchangeRes{
	optional ErrorCode errcode = 1;
}

message SysOpenTime{
	optional int32 id = 1;
	optional int32 time = 2;
}

message DEProgressSynPara{
	optional uint64 roleid = 1;
	optional DEProgress prosyn = 2;
	optional bool isbattleend = 3;
}

message ClientReviveInfo{
	optional bool islimit = 1;
}

message ComAgate{
	optional uint32 itemId = 1;
	optional uint32 comNum = 2;
}

message BattleFailedData{
	optional uint32 timespan = 1;
	optional uint32 hppercent = 2;
	optional uint32 deathcount = 3;
}

message IBShopIcon{
	repeated uint32 viptag = 1;
	optional bool limittag = 2;
}

message RemoveIBShopIcon{
	optional uint32 nData = 1;
}

message PushInfo{
	optional uint32 type = 1;
	optional uint32 sub_type = 2;
	optional uint32 time = 3;
}

message RolePushInfo{
	repeated PushInfo infos = 1;
	repeated PushConfig configs = 2;
}

message NotifyEnhanceSuit{
	optional uint32 enhanceSuit = 1;
}

message PlayDiceOverArg{
}

message PlayDiceOverRes{
	optional ErrorCode error = 1;
	optional int32 mapID = 2;
	optional RiskBoxInfo addBoxInfo = 3;
	optional bool hasTriggerBuy = 4;
}

message StageAssistOne{
	optional uint32 stageid = 1;
	optional int32 point = 2;
}

message OutLookSprite{
	optional uint32 leaderid = 1;
}

message OpGuildReqDataArg{
	optional GuildOpType opType = 1;
	optional uint64 roleId = 2;
	optional uint32 skillId = 3;
	optional uint32 rpcId = 4;
	optional uint64 guildId = 5;
}

message OpGuildReqDataRes{
	optional uint32 guildSkillLvl = 1;
	optional GuildDareData guildDareData = 2;
	optional ErrorCode errorcode = 3;
}

message RiskBuyData{
	repeated ItemBrief rewardItems = 1;
	optional ItemBrief cost = 2;
}

message RiskBuyRequestArg{
}

message RiskBuyRequestRes{
	optional ErrorCode error = 1;
}

message SetVoipMemberState{
	optional uint32 nstate = 1;
}

message RiskRecoverDiceData{
	optional int32 diceNum = 1;
	optional int32 leftDiceTime = 2;
}

message AuctItemBrief{
	optional uint32 itemid = 1;
	optional uint32 count = 2;
}

message AuctionSaleData{
	optional uint64 uid = 1;
	optional uint32 perprice = 2;
	optional uint32 duelefttime = 3;
	optional Item itemdata = 4;
}

message AuctOverlapData{
	optional uint64 overlapid = 1;
	optional uint32 perprice = 2;
	optional Item itemdata = 3;
}

message AuctionAllReqArg{
	optional AuctionAllReqType reqtype = 1;
	optional uint32 itemid = 2;
	optional uint64 itemuniqueid = 3;
	optional uint32 itemcount = 4;
	optional uint32 perprice = 5;
	optional uint64 overlapid = 6;
	optional uint64 auctuid = 7;
	optional bool istreasure = 8;
}

message AuctionAllReqRes{
	optional ErrorCode errcode = 1;
	repeated AuctItemBrief itembrief = 2;
	repeated AuctOverlapData overlapdata = 3;
	repeated AuctionSaleData saledata = 4;
	optional uint32 autorefreshlefttime = 5;
	optional uint32 tradeprice = 6;
	optional uint32 leftfreerefreshcount = 7;
	optional uint32 itemleftcount = 8;
	optional uint32 freerefreshlefttime = 9;
	optional bool need_copyitem = 10;
}

message SmeltItemArg{
	optional uint64 uid = 1;
	optional uint32 slot = 2;
	optional bool isForge = 3;
}

message SmeltItemRes{
	optional ErrorCode errorcode = 1;
	optional uint32 result = 2;
}

message GuildDareData{
	optional uint32 dareNum = 1;
	optional uint32 guildLv = 2;
	repeated RoleGuildContribute roleContr = 3;
}

message PushConfig{
	optional uint32 type = 1;
	optional bool forbid = 2;
}

message SyncArenaGs{
	optional SyncAreanOptimalRank optimalrank = 1;
	optional uint64 roleid = 2;
}

message SyncAreanOptimalRank{
	optional uint32 rank = 1;
}

message StartArenaGsArg{
	optional uint32 delayrpcid = 1;
	optional ArenaBattleInfo info = 2;
	optional uint64 roleid = 3;
}

message StartArenaGsRes{
	optional ErrorCode errorcode = 1;
	optional uint32 cooltime = 2;
}

message ArenaBattleInfo{
	optional bool isnpc = 1;
	optional uint64 challengid = 2;
	optional uint32 enemyid = 3;
	optional string name = 4;
	optional uint32 ppt = 5;
	optional uint32 level = 6;
	optional uint32 profession = 7;
	optional uint32 recommendppt = 8;
}

message GetMaxTitle{
	optional uint64 uid = 1;
	optional uint32 titleMaxLevelNow = 2;
	optional string titleName = 3;
}

message RefreshSweepRewardArg{
}

message RefreshSweepRewardRes{
	optional ErrorCode error = 1;
	optional int32 refreshResult = 2;
}

message GetSweepTowerRewardArg{
}

message GetSweepTowerRewardRes{
	optional ErrorCode error = 1;
}

message ReqGuildDareRewardRecArg{
	optional uint64 roleId = 1;
	optional uint32 rpcId = 2;
}

message ReqGuildDareRewardRecRes{
	repeated uint32 rewardRec = 1;
}

message CheckGuildDareRewardArg{
	optional uint64 roleId = 1;
	optional uint32 rewardType = 2;
	optional uint32 rpcId = 3;
}

message CheckGuildDareRewardRes{
	optional bool result = 1;
	optional uint32 guildlLvl = 2;
}

message LearnGuildSkillAgr{
	optional uint32 skillId = 1;
}

message LearnGuildSkillRes{
	optional ErrorCode errorcode = 1;
}

message GuildSkill{
	optional uint32 skillId = 1;
	optional uint32 skillLvl = 2;
}

message DragonExpResult{
	optional bool iswin = 1;
	optional int32 bosshurthp = 2;
	optional int32 bosslefthp = 3;
	repeated ItemBrief joinreward = 4;
	repeated ItemBrief winreward = 5;
	optional uint32 sceneid = 6;
}

message EndAreanMsArg{
	optional uint64 roleid = 1;
	optional bool iswin = 2;
	optional bool isgm = 3;
	optional uint32 rank = 4;
}

message EndAreanMsRes{
	optional bool issucceed = 1;
	optional ArenaEndInfo info = 2;
}

message ArenaEndInfo{
	optional bool ismissed = 1;
	optional uint32 lastrank = 2;
	optional uint32 currentrank = 3;
	optional uint32 npccount = 4;
	optional bool isnpc = 5;
	optional uint64 challengeid = 6;
}

message GuildSimpleData{
	optional bool isDel = 1;
	optional uint64 guildId = 2;
	optional uint32 guildLvl = 3;
	optional string guildName = 4;
	optional uint32 icon = 5;
	repeated guildmemberSimple addMembers = 6;
	repeated uint64 delMembers = 7;
}

message SynGuildSimpleData{
	repeated GuildSimpleData datas = 1;
}

message ReqGuildSimpleData{
	optional uint32 gslineId = 1;
}

message BattleStarData{
	optional uint64 roleid = 1;
	optional uint32 star = 2;
}

message ReqRoleGuildSkillArg{
	optional uint64 roleId = 1;
	optional uint32 rpcId = 2;
}

message ReqRoleGuildSkillRes{
	repeated GuildSkillData roleSkills = 1;
}

message OpenSpriteEgg{
	optional uint32 itemid = 1;
}

message RoleRiskInfo{
	optional int32 mapID = 1;
	optional int32 gridType = 2;
	optional int32 sceneID = 3;
	optional bool canBuy = 4;
}

message getguildbosstimeleftArg{
}

message getguildbosstimeleftRes{
	optional uint32 timeleft = 1;
	optional uint32 addAttrCount = 2;
}

message MGuildBonusOperateReqArg{
	optional int32 rpcID = 1;
	optional int32 opType = 2;
	optional GuildRecord roleGuildRecord = 3;
	optional GetGuildBonusDetailInfoArg detailInfoArg = 4;
	optional GetGuildBonusListArg bonusListArg = 5;
	optional GetGuildBonusRewardArg getBonusRewardArg = 6;
	optional SendGuildBonusArg sendBonusArg = 7;
	optional GuildCheckInBonusInfoArg checkInBonusArg = 8;
	optional ThanksForBonusArg thankBonusArg = 9;
	optional GetGuildBonusLeftArg leftBonusArg = 10;
}

message MGuildBonusOperateReqRes{
	optional ErrorCode error = 1;
	optional GetGuildBonusDetailInfoResult detailInfo = 2;
	optional GetGuildBonusListResult bonusListRes = 3;
	optional int32 bonusType = 4;
	optional int32 realGetRewardNum = 5;
	optional bool isCheckInBonus = 6;
	optional uint32 bonusTemplateID = 7;
	optional GetGuildBonusRewardResult getBonusReward = 8;
	optional SendGuildBonusRes sendBonusRes = 9;
	optional GuildCheckInBonusInfoRes checkInBonusInfoRes = 10;
	optional ThanksForBonusRes thankBonusRes = 11;
	optional uint32 last_checkin_bonus_time = 12;
	optional GetGuildBonusLeftRes leftBonus = 13;
}

message QuerySceneTimeArg{
}

message QuerySceneTimeRes{
	optional int32 time = 1;
	optional ErrorCode errorcode = 2;
}

message IdipData{
	optional IdipMessage mess = 1;
	repeated IdipPunishData punishInfo = 2;
	optional uint32 lastSendAntiAddictionTime = 3;
	optional bool isSendAntiAddictionRemind = 4;
	optional string picUrl = 5;
	repeated PlatNotice notice = 6;
	optional bool xinyue_hint = 7;
	repeated IdipHintData hintdata = 8;
	optional uint32 AntiAddictionRemindCount = 9;
	optional int32 AdultType = 10;
	optional int32 hgFlag = 11;
	optional uint32 hgBanTime = 12;
	optional uint32 hgGameTime = 13;
	optional bool isGetHg = 14;
}

message IdipPunishData{
	optional int32 type = 1;
	optional int32 punishTime = 2;
	optional int32 banTime = 3;
	optional string reason = 4;
}

message IdipMessage{
	optional string message = 1;
}

message IdipPunishInfo{
	optional int32 type = 1;
	optional int32 endTime = 2;
	optional int32 banTime = 3;
	optional int32 leftTime = 4;
}

message IdipGuildInfo{
	optional int32 level = 1;
	optional int32 exp = 2;
	optional int32 prestige = 3;
}

message IdipClearChatInfo{
	optional uint64 roleid = 1;
}

message AuctDBItemDale{
	optional AuctDBDataOperate op = 1;
	optional uint64 auctuid = 2;
	optional uint64 roleid = 3;
	optional string roleaccount = 4;
	optional int32 state = 5;
	optional uint32 perprice = 6;
	optional uint32 reqsaletime = 7;
	optional uint32 onsaletime = 8;
	optional uint32 outsaletime = 9;
	optional bytes itemdata = 10;
}

message AuctDBTradeAccount{
	optional AuctDBDataOperate op = 1;
	optional uint64 recorduid = 2;
	optional uint32 itemid = 3;
	optional uint32 itemcount = 4;
	optional uint32 perprice = 5;
	optional uint32 attime = 6;
	optional uint64 auctuid = 7;
	optional string buyaccount = 8;
	optional string saleaccount = 9;
}

message SynGuildBossHurt{
	optional uint32 sceneid = 1;
	repeated GuildBossRoleHurt rolehurt = 2;
	optional uint64 guildid = 3;
	optional double hurt = 4;
}

message ReqGuildActivityAgr{
	optional uint64 roleId = 1;
}

message ReqGuildActivityRes{
	optional uint64 roleIDd = 1;
	optional uint64 guildActivity = 2;
}

message SynAddGuildActivityArg{
	optional uint64 roleId = 1;
	optional uint32 guildActivityNum = 2;
}

message NotifyGuildCheckinProcess{
	repeated uint64 roles = 1;
	optional uint32 process = 2;
}

message ReqGuildCheckinArg{
	optional uint64 roleId = 1;
	optional uint32 rpcid = 2;
}

message ReqGuildCheckinRes{
	optional uint32 checkin = 1;
	optional uint32 boxmask = 2;
}

message NoticeGuildCheckinArg{
	optional uint64 roleId = 1;
	optional uint32 rpcid = 2;
	optional uint32 conitemid = 3;
	optional uint32 conitemnum = 4;
	optional uint32 additemid = 5;
	optional uint32 additemnum = 6;
	optional uint32 type = 7;
}

message NoticeGuildCheckinRes{
	optional ErrorCode errorcode = 1;
}

message NotifyCheckinBoxArg{
	optional uint64 roleid = 1;
	optional uint32 rpcid = 2;
	optional uint32 index = 3;
}

message NotifyCheckinBoxRes{
	repeated ItemBrief items = 1;
	optional ErrorCode errorcode = 2;
}

message GuildCardSyncMsArg{
	optional uint32 delayrpc = 1;
	optional uint64 roleid = 2;
	optional GuildCardOp op = 3;
	optional uint32 result = 4;
	repeated uint32 cards = 5;
}

message GuildCardSyncMsRes{
	optional uint32 errorcode = 1;
	optional uint64 roleid = 2;
	optional uint32 guildlevel = 3;
	optional uint32 confallcount = 4;
	optional uint32 confcount = 5;
	optional uint32 confchangecount = 6;
	optional uint32 result = 7;
	optional uint32 allcount = 8;
	optional string bestrolename = 9;
	repeated uint32 bestcards = 10;
}

message MNewGuildBonusData{
	optional bool hasCheckInBonus = 1;
	optional uint64 roleID = 2;
	optional uint64 guildID = 3;
	optional bool hasNormalBonus = 4;
	optional bool showIconInScreen = 5;
	repeated uint64 excludeRoleID = 6;
	repeated uint32 bonusTemplateIDs = 7;
}

message GetTowerFirstPassRewardArg{
	optional int32 floor = 1;
}

message GetTowerFirstPassRewardRes{
	optional ErrorCode error = 1;
}

message TowerFirstPassRewardData{
}

message DERankChangePara{
	optional int32 oldrank = 1;
	optional int32 newrank = 2;
}

message ReqRecvFatigueArg{
	optional uint64 roleId = 1;
	optional uint32 rpcid = 2;
}

message ReqRecvFatigueRes{
	optional uint32 recvNum = 1;
}

message SynFatigueResult{
	optional uint64 roleid = 1;
	optional uint32 totalrecv = 2;
	optional uint32 addtimes = 3;
	optional uint64 isfromrole = 4;
}

message guildmemberSimple{
	optional uint64 roleId = 1;
	optional uint32 position = 2;
}

message SynGuildCheckinHint{
	optional uint64 roleid = 1;
}

message DesignationEvent{
	optional uint64 nUUID = 1;
	optional uint32 nEventID = 2;
	optional uint32 nTime = 3;
	optional uint32 nParam1 = 4;
	optional uint32 nParam2 = 5;
	optional uint32 nParam3 = 6;
	optional uint64 lParam1 = 7;
	optional uint64 lParam2 = 8;
	optional uint32 nOp = 9;
	optional string name = 10;
}

message DesignationEventRes{
	optional ErrorCode errorcode = 1;
}

message AllDesignationEvent{
	repeated DesignationEvent devent = 1;
	optional uint64 roleid = 2;
}

message DesignationEventReq{
	optional uint64 roleid = 1;
	repeated DesignationEvent event = 2;
}

message SynGuildContribute{
	optional uint64 roleId = 1;
	optional uint32 num = 2;
}

message HallIconPara{
	optional HallIconState state = 1;
	optional int32 systemid = 2;
	optional LiveIconData liveInfo = 3;
}

message TaskConditionInfo{
	optional TaskConnType type = 1;
	optional uint32 id = 2;
	optional uint32 step = 3;
	optional uint32 max_step = 4;
}

message TaskInfo{
	optional uint32 id = 1;
	optional TaskStatus status = 2;
	repeated TaskConditionInfo conds = 3;
}

message RoleTask{
	repeated TaskInfo tasks = 1;
	repeated uint32 finished = 2;
	optional uint32 lastUpdateTime = 3;
	repeated DailyTaskInfo dailytask = 4;
	optional uint32 daily_count = 5;
	optional uint32 daily_accept_level = 6;
	optional bool daily_rewarded = 7;
	optional uint32 daily_complete_num = 8;
	optional bool daily_red_point = 9;
	optional uint32 daily_askhelp_num = 10;
	optional uint32 today_donate_count = 11;
	optional uint32 total_donate_count = 12;
	optional bool dailyaccept = 13;
	optional WeeklyTaskData weekrecord = 14;
	optional uint32 score = 15;
	optional uint32 luck = 16;
}

message SkyCityTeamBaseInfo{
	optional int32 teamid = 1;
	optional uint64 uid = 2;
	optional string name = 3;
	optional uint32 lv = 4;
	optional uint32 ppt = 5;
	optional uint32 job = 6;
	optional bool online = 7;
}

message SkyCityFinalBaseInfo{
	optional uint64 uuid = 1;
	optional uint32 job = 2;
	optional uint32 killer = 3;
	optional uint32 dead = 4;
	optional uint32 intimategree = 5;
	optional bool ismvp = 6;
	optional bool isfriend = 7;
}

message SkyCityFinalInfo{
	repeated SkyCityFinalBaseInfo info = 1;
	optional uint32 floor = 2;
	repeated ItemBrief item = 3;
	optional bool ismvp = 4;
}

message SkyCityEstimateBaseInfo{
	optional uint32 teamid = 1;
	optional uint32 job = 2;
	optional string name = 3;
	optional uint32 killer = 4;
	optional uint64 damage = 5;
	optional uint32 lv = 6;
	optional uint64 roleid = 7;
}

message SkyCityEstimateInfo{
	repeated SkyCityEstimateBaseInfo info = 1;
	optional uint32 floor = 2;
	optional uint32 winteamid = 3;
	repeated SkyCityTeamScore teamscore = 4;
}

message SkyCityTimeInfo{
	optional uint32 time = 1;
	optional SkyCityTimeType type = 2;
}

message SkyCityAllTeamBaseInfo{
	repeated SkyCityTeamBaseInfo info = 1;
	optional uint32 games = 2;
	optional uint32 floor = 3;
}

message ReqGuildLadderRewardArg{
	optional uint64 roleId = 1;
	repeated ItemBrief item = 2;
}

message ReqGuildLadderRewardRes{
	repeated ItemBrief items = 1;
}

message ReqGuildLadderInfoAgr{
	optional uint64 roleId = 1;
}

message ReqGuildLadderInfoRes{
	optional uint32 lestRewardTimes = 1;
	repeated GuildLadderRoleRank roleRanks = 2;
	repeated GuildLadderRank guildRanks = 3;
	optional ErrorCode errorcode = 4;
	optional uint32 nowTime = 5;
	optional uint32 lastTime = 6;
}

message GuildLadderRoleRank{
	optional uint64 roleid = 1;
	optional string name = 2;
	optional uint32 wintimes = 3;
	optional uint64 guildid = 4;
}

message GuildLadderRank{
	optional uint64 guildid = 1;
	optional string guildname = 2;
	optional uint32 wintimes = 3;
	optional uint32 icon = 4;
}

message ReqGuildLadderRnakInfoArg{
	optional uint64 roleid = 1;
}

message ReqGuildLadderRnakInfoRes{
	repeated GuildLadderRank guildrank = 1;
	optional ErrorCode errorcode = 2;
	optional uint32 lastTime = 3;
}

message PlantInfo{
	optional uint32 farmland_id = 1;
	optional uint32 seed_id = 2;
	optional PlantGrowState plant_grow_state = 3;
	optional uint32 grow_times = 4;
	optional float growup_amount = 5;
	optional uint32 mature_duration = 6;
	optional uint32 start_time = 7;
	optional uint32 stealed_times = 8;
	optional uint32 growup_cd = 9;
	repeated GardenEventLog event_log = 10;
	optional uint32 notice_times = 11;
	optional uint64 owner = 12;
}

message GmfScenePara{
	optional GmfRoom roomdata = 1;
	optional int32 guildwartimestate = 2;
}

message SkyCityEnterArg{
	optional uint32 sceneid = 1;
}

message SkyCityEnterRes{
	optional ErrorCode error = 1;
}

message GmfReadyArg{
	optional GMFReadyType type = 1;
	optional uint64 roleid = 2;
}

message GmfReadyRes{
	optional ErrorCode errcode = 1;
	optional uint32 cooldown = 2;
}

message GardenInfo{
	optional uint64 role_id = 1;
	optional string role_name = 2;
	optional uint32 db_operatetype = 3;
	optional bytes plant = 4;
	optional bytes cooking = 5;
	optional bytes fishing = 6;
	optional bytes banquet = 7;
	optional bytes eventlog = 8;
}

message ChatInfoList{
	repeated ChatInfo chatinfolist = 1;
}

message PrivateChatListToDB{
	optional uint64 roleid = 1;
	optional string privatechatlist = 2;
}

message GuildCardRankReq{
	optional uint32 type = 1;
}

message GuildCardRankNtf{
	optional uint32 type = 1;
	repeated string name = 2;
	repeated int32 point = 3;
}

message ChatParamSpectate{
	optional uint32 liveid = 1;
	optional uint32 livetype = 2;
}

message NotifyScenePkWin{
	optional uint64 roleid = 1;
}

message NoticeGuildLadderStart{
	optional bool isstart = 1;
}

message GmfKickRes{
	optional uint32 cooldowntime = 1;
	optional int32 leaderkick = 2;
	optional string kickname = 3;
}

message GuildCardMatchReq{
	optional CardMatchOp op = 1;
	optional uint32 card = 2;
}

message GardenPlantInfo{
	repeated uint32 allow_plantid = 1;
	optional bool harvest = 2;
	optional bool steal = 3;
	repeated PlantInfo plant_info = 4;
	optional uint32 sprite_id = 5;
	optional uint32 sprite_appeartimes = 6;
	optional uint32 sprite_appear_cd = 7;
	optional uint32 sprite_durations = 8;
	repeated MapIntItem help_info = 9;
	optional bool extra = 10;
	optional bool rich_crop = 11;
	optional uint32 steal_count = 12;
}

message GuildCardMatchNtf{
	optional ErrorCode errorcode = 1;
	optional CardMatchOp op = 2;
	optional uint32 timeleft = 3;
	optional uint32 changecount = 4;
	optional uint32 round = 5;
	optional uint32 result = 6;
	repeated uint32 cards = 7;
	optional bool iscanbegin = 8;
	optional bool isbegin = 9;
	optional CardMatchState state = 10;
	optional uint32 store = 11;
	optional bool sign_up = 12;
	optional uint32 match_type = 13;
	repeated ItemBrief items = 14;
	optional uint32 sign_up_num = 15;
}

message SceneOwnerInfo{
	optional uint64 uid = 1;
}

message GmfAddLive{
	optional uint32 liveid = 1;
}

message InspireArg{
}

message InspireRes{
	optional ErrorCode ErrorCode = 1;
	optional uint32 count = 2;
	optional uint32 cooldowntime = 3;
}

message CookingInfo{
	optional uint32 cooking_level = 1;
	optional uint32 cuisine_id = 2;
	optional uint32 cooking_total_times = 3;
	optional uint32 cooking_treasure_total_times = 4;
	repeated MapIntItem cooking_food = 5;
	repeated uint32 cook_book_id = 6;
	optional uint32 cooking_exp = 7;
}

message SkyCitySceneInfo{
	optional uint32 nFloor = 1;
	repeated SkyCityTeamBaseInfo self = 2;
	repeated SkyCityTeamBaseInfo target = 3;
	optional uint32 nGames = 4;
	optional uint32 nGroupID = 5;
	optional bool bWaitRoom = 6;
	repeated SCRoleStatistics rolsStatistics = 7;
	optional uint32 endtime = 8;
}

message StartPlantArg{
	optional uint32 farmland_id = 1;
	optional uint32 seed_id = 2;
	optional GardenQuestType quest_type = 3;
	optional uint64 garden_id = 4;
	optional bool cancel = 5;
}

message CreateGuildQARoomRes{
	optional ErrorCode result = 1;
	optional uint32 room_id = 2;
}

message CreateGuildQARoomReq{
	optional uint32 rpc_id = 1;
}

message StartPlantRes{
	optional ErrorCode result = 1;
	optional PlantGrowState grow_state = 2;
}

message EnterQARoomReq{
	optional uint32 rpc_id = 1;
	optional uint32 type = 2;
}

message EnterQARoomRes{
	optional ErrorCode result = 1;
	optional uint32 room_id = 2;
	optional uint32 end_time = 3;
}

message CommitAnswerNtf{
	optional uint64 audiouid = 1;
	optional string answer = 2;
	optional uint32 audiotime = 3;
	optional uint32 qid = 4;
}

message FetchPlantInfoRes{
	optional ErrorCode result = 1;
	repeated PlantInfo plant_info = 2;
	optional uint32 sprite_id = 3;
	repeated uint32 farmland_id = 4;
}

message GiveAnserQARewardNtf{
	optional bool is_correct = 1;
	optional uint32 type = 2;
	repeated ItemBrief items = 3;
	optional int32 curIndex = 4;
	optional uint32 questionId = 5;
}

message FetchPlantInfoArg{
	optional uint64 garden_id = 1;
	optional uint32 farmland_id = 2;
	optional GardenQuestType quest_type = 3;
}

message GardenEventLog{
	optional uint64 role_id = 1;
	optional string role_name = 2;
	optional uint32 occur_time = 3;
	optional uint32 event_type = 4;
	optional uint32 target = 5;
	optional bool result = 6;
}

message SkyCityTeamResult{
	optional uint32 group = 1;
	optional uint32 winteamid = 2;
	repeated SCRoleStatistics roleStatistics = 3;
}

message OpenPrivateChat{
	optional uint64 roleid = 1;
}

message SkyCityGroupData{
	optional uint32 teamid = 1;
	optional uint32 killcount = 2;
	optional double totaldamage = 3;
}

message SkyCityAllInfo{
	repeated SkyCityGroupData groupdata = 1;
	optional SkyCityTimeType timetype = 2;
	optional uint32 lefttime = 3;
}

message SkyCityArg{
}

message SkyCityRes{
	optional SkyCityAllTeamBaseInfo baseinfo = 1;
	optional SkyCityAllInfo allinfo = 2;
}

message CardPointRecord{
	optional uint32 index = 1;
	optional uint64 roleid = 2;
	optional uint32 point = 3;
	optional uint32 timestamp = 4;
}

message ReqGuildRankInfoArg{
}

message ReqGuildRankInfoRes{
	optional uint32 endTime = 1;
	optional uint32 rank = 2;
	optional uint32 keepTime = 3;
	optional uint32 nowTime = 4;
}

message PlantCultivationArg{
	optional uint64 garden_id = 1;
	optional uint32 farmland_id = 2;
	optional PlantGrowState operate_type = 3;
	optional GardenQuestType quest_type = 4;
}

message GuildBindGroupInfo{
	optional string qq_group_code = 1;
	optional string qq_group_openid = 2;
	optional string qq_group_name = 3;
	optional uint32 last_update_time = 4;
}

message GuildBindGroupReq{
	optional string token = 1;
}

message PlantCultivationRes{
	optional ErrorCode result = 1;
	optional float  growup_amount = 2;
	optional uint32 notice_times = 3;
}

message GetGuildBindInfoReq{
	optional string token = 1;
}

message PlantHarvestArg{
	optional uint64 garden_id = 1;
	optional uint32 farmland_id = 2;
	optional GardenQuestType  quest_type = 3;
}

message GetGuildBindInfoRes{
	optional GuildBindStatus bind_status = 1;
	optional string group_name = 2;
	optional ErrorCode result = 3;
}

message PlantHarvestRes{
	optional ErrorCode result = 1;
	repeated ItemBrief items = 2;
	optional bool harvest = 3;
	optional bool extra = 4;
}

message GuildBindGroupRes{
	optional ErrorCode result = 1;
	optional string group_name = 2;
}

message TryFishArg{
	optional GardenQuestType quest_type = 1;
	optional uint64 garden_id = 2;
}

message TryFishRes{
	optional ErrorCode result = 1;
	repeated ItemBrief item = 2;
	optional uint32 fish_level = 3;
	optional uint32 experiences = 4;
}

message GuildJoinBindGroupReq{
	optional string token = 1;
}

message GuildJoinBindGroupRes{
	optional ErrorCode result = 1;
}

message GuildUnBindGroupReq{
	optional string token = 1;
}

message GardenFishInfo{
	optional uint32 fish_level = 1;
	optional uint32 fish_exp = 2;
	optional bool quality_four = 3;
}

message GuildUnBindGroupRes{
	optional ErrorCode result = 1;
}

message gmfjoinarg{
}

message gmfjoinres{
	optional ErrorCode errorcode = 1;
}

message ConsumeItemsArg{
	optional uint64 role_id = 1;
	optional uint32 reason = 2;
	optional uint32 subreason = 3;
	repeated ItemBrief items = 4;
	optional uint32 rpc_id = 5;
}

message GmfBatlleStatePara{
	optional GmfBattleState state = 1;
	optional uint32 lefttime = 2;
}

message GmfRoleBrief{
	optional uint64 roleid = 1;
	optional string rolename = 2;
	optional uint32 profession = 3;
}

message ConsumeItemsRes{
	optional ErrorCode result = 1;
	optional ItemBrief items = 2;
}

message GmfGuildBrief{
	optional uint64 guildid = 1;
	optional string guildname = 2;
	optional uint32 guildicon = 3;
}

message FriendGardenPlantLogArg{
}

message FriendGardenPlantLogRes{
	optional ErrorCode result = 1;
	repeated FriendPlantLog frinend_plant_log = 2;
}

message GmfHalfRoles{
	repeated GmfRole roles = 1;
	optional GmfGuildBrief guildb = 2;
	optional uint32 inspire = 3;
}

message LiveIconData{
	optional int32 liveType = 1;
	optional int32 liveID = 2;
	optional OneLiveRecordInfo liveInfo = 3;
}

message FriendPlantLog{
	optional uint64 role_id = 1;
	optional string role_name = 2;
	optional uint32 profession_id = 3;
	optional bool exist_sprite = 4;
	optional bool mature = 5;
	optional bool abnormal_state = 6;
	optional uint32 help_times = 7;
}

message QAOverToGS{
	optional uint64 role_id = 1;
}

message BroadCastData{
	optional BroadCastType broadcastType = 1;
	optional string broadcastData = 2;
	optional uint32 dataLen = 3;
}

message BroadCastDataM2T{
	optional BroadCastData data = 1;
	repeated uint64 roleList = 2;
}

message SpActivity{
	repeated SpActivityOne spActivity = 1;
	optional uint32 lastBackFlowStartTime = 2;
	optional ArgentaPreData argentaPreData = 3;
	optional uint32 lastArgentaStartTime = 4;
	optional BackFlowPreData backflowPreData = 5;
}

message GardenCookingFoodArg{
	optional uint32 food_id = 1;
}

message SpActivityChange{
	optional uint32 actid = 1;
	optional uint32 taskid = 2;
	optional uint32 state = 3;
	optional uint32 progress = 4;
}

message GardenCookingFoodRes{
	optional ErrorCode result = 1;
	repeated ItemBrief items = 2;
	optional uint32 cooking_level = 3;
	optional uint32 cooking_experiences = 4;
}

message SpActivityOffsetDay{
	repeated uint32 actid = 1;
	repeated int32 offsetday = 2;
	repeated uint32 offsettime = 3;
}

message GetSpActivityRewardArg{
	optional uint32 actid = 1;
	optional uint32 taskid = 2;
}

message GetSpActivityRewardRes{
	optional ErrorCode errorcode = 1;
}

message BanquetInfo{
	optional uint32 banquet_times = 1;
	optional uint32 time = 2;
	optional uint32 joinbanquet_times = 3;
}

message GetSpActivityBigPrizeArg{
	optional uint32 actid = 1;
}

message GetSpActivityBigPrizeRes{
	optional ErrorCode errorcode = 1;
}

message SpActivityOne{
	optional uint32 actid = 1;
	repeated SpActivityTask task = 2;
	optional bool getBigPrize = 3;
	optional uint32 startTime = 4;
	optional uint32 actStage = 5;
	optional ArgentaData argenta = 6;
	optional AncientTimes ancient = 7;
	optional ThemeActivityData theme = 8;
	optional BackFlowData backflow = 9;
}

message SCRoleStatistics{
	optional uint64 roleid = 1;
	optional int32 killcount = 2;
	optional int32 deadcount = 3;
	optional double totaldamage = 4;
}

message GardenBanquetArg{
	optional uint32 banquet_id = 1;
}

message GetGuildLadderRewardTimeArg{
	optional uint64 roleid = 1;
	optional uint32 rpcid = 2;
}

message GardenBanquetRes{
	optional ErrorCode result = 1;
	optional uint32 banquet_id = 2;
	repeated uint64 guests = 3;
}

message GetGuildLadderRewardTimeRes{
	optional uint32 time = 1;
}

message GardenPlayEventArg{
	optional uint32 rpcid = 1;
	optional uint64 role_id = 2;
	optional uint32 scene_uid = 3;
	optional GardenPlayEventType event_type = 4;
	optional uint32 farmland_id = 5;
	optional uint32 seed_id = 6;
	optional uint32 sprite_id = 7;
	optional uint32 banquet_id = 8;
	repeated ItemBrief banquet_items = 9;
	optional bool isguild = 10;
}

message DPSNotify{
	optional float dps = 1;
}

message guildreward{
	optional uint32 type = 1;
	optional uint32 num = 2;
}

message RoleEventSync{
	optional uint64 roleid = 1;
	optional RoleEventType type = 2;
	repeated uint32 uintArg = 3;
}

message GardenPlayEventRes{
	optional ErrorCode result = 1;
	optional uint64 role_id = 2;
	optional uint32 banquet_id = 3;
	repeated uint64 guests = 4;
}

message SpriteState{
	optional uint32 sprite_id = 1;
	optional bool state = 2;
}

message DelRoleNtf{
	optional string account = 1;
	optional uint64 role_id = 2;
	optional uint32 slot = 3;
}

message GardenOverviewArg{
}

message GardenOverviewRes{
	optional ErrorCode result = 1;
	optional uint32 visited_times = 2;
	optional uint32 fish_level = 3;
	optional uint32 fish_experiences = 4;
	optional uint32 cooking_level = 5;
	optional uint32 cooking_experiences = 6;
	optional uint32 plant_amount = 7;
	repeated FriendPlantLog friend_log = 8;
	repeated GardenEventLog event_log = 9;
	repeated PlantInfo plant_info = 10;
	repeated MapIntItem food_id = 11;
	optional uint32 server_time = 12;
	optional uint32 plant_farmland_max = 13;
	optional uint32 sprite_id = 14;
}

message Designation2DB{
	optional uint32 coverDesignationID = 1;
	optional uint32 abilityDesignationID = 2;
	optional uint32 maxAbilityDesignationID = 3;
	repeated StcDesignationInfo designationData = 4;
}

message ReconnectGsArg{
	optional uint32 delayrpc = 1;
	optional bool isadd = 2;
	optional uint32 sceneid = 3;
	optional uint64 roleid = 4;
}

message GardenPlantChangeStageArg{
	optional uint32 scene_uid = 1;
	optional uint32 sprite_id = 2;
	optional uint64 garden_id = 3;
	optional uint32 farmland_id = 4;
	optional uint32 buff_id = 5;
	optional bool isguild = 6;
}

message ReconnectGsRes{
	optional ErrorCode errorcode = 1;
}

message NoticeGuildArenaNextTime{
	optional GuildArenaState state = 1;
}

message GetLevelSealSealGiftArg{
	optional uint32 count = 1;
}

message GardenPlantChangeStageRes{
	optional ErrorCode result = 1;
	optional uint64 garden_id = 2;
	optional uint32 farmland_id = 3;
}

message GetLevelSealSelfGiftRes{
	optional ErrorCode errcode = 1;
}

message GardenEventNtfArg{
	optional uint32 scene_uid = 1;
	optional GardenPlayEventType event_type = 2;
	optional uint32 farmland_id = 3;
	optional uint32 buff_id = 4;
	optional uint32 sprite_id = 5;
	optional bool exist = 6;
	optional uint64 garden_id = 7;
	optional uint32 banquet_id = 8;
	optional uint32 banquet_stage = 9;
	repeated MapIntItem guests = 10;
}

message LevelSealRecord{
	optional uint32 type = 1;
	optional uint32 selfCollectCount = 2;
	optional int32 selfAwardCountIndex = 3;
	optional uint32 LevelSealButtonStatus = 4;
	optional bool lastLevelSealStatus = 5;
}

message GardenPlayStageChange{
	optional uint64 role_id = 1;
	optional GardenPlayEventType event_type = 2;
	optional uint32 farmland_id = 3;
	optional PlantGrowState grow_state = 4;
	optional uint32 sprite_id = 5;
	optional bool exist = 6;
	optional uint32 banquet_id = 7;
	optional uint32 banquet_stage = 8;
	repeated MapIntItem guests = 9;
}

message TeamHelper{
	repeated uint64 roles = 1;
}

message SkillCoolPara{
}

message BanquetNtfArg{
	optional uint32 banquet_id = 1;
	optional uint64 garden_id = 2;
}

message BanquetAwardArg{
	optional uint32 Banquet_id = 1;
	optional uint64 garden_id = 2;
}

message BanquetAwardRes{
	optional ErrorCode result = 1;
	optional uint32 banquet_id = 2;
	repeated ItemBrief items = 3;
}

message ActiveCookbookArg{
	optional uint64 garden_id = 1;
	optional uint32 cook_book_id = 2;
}

message ActiveCookbookRes{
	optional ErrorCode result = 1;
	optional uint32 food_id = 2;
}

message GardenPlantEventNoticeArg{
	optional GardenPlayEventType event_type = 1;
	optional uint32 farmland_id = 2;
	optional uint32 sprite_id = 3;
	optional uint64 garden_id = 4;
	optional bool exist = 5;
	optional uint64 role_id = 6;
	optional bool fish_result = 7;
	optional bool fish_stop = 8;
}

message GardenFishInfoArg{
	optional uint64 garden_id = 1;
}

message GardenFishInfoRes{
	optional ErrorCode result = 1;
	optional uint32 fish_level = 2;
	optional uint32 experiences = 3;
}

message GardenStoreLog{
	optional uint32 visit_times = 1;
	repeated MapIntItem visit_log = 2;
	repeated GardenEventLog garden_eventlog = 3;
	optional uint32 expelsprite_times = 4;
	optional uint32 refresh_time = 5;
}

message GardenStealArg{
	optional uint64 garden_id = 1;
	optional uint32 farmland_id = 2;
	optional GardenQuestType quest_type = 3;
}

message GardenStealRes{
	optional ErrorCode result = 1;
	repeated ItemBrief items = 2;
}

message PayNotifyArg{
	optional string p = 1;
	optional string v = 2;
	optional string ext = 3;
	optional PayParamType type = 4;
	optional string paramid = 5;
	optional int32 amount = 6;
	optional PayParameterInfo data = 7;
	optional int32 count = 8;
}

message GardenExpelSpriteArg{
	optional uint64 garden_id = 1;
	optional uint32 sprite_id = 2;
	optional GardenQuestType quest_type = 3;
}

message PayNotifyRes{
	optional ErrorCode errcode = 1;
	optional string result = 2;
}

message QueryRoleCardMatchArg{
	optional uint64 roleid = 1;
	optional uint64 guildid = 2;
	optional uint32 rpcid = 3;
}

message GardenExpelSpriteRes{
	optional ErrorCode result = 1;
	repeated ItemBrief items = 2;
}

message RegisterMSToCSData{
	optional uint32 platformid = 1;
	optional uint32 serverid = 2;
	optional uint32 platformtype = 3;
	optional string servername = 4;
	optional uint32 apptype = 5;
	repeated AccountRole onlineAccounts = 6;
}

message QueryRoleCardMatchRes{
	optional ErrorCode errorcode = 1;
}

message GuildWageSave{
	optional uint32 exp = 1;
	optional uint32 rolenum = 2;
	optional uint32 prestige = 3;
	optional uint32 activity = 4;
	repeated GuildWageUnit wageunit = 5;
	optional uint32 wagelvl = 6;
	optional uint32 lastscore = 7;
	optional uint32 guildlvl = 8;
}

message GuildWageUnit{
	optional uint64 roleid = 1;
	optional uint32 position = 2;
	optional WageRewardState wagestate = 3;
}

message AskGuildWageInfoArg{
}

message AskGuildWageInfoRes{
	optional uint32 activity = 1;
	optional uint32 rolenum = 2;
	optional uint32 prestige = 3;
	optional uint32 exp = 4;
	optional uint32 lastScore = 5;
	optional WageRewardState rewardstate = 6;
	optional uint32 wagelvl = 7;
	optional uint32 guildlvl = 8;
	optional ErrorCode errorcode = 9;
	optional uint32 lastposition = 10;
	repeated string name = 11;
	repeated GuildActivityRole roles = 12;
}

message GetGuildWageRewardArg{
}

message GetGuildWageReward{
	optional ErrorCode errorcode = 1;
}

message OpenGardenFarmlandArg{
	optional uint64 garden_id = 1;
	optional uint32 farmland_id = 2;
	optional GardenQuestType quest_type = 3;
}

message OpenGardenFarmlandRes{
	optional ErrorCode result = 1;
}

message RegisterMs2RouterArg{
	optional uint32 server_id = 1;
}

message RegisterMs2RouterRes{
	optional ErrorCode result = 1;
}

message RegisterGt2RouterArg{
	optional uint32 server_id = 1;
	optional uint32 line = 2;
}

message RegisterGt2RouterRes{
	optional ErrorCode result = 1;
}

message RegisterRouter2WorldArg{
	optional uint32 line = 1;
	optional RouterListenInfo listen = 2;
}

message RegisterRouter2WorldRes{
	optional ErrorCode result = 1;
	optional bool is_master = 2;
	optional uint32 serverid = 3;
}

message RegisterGs2RouterArg{
	optional uint32 line = 1;
}

message RegisterGs2RouterRes{
	optional ErrorCode result = 1;
	optional uint32 line = 2;
	repeated ServerIdInfo servers = 3;
}

message RegisterGs2WorldArg{
	optional uint32 line = 1;
}

message RegisterGs2WorldRes{
	optional ErrorCode result = 1;
	repeated uint32 line_list = 2;
	repeated ListenAddress  address_list = 3;
	optional bool is_master = 4;
	optional uint32 serverid = 5;
}

message RegisterMs2WorldArg{
	optional uint32 server_id = 1;
}

message RegisterMs2WorldRes{
	optional ErrorCode result = 1;
	optional uint32 gs_num = 2;
	optional bool is_master = 3;
	optional uint32 serverid = 4;
}

message NewRouterInfo{
	optional uint32 line = 1;
	optional ListenAddress address = 2;
}

message SyncPlatFriend2MSData{
	repeated PlatFriend friendInfo = 1;
	optional PlatFriend selfInfo = 2;
}

message PlatFriend{
	optional string openid = 1;
	optional string nickname = 2;
	optional string bigpic = 3;
	optional string midpic = 4;
	optional string smallpic = 5;
}

message ReqPlatFriendRankListArg{
}

message ReqPlatFriendRankListRes{
	optional ErrorCode error = 1;
	repeated PlatFriendRankInfo2Client platFriends = 2;
	optional PlatFriendRankInfo2Client selfInfo = 3;
}

message PlatFriendRankInfo2Client{
	optional PlatFriend platfriendBaseInfo = 1;
	optional uint32 rank = 2;
	optional bool hasGiveGift = 3;
	optional uint32 maxAbility = 4;
	optional uint32 vipLevel = 5;
	optional uint32 level = 6;
	optional bool isOnline = 7;
	optional int32 startType = 8;
	optional int32 profession = 9;
}

message PlatUserDetailInfo{
	optional uint32 platformid = 1;
	optional uint32 serverID = 2;
	optional uint64 roleID = 3;
	optional uint32 maxAbility = 4;
	optional bool isOnline = 5;
	optional uint32 vipLevel = 6;
	optional uint32 level = 7;
	optional uint32 updatetime = 8;
	optional uint32 sendGiftTime = 9;
	optional int32 startType = 10;
	optional int32 profession = 11;
	optional string roleName = 12;
}

message M2SReqPlatUserInfoArg{
	repeated string openid = 1;
	optional uint32 rpcid = 2;
	optional string sourceOpenID = 3;
}

message M2SReqPlatUserInfoRes{
	optional ErrorCode error = 1;
	repeated PlatUserAllInfo userInfos = 2;
}

message PlatUserAllInfo{
	optional string openid = 1;
	optional PlatUserDetailInfo platUserDetailInfo = 2;
}

message M2SLoginAndoutSyncArg{
	optional PlatUserAllInfo selfInfo = 1;
}

message M2SLoginAndoutSyncRes{
	optional ErrorCode error = 1;
	optional PlatUserAllInfo maxInfo = 2;
	repeated PlatFriendGiftBriefInfo sendGiftToday = 3;
}

message M2SSendGift2PlatFriendArg{
	repeated ItemBrief item = 1;
	optional PlatUserAllInfo destUser = 2;
	optional string sourceOpenID = 3;
}

message M2SSendGift2PlatFriendRes{
	optional ErrorCode error = 1;
}

message S2MSendGift2PlatFriendArg{
	repeated ItemBrief item = 1;
	optional PlatUserAllInfo destUser = 2;
	optional string sourceOpenID = 3;
}

message S2MSendGift2PlatFriendRes{
	optional ErrorCode error = 1;
}

message SendGift2PlatFriendArg{
	optional string openid = 1;
}

message SendGift2PlatFriendRes{
	optional ErrorCode error = 1;
}

message GardenBanquetNtf{
	optional uint64 garden_id = 1;
	optional uint32 banquet_id = 2;
	optional uint32 banquet_stage = 3;
	optional uint32 timesTSWK = 4;
}

message PlatFriendGiftBriefInfo{
	optional string openid = 1;
	optional uint32 sendGiftTime = 2;
}

message PayList{
	optional string orderid = 1;
	optional string account = 2;
	optional uint64 roleid = 3;
	optional string paraid = 4;
	optional int32 amount = 5;
	optional int32 paytime = 6;
}

message SceneGardenSlot{
	optional uint32 index = 1;
	optional uint64 plantuid = 2;
	optional uint32 plantid = 3;
	optional uint32 buffid = 4;
}

message SceneGardenInfo{
	repeated SceneGardenSlot plants = 1;
}

message NoticeGuildWageReward{
}

message ResWarRank{
	optional uint64 id = 1;
	optional string name = 2;
	optional uint32 value = 3;
	optional uint32 icon = 4;
}

message GuildBuff{
	optional uint32 id = 1;
	optional uint32 time = 2;
}

message ResWarExploreArg{
	optional bool iscancel = 1;
}

message ResWarExploreRes{
	optional ErrorCode error = 1;
}

message ReportSessionInfo{
	optional uint32 cross_gsline = 1;
	optional bool is_add = 2;
	repeated CrossRoleInfo roles = 3;
	optional bool is_reconnect = 4;
}

message GetSceneInfoArg{
}

message GetSceneInfoRes{
	repeated CrossSceneInfo scenes = 1;
}

message CrossSceneInfo{
	optional uint32 map_id = 1;
	optional uint32 scene_id = 2;
	optional uint32 gsline = 3;
}

message CreateBattleCrossArg{
	optional uint32 rpc_id = 1;
	optional uint32 map_id = 2;
	optional uint32 scene_id = 3;
	optional uint32 line = 4;
	optional CreateBattleParam param = 5;
	optional uint64 uid = 6;
}

message CreateBattleCrossRes{
	optional ErrorCode result = 1;
}

message GmfFightResult{
	optional uint64 winguild = 1;
	optional uint64 loseguild = 2;
	optional uint32 winscore = 3;
	optional uint32 losescore = 4;
}

message GmfCombat{
	optional uint32 killcount = 1;
	optional double damage = 2;
}

message GmfGuildCombat{
	optional GmfGuildBrief gmfguild = 1;
	optional GmfCombat combat = 2;
	optional uint32 score = 3;
}

message GmfRoleCombat{
	optional GmfRoleBrief gmfrole = 1;
	optional GmfCombat combat = 2;
}

message GmfGuildCombatPara{
	optional GmfGuildCombat guildcombat11 = 1;
	optional GmfGuildCombat guildcombat22 = 2;
}

message GprOneBattleEnd{
	optional GmfGuildBrief winguild = 1;
	optional GmfGuildBrief loseguild = 2;
	repeated GmfRoleCombat winrolecombat = 3;
	repeated GmfRoleCombat loserolecombat = 4;
}

message GprAllFightEnd{
	optional GmfGuildBrief winguild = 1;
	optional GmfGuildBrief loseguild = 2;
	optional uint32 winscore = 3;
	optional uint32 losescore = 4;
}

message PlatUserSendGift2DB{
	repeated PlatUserSendGiftTime sendTimes = 1;
}

message PlatUserSendGiftTime{
	optional string destOpenID = 1;
	optional uint32 sendTime = 2;
}

message SBuffRecord{
	repeated Buff buffs = 1;
	repeated BuffItem items = 2;
	optional STransformBuff transbuff = 3;
	optional STransformBuff smallbuff = 4;
}

message GmfEnterStop{
	optional bool stop = 1;
}

message QueryResWarArg{
	optional QueryResWarEnum param = 1;
}

message QueryResWarRes{
	optional ResWarGuildBrief data = 1;
	optional ErrorCode error = 2;
	optional ResWarFinalAll finalrank = 3;
}

message PlatUserAllInfo2DB{
	optional string openid = 1;
	optional PlatUserDetailInfo platUserDetailInfo = 2;
	optional string nickName = 3;
	optional string pic = 4;
}

message PlatFriendsInfo2DB{
	repeated PlatUserAllInfo2DB platFriendsInfo = 1;
	optional PlatUserAllInfo2DB selfInfo = 2;
	optional uint32 clientReqRankTime = 3;
	optional uint32 updatePlatFriendsFromClient = 4;
	optional uint32 syncSelfInfo2CSTime = 5;
}

message SavePlatFriendInfoData{
	repeated MSSavePlatFriend2DBData platFriendInfo = 1;
}

message MSSavePlatFriend2DBData{
	optional string openid = 1;
	optional bytes info = 2;
}

message GAItemDBData{
	optional uint64 uid = 1;
	optional uint32 itemid = 2;
	optional uint32 itemcount = 3;
	optional uint64 auctroleid = 4;
	optional uint32 auctprice = 5;
	optional uint32 maxprice = 6;
	optional int32 acttype = 7;
	optional int32 saletype = 8;
	optional uint64 guildid = 9;
	repeated uint64 joinroles = 10;
	optional uint32 gwtime = 11;
	optional uint32 saledtime = 12;
}

message GoldClickArg{
	optional uint32 type = 1;
	optional uint32 count = 2;
}

message GoldClickRes{
	optional ErrorCode errorcode = 1;
	repeated uint32 results = 2;
	optional uint32 freetimeleft = 3;
	optional uint32 freecount = 4;
	optional uint32 freeallcount = 5;
	optional uint32 count = 6;
	optional uint32 allcount = 7;
}

message ResWarTeamBaseInfo{
	optional uint32 teamid = 1;
	optional uint64 uid = 2;
	optional string name = 3;
	optional uint32 lv = 4;
	optional uint32 ppt = 5;
	optional uint32 job = 6;
	optional bool online = 7;
	optional uint64 guildid = 8;
	optional string guildname = 9;
}

message ResWarSceneInfo{
	optional uint32 mineid = 1;
	optional uint32 teamid = 2;
	optional uint32 groupid = 3;
	optional uint32 endtime = 4;
	repeated ResWarTeamBaseInfo self = 5;
	repeated ResWarTeamBaseInfo target = 6;
	optional uint64 selfguildid = 7;
	optional uint64 targetguildid = 8;
	optional uint32 selfaddtime = 9;
	optional uint32 targetaddtime = 10;
	optional uint32 buffid = 11;
}

message ResWarTeamResult{
	optional uint32 group = 1;
	optional uint32 winteamid = 2;
}

message ResWarGroupData{
	optional uint32 teamid = 1;
	optional uint32 killcount = 2;
	optional uint32 totaldamage = 3;
}

message ResWarAllInfo{
	repeated ResWarGroupData groupdata = 1;
	optional ResWarTimeType timetype = 2;
	optional uint32 lefttime = 3;
}

message RoleEnterCrossSceneNtf{
	optional uint32 map_id = 1;
	optional uint32 scene_id = 2;
	repeated uint64 rolelist = 3;
	optional uint32 gsline = 4;
}

message CrossSceneDestoryed{
	optional uint32 scene_id = 1;
}

message GASaleItem{
	optional uint64 uid = 1;
	optional int32 acttype = 2;
	optional uint32 itemid = 3;
	optional uint64 auctroleid = 4;
	optional uint32 curauctprice = 5;
	optional uint32 maxprice = 6;
	optional uint32 lefttime = 7;
	optional bool display = 8;
}

message GASaleHistory{
	optional int32 acttype = 1;
	optional uint32 saletime = 2;
	optional uint32 itemid = 3;
	optional uint32 saleprice = 4;
	optional GuildAuctResultType auctresult = 5;
}

message GuildAuctReqArg{
	optional GuildAuctReqType reqtype = 1;
	optional uint64 uid = 2;
	optional int32 acttype = 3;
	optional int32 itemtype = 4;
	optional uint32 curauctprice = 5;
}

message GuildAuctReqRes{
	optional ErrorCode errorcode = 1;
	optional uint32 curauctprice = 2;
	repeated GASaleItem saleitems = 3;
	repeated GASaleHistory salehistorys = 4;
	optional uint32 profit = 5;
}

message ResWarEstimateBaseInfo{
	optional uint32 teamid = 1;
	optional uint32 job = 2;
	optional string name = 3;
	optional uint32 killer = 4;
	optional uint64 damage = 5;
	optional uint32 lv = 6;
	optional uint64 roleid = 7;
}

message ResWarAllTeamBaseInfo{
	repeated ResWarTeamBaseInfo info = 1;
}

message ResWarRes{
	optional ResWarAllTeamBaseInfo baseinfo = 1;
	optional ResWarAllInfo allinfo = 2;
}

message ResWarArg{
	optional uint32 param = 1;
}

message ResWarFinalBaseInfo{
	optional uint64 uuid = 1;
	optional uint32 job = 2;
	optional uint32 killer = 3;
	optional uint32 dead = 4;
	optional int32 intimategree = 5;
	optional bool ismvp = 6;
	optional bool isfriend = 7;
}

message PvpBattleInfo{
	repeated PvpRoleInfo roleinfo = 1;
	optional uint32 uid = 2;
}

message PvpRoleInfo{
	optional uint64 roleid = 1;
	optional uint32 camp = 2;
	optional uint32 level = 3;
	optional string name = 4;
	optional uint32 profession = 5;
	optional uint32 military_rank = 6;
}

message PayMember{
	optional int32 ID = 1;
	optional int32 ExpireTime = 2;
	optional bool isClick = 3;
}

message GuildAuctReqM2GArg{
	optional GuildAuctReqArg c2mArg = 1;
	optional uint32 delayid = 2;
	optional uint32 price = 3;
	optional uint64 sessionid = 4;
}

message GuildAuctReqM2GRes{
	optional GuildAuctReqRes c2mRes = 1;
}

message GiveMailPrizeArg{
	repeated SMail mail = 1;
	optional uint64 roleid = 2;
	optional uint32 delayid = 3;
}

message GiveMailPrizeRes{
	repeated bool isSucceed = 1;
}

message GetGuildBonusSendListArg{
}

message GetGuildBonusSendListRes{
	optional ErrorCode error = 1;
	repeated GuildBonusAppear sendList = 2;
}

message SendGuildBonusInSendListArg{
	optional uint32 bonusID = 1;
}

message SendGuildBonusInSendListRes{
	optional ErrorCode error = 1;
}

message SendGuildBonusNtfData{
	optional bool hasLeftSend = 1;
}

message PayMemberRecord{
	optional int32 ID = 1;
	optional int32 ExpireTime = 2;
	optional bool isClick = 3;
	optional int32 buttonStatus = 4;
	optional int32 lastDragonFlowerTime = 5;
	optional bool isNotifyExpire = 6;
	optional int32 begintime = 7;
	optional bool isNotifyExpireSoon = 8;
}

message UseGuildBuff{
	optional uint32 itemid = 1;
	optional uint64 guild = 2;
}

message BattleLogReport{
	repeated string key = 1;
	repeated string value = 2;
	optional uint32 type = 3;
	optional uint64 roleid = 4;
}

message GuildAuctPara{
	optional AuctDBDataOperate op = 1;
	optional GAItemDBData dbdata = 2;
}

message UseGuildBuffArg{
	optional uint32 itemid = 1;
	optional uint64 guildid = 2;
}

message UseGuildBuffRes{
	optional ErrorCode error = 1;
	optional uint32 cd = 2;
}

message ResWarGuildBrief{
	optional ErrorCode error = 1;
	optional uint64 guildid = 2;
	optional uint32 cd = 3;
	optional uint32 cardcd = 4;
	repeated GuildBuffItem item = 5;
	repeated GuildBuffRecord record = 6;
	repeated uint32 mineid = 7;
	repeated ChatInfo chatinfo = 8;
	optional uint32 totalcd = 9;
	optional uint32 timecoutdown = 10;
	optional uint32 timetype = 11;
	optional ResWarRankSimpleInfo rankinfo = 12;
	repeated GuildBuffSimpleInfo buffinfo = 13;
	repeated uint32 buffid = 14;
}

message GuildBuffItem{
	optional uint32 itemid = 1;
	optional uint32 count = 2;
	optional uint64 roleid = 3;
}

message CrossGsCloseNtf{
	optional uint32 gsline = 1;
}

message GuildIntegralData{
	optional uint32 beginTime = 1;
	optional uint32 createTime = 2;
	optional uint32 IntegralOneTime = 3;
	optional uint32 IntegralOneEnd = 4;
	optional uint32 IntegralTwoTime = 5;
	optional uint32 IntegralTwoEnd = 6;
	optional uint32 IntegralThreeTime = 7;
	optional uint32 IntegralThreeEnd = 8;
	optional uint32 IntegralFourTime = 9;
	repeated Integralunit applyGuild = 10;
	repeated IntegralBattleturn turnData = 11;
	repeated HistoryRecord historyRecord = 12;
	optional uint32 IntegralFourEnd = 13;
	repeated uint64 byeGuild = 14;
}

message Integralunit{
	optional uint64 guildid = 1;
	optional uint32 guildscore = 2;
	optional string name = 3;
	optional uint32 guildicon = 4;
}

message IntegralBattle{
	optional uint64 guildone = 1;
	optional uint64 guildtwo = 2;
	optional bool isdo = 3;
	optional uint32 guildonescore = 4;
	optional uint32 guildtwoscore = 5;
	optional string nameone = 6;
	optional string nametwo = 7;
	optional uint32 iconone = 8;
	optional uint32 icontwo = 9;
	optional uint32 wartime = 10;
	optional IntegralState state = 11;
}

message HistoryRecord{
	optional uint32 id = 1;
	optional string first = 2;
	optional string second = 3;
}

message GuildBuffRecord{
	optional uint32 id = 1;
	optional uint32 time = 2;
}

message ResWarPVEArg{
	optional uint32 mine = 1;
}

message ResWarPVERes{
	optional ErrorCode error = 1;
}

message applyguildarenaarg{
}

message applyguildarenares{
	optional ErrorCode errorcode = 1;
}

message getapplyguildlistarg{
}

message getapplyguildlistres{
	repeated Integralunit guildlist = 1;
}

message IntegralBattleturn{
	optional uint32 id = 1;
	repeated IntegralBattle battles = 2;
}

message getintegralbattleInfoarg{
}

message getintegralbattleInfores{
	repeated IntegralBattle battleinfo = 1;
	repeated uint32 battleTime = 2;
}

message GuildAuctFailArg{
	optional uint64 roleid = 1;
	optional uint32 price = 2;
	optional uint32 itemid = 3;
}

message GuildAuctFailRes{
	optional ErrorCode errorcode = 1;
}

message GuildGardenInfo{
	optional bytes plant = 1;
	optional bytes eventlog = 2;
}

message GetGuildIntegralInfoArg{
}

message GetGuildIntegralInfoRes{
	optional GuildArenaType battletype = 1;
	optional uint32 applytime = 2;
	optional bool isapply = 3;
	optional uint32 curturn = 4;
}

message TeamExtraInfo{
	optional uint32 pptlimit = 1;
	optional uint32 costindex = 2;
	optional string league_teamname = 3;
}

message RoleTeamCostInfo{
	optional uint32 expid = 1;
	optional uint32 costindex = 2;
	optional uint32 dragoncount = 3;
	optional uint32 updateday = 4;
	optional uint32 getgiftvalue = 5;
}

message RegisterGt2NsArg{
	optional uint32 serverID = 1;
	optional uint32 line = 2;
	optional ListenAddress addr = 3;
}

message RegisterGt2NsRes{
	optional ErrorCode result = 1;
}

message RegisterGs2NsArg{
	optional uint32 serverid = 1;
	optional uint32 line = 2;
}

message RegisterGs2NsRes{
	optional ErrorCode result = 1;
	repeated uint32 lineList = 2;
	repeated ListenAddress addrList = 3;
	optional uint32 backflowlevel = 4;
}

message SceneCreatedData{
	optional uint32 mapid = 1;
	optional uint32 sceneid = 2;
	optional uint32 line = 3;
}

message RoleLoginData{
	optional uint64 sessionID = 1;
	optional RoleInfoOnMs roledata = 2;
}

message RoleLogoutData{
	optional uint64 sessionID = 1;
	optional uint32 level = 2;
}

message NewRoleCreatedData{
	optional RoleAllInfo roledata = 1;
	optional ClientInfo clientInfo = 2;
	optional int32 totalRoleNum = 3;
}

message RoleChangeSceneNtfData{
	optional uint64 roleid = 1;
	optional uint32 mapid = 2;
	optional uint32 sceneid = 3;
	optional uint32 gsline = 4;
	optional bool iscrossgs = 5;
}

message KickAccountFromMsArg{
	optional uint64 roleid = 1;
	optional string accountID = 2;
	optional KickType kickType = 3;
}

message KickAccountFromMsRes{
	optional ErrorCode result = 1;
}

message ChangeSceneFromMsArg{
	optional uint32 destSceneID = 1;
	optional uint32 mapid = 2;
	repeated uint64 rolelist = 3;
	optional SceneSwitchData data = 4;
	optional bool isToCrossGs = 5;
	optional uint32 gsline = 6;
}

message ChangeSceneFromMsRes{
	optional ErrorCode result = 1;
}

message EnterSceneReqToMsData{
	optional uint32 mapid = 1;
	repeated uint64 rolelist = 2;
	optional SceneSwitchData  data = 3;
}

message PayMemberPrivilege{
	optional int32 usedReviveCount = 1;
	optional int32 usedChatCount = 2;
	optional int32 usedAbyssCount = 3;
	optional int32 usedBossRushCount = 4;
	optional int32 usedBuyGreenAgateCount = 5;
	optional int32 usedSuperRiskCount = 6;
	repeated PayPrivilegeShop usedPrivilegeShop = 7;
}

message GuildCampInfoArg{
}

message GuildCampInfoRes{
	optional ErrorCode error = 1;
	repeated GuildCampRankInfo rankInfos = 2;
	optional int32 curCampID = 3;
	optional int32 nextCampID = 4;
	optional int32 leftCount = 5;
}

message GuildCampRankInfo{
	optional int32 rank = 1;
	optional int32 rankVar = 2;
	repeated RoleBriefInfo roles = 3;
}

message ClickGuildCampArg{
}

message GuildCampSave{
	repeated GuildCampRankInfo2DB rankInfos = 1;
	optional uint32 curCampID = 2;
	optional uint32 nextCampID = 3;
	optional uint32 updateTime = 4;
}

message GuildCampRankInfo2DB{
	repeated uint64 roleIDs = 1;
	optional int32 var = 2;
	optional uint32 timestamp = 3;
}

message GuildCampResult{
	repeated RoleBriefInfo roles = 1;
	optional int32 var = 2;
	optional uint64 guildID = 3;
	optional uint32 curCampID = 4;
}

message RegisterCtrl2RouterArg{
	optional uint32 serverid = 1;
	repeated uint32 serverids = 2;
}

message RegisterCtrl2RouterRes{
	optional ErrorCode result = 1;
}

message PayPrivilegeShop{
	optional int32 goodsID = 1;
	optional int32 totalCount = 2;
	optional int32 usedCount = 3;
}

message ResWarRole{
	optional uint64 role = 1;
	optional uint32 res = 2;
}

message ResWarBase{
	optional uint32 teamid = 1;
	optional uint64 guildid = 2;
	repeated GuildBuffItem itemlist = 3;
	repeated ResWarRole rolelist = 4;
	optional uint32 res = 5;
	optional bool bWin = 6;
}

message ResWarRoleRank{
	optional string rolename = 1;
	optional string guildname = 2;
	optional uint32 res = 3;
	optional uint64 roleid = 4;
	optional uint64 guild = 5;
}

message ResWarRoleRankArg{
	optional uint32 param = 1;
}

message ResWarRoleRankRes{
	repeated ResWarRoleRank data = 1;
}

message CheckRoleNameArg{
	optional uint32 rpcid = 1;
	optional string name = 2;
	optional RoleType type = 3;
}

message SynGuilIntegralState{
	optional IntegralState state = 1;
}

message ResWarFinal{
	optional string guildname = 1;
	optional uint32 res = 2;
	repeated ItemBrief brief = 3;
	optional uint32 guildicon = 4;
	optional uint64 guildid = 5;
}

message ResWarFinalAll{
	repeated ResWarFinal data = 1;
}

message LevelSealUnlockInfo{
	repeated uint32 type = 1;
	repeated uint32 unlocktime = 2;
}

message ResWarStateInfo{
	optional ResWarState state = 1;
}

message CheckRoleNameRes{
	optional ErrorCode result = 1;
}

message CheckRoleBanInfoArg{
	optional uint32 rpcid = 1;
	optional int32 index = 2;
	optional uint64 roleid = 3;
	optional string openid = 4;
}

message SkyCityTeamScore{
	optional uint32 teamid = 1;
	optional uint32 score = 2;
}

message SynGuildIntegralState{
	optional IntegralState state = 1;
}

message BuffItem{
	optional uint32 itemid = 1;
	optional uint32 itemcount = 2;
	optional uint32 expiretime = 3;
}

message CheckRoleBanInfoRes{
	optional ErrorCode result = 1;
	optional int32 endTime = 2;
	optional int32 banTime = 3;
	optional string reason = 4;
}

message ItemBuffOpArg{
	optional uint32 itemid = 1;
	optional uint32 itemcount = 2;
	optional uint32 op = 3;
	optional uint32 index = 4;
}

message ItemBuffOpRes{
	optional ErrorCode errorcode = 1;
	repeated uint32 itemid = 2;
	repeated uint32 itemcount = 3;
	repeated uint32 buffid = 4;
	repeated uint32 lefttime = 5;
}

message KillEnemyScoreData{
	optional int32 score = 1;
}

message GuildArenaHistory{
	optional string first = 1;
	optional string second = 2;
}

message ReqGuildArenaHistoryRes{
}

message ReqGuildArenaHistoryRse{
	repeated GuildArenaHistory history = 1;
}

message UnlockSealFindBackData{
	optional bool state = 1;
	optional int32 type = 2;
	optional int32 time = 3;
}

message SyncServerTime{
	optional uint64 now = 1;
}

message OutLookState{
	optional OutLookStateType statetype = 1;
	optional uint32 param = 2;
	optional uint64 paramother = 3;
}

message JustDanceArg{
	optional uint32 type = 1;
	optional uint32 danceid = 2;
}

message JustDanceRes{
	optional ErrorCode errorcode = 1;
}

message ServerOpenDay{
	optional int32 openday = 1;
	optional uint32 week = 2;
	optional uint32 daybeginsecdiff = 3;
	optional uint32 nowTime = 4;
}

message GuildBuffSimpleInfo{
	optional uint64 guildid = 1;
	repeated GuildBuff buff = 2;
}

message ResWarRankSimpleInfo{
	repeated ResWarRank rank = 1;
}

message GuildBuffSimpleAllInfo{
	repeated GuildBuffSimpleInfo buff = 1;
}

message GuildBuffSimpleItem{
	optional uint64 guildid = 1;
	repeated GuildBuffItem item = 2;
	repeated ChatInfo chatinfo = 3;
}

message DailyTaskInfo{
	optional uint32 id = 1;
	optional uint32 step = 2;
	optional bool is_rewarded = 3;
	optional bool ask_help = 4;
}

message GetDailyTaskInfoArg{
}

message GetDailyTaskInfoRes{
	repeated DailyTaskInfo task = 1;
	optional bool is_rewarded = 2;
	optional uint32 count = 3;
	optional uint32 accept_level = 4;
	optional uint32 askhelp_num = 5;
	optional uint32 score = 6;
	optional uint32 remain_refresh_count = 7;
	optional uint32 luck = 8;
}

message GetDailyTaskRewardArg{
	optional uint32 type = 1;
	optional uint32 id = 2;
}

message GetDailyTaskRewardRes{
	optional ErrorCode code = 1;
	repeated DailyTaskInfo task = 2;
}

message WorldLevel{
	optional uint32 worldLevel = 1;
}

message GuildMemberAskItem{
	optional uint32 id = 1;
	optional uint64 roleid = 2;
	optional uint32 publishtime = 3;
	optional uint32 itemid = 4;
	optional uint32 needCount = 5;
	optional uint32 getCount = 6;
	optional uint32 level = 7;
	optional uint32 quality = 8;
	optional uint32 taskid = 9;
	optional PeriodTaskType tasktype = 10;
	optional uint32 itemtype = 11;
	optional uint32 itemquality = 12;
	optional uint32 index = 13;
}

message GuildDonateSave{
	repeated GuildMemberAskItem askinfo = 1;
	optional uint32 updatetime = 2;
	repeated GuildMemberDonateInfo donateinfo = 3;
}

message NotifyServerClose{
	optional uint32 serverid = 1;
}

message UpdateWorldMatchNum{
	optional uint32 num = 1;
}

message DailyTaskAskHelpArg{
	optional uint32 task_id = 1;
	optional PeriodTaskType task_type = 2;
}

message DailyTaskAskHelpRes{
	optional ErrorCode code = 1;
	optional uint32 ask_uid = 2;
}

message AskGuildHelpReq{
	optional uint32 itemid = 1;
	optional uint32 itemcount = 2;
	optional uint32 rpcid = 3;
	optional uint32 level = 4;
	optional uint32 quality = 5;
	optional uint32 taskid = 6;
}

message AskGuildHelpRes{
	optional ErrorCode code = 1;
	optional uint32 ask_uid = 2;
}

message GuildMemberAskInfo{
	optional GuildMemberAskItem item = 1;
	optional string name = 2;
	optional uint32 profession = 3;
}

message GetGuildDonateInfoArg{
}

message GetGuildDonateInfoRes{
	optional ErrorCode result = 1;
	repeated GuildMemberAskInfo info = 2;
	repeated GuildMemberDonateRankItem rankitem = 3;
	optional uint32 donatenum = 4;
}

message DonateMemberItemArg{
	optional uint32 id = 1;
	optional uint32 count = 2;
	repeated uint64 itemuid = 3;
}

message DonateMemberItemRes{
	optional ErrorCode result = 1;
	optional uint32 dailycount = 2;
	optional uint32 totalcount = 3;
	repeated GuildMemberDonateRankItem  rankitem = 4;
	optional uint32 getcount = 5;
}

message CostDonateItemArg{
	optional uint32 itemid = 1;
	optional uint32 itemcount = 2;
	optional uint32 rpcid = 3;
	optional uint32 level = 4;
	optional uint32 quality = 5;
	optional PeriodTaskType tasktype = 6;
	optional uint32 taskid = 7;
	repeated uint64 itemuid = 8;
}

message CostDonateItemRes{
	optional ErrorCode result = 1;
	optional uint32 todaydonatecount = 2;
	optional uint32 totaldonatecount = 3;
	optional uint32 contribute = 4;
	repeated uint32 itemid = 5;
	repeated uint32 itemcount = 6;
}

message QueryDonateInfoArg{
}

message QueryDonateInfoRes{
	optional uint32 todaydonatecount = 1;
	optional uint32 totaldonatecount = 2;
}

message GuildMemberDonateInfo{
	optional uint32 todaydonatecount = 1;
	optional uint32 totaldonatecount = 2;
	optional uint64 roleid = 3;
	optional uint32 lasttime = 4;
}

message GuildMemberDonateRankItem{
	optional uint64 roleid = 1;
	optional uint32 todaycount = 2;
	optional uint32 totalcount = 3;
	optional uint32 lasttime = 4;
	optional string name = 5;
	optional uint32 level = 6;
	optional uint32 profession = 7;
}

message AddGuildInheritRes{
	optional ErrorCode errorcode = 1;
}

message AddGuildInheritArg{
	optional uint64 reqRoleId = 1;
}

message tryAddGuildInheritArg{
	optional uint64 roleOne = 1;
	optional uint64 roleTwo = 2;
	optional uint32 rpcid = 3;
	optional bool isdo = 4;
	optional EMentorMsgOpType opt = 5;
}

message tryAddGuildInheritRes{
	optional ErrorCode errorcode = 1;
}

message AceptGuildInheritArg{
	optional uint64 roleId = 1;
}

message AceptGuildInheritRes{
	optional ErrorCode errorcode = 1;
}

message synGuildInheritExp{
	optional uint64 roleOne = 1;
	optional uint32 expOne = 2;
	optional uint64 roleTwo = 3;
	optional uint32 expTwo = 4;
	optional uint32 turn = 5;
	optional bool islast = 6;
	optional uint64 teacherId = 7;
}

message OnlyOnceGuildBonusData{
	optional uint32 bonusType = 1;
	optional uint32 bonusVar = 2;
}

message RoleGuildBonusData{
	repeated OnlyOnceGuildBonusData sentGuildBonus = 1;
	repeated MapKeyValue gotGuildBonusDayNum = 2;
	repeated MapKeyValue gotGuildBonusTotalNum = 3;
}

message PlatNotice{
	optional uint32 type = 1;
	optional uint32 noticeid = 2;
	optional bool isopen = 3;
	optional uint32 areaid = 4;
	optional uint32 platid = 5;
	optional string content = 6;
	optional uint32 updatetime = 7;
	optional bool isnew = 8;
	optional string title = 9;
}

message CrossZoneStatusNtf{
	optional uint32 gs_num = 1;
}

message InheritData{
	optional string name = 1;
	optional uint32 lvl = 2;
	optional uint32 time = 3;
	optional uint64 roleId = 4;
}

message ReqGuildInheritInfoArg{
}

message ReqGuildInheritInfoRes{
	repeated InheritData data = 1;
}

message DelGuildInheritArg{
}

message DelGuildInheritRes{
	optional ErrorCode errorCode = 1;
}

message GetPlatNoticeArg{
	optional uint32 id = 1;
}

message GetPlatNoticeRes{
	optional ErrorCode result = 1;
	repeated PlatNotice noticelist = 2;
}

message SynDoingGuildInherit{
	optional uint64 roleOne = 1;
	optional uint64 roleTwo = 2;
	optional uint32 type = 3;
}

message NoticeDoingGuildInherit{
	optional uint64 roleOne = 1;
	optional uint64 roleTwo = 2;
	optional uint32 type = 3;
}

message SynGuildInheritNumInfo{
	optional uint32 reqNum = 1;
	optional uint32 teacherNum = 2;
	optional uint32 studentNum = 3;
	optional uint32 lastTime = 4;
}

message ResWarMineData{
	optional uint64 guildid = 1;
	optional uint32 mine = 2;
}

message NoticeGuildInheritNumInfo{
	optional uint32 reqNum = 1;
	optional uint64 roleId = 2;
}

message QQVipInfo{
	optional bool is_vip = 1;
	optional bool is_svip = 2;
	optional bool is_year_vip = 3;
	optional uint32 qq_vip_start = 4;
	optional uint32 qq_vip_end = 5;
	optional uint32 qq_svip_start = 6;
	optional uint32 qq_svip_end = 7;
	optional uint32 qq_year_vip_start = 8;
	optional uint32 qq_year_vip_end = 9;
	optional bool vip_newbie_rewarded = 10;
	optional bool svip_newbie_rewarded = 11;
	optional bool is_xinyue_vip = 12;
}

message QueryQQVipInfoArg{
	optional string token = 1;
}

message QueryQQVipInfoRes{
	optional ErrorCode result = 1;
	optional QQVipInfoClient info = 2;
}

message DailyTaskGiveUpArg{
}

message DailyTaskGiveUpRes{
	optional ErrorCode result = 1;
}

message FunctionOpenInfo{
	optional uint32 flag = 1;
}

message FetchPlatNoticeArg{
	optional LoginType type = 1;
	optional PlatType platid = 2;
}

message FetchPlatNoticeRes{
	optional PlatNotice notice = 1;
	optional ErrorCode result = 2;
	repeated PlatNotice data = 3;
}

message QQVipInfoClient{
	optional bool is_vip = 1;
	optional bool is_svip = 2;
	optional uint32 qq_vip_end = 3;
	optional uint32 qq_svip_end = 4;
	optional bool is_bigger_one_month = 5;
}

message CallData{
	optional uint32 skillid = 1;
	optional int32 sequence = 2;
	optional int32 slot = 3;
	optional int32 leftrunningtime = 4;
	optional bool onsyntonic = 5;
}

message RoleInfoOnMs{
	optional string accountID = 1;
	optional uint64 roleid = 2;
	optional string name = 3;
	optional uint32 mapid = 4;
	optional uint32 sceneid = 5;
	optional uint32 roleCreatedTime = 6;
	optional IdipData idipdata = 7;
	optional string clientIP = 8;
	optional uint32 level = 9;
	optional uint32 lastLoginTime = 10;
	optional string token = 11;
	optional LoginType logintype = 12;
	optional int32 loginplatid = 13;
	optional bool account_backflow = 14;
}

message JoinLargeRoomArg{
	optional uint32 param = 1;
	optional uint64 roleid = 2;
	optional uint32 plat = 3;
	optional string ip = 4;
	optional string acc = 5;
}

message JoinLargeRoomRes{
	optional ErrorCode error = 1;
	optional JoinLargeRoomReply data = 2;
}

message CrashRecoverM2GArg{
	optional uint32 gsLine = 1;
}

message CrashRecoverM2GRes{
	optional bool isCrossGs = 1;
	repeated uint64 sessionList = 2;
	repeated RoleInfoOnMs roleList = 3;
	repeated uint32 mapidList = 4;
	repeated uint32 sceneidList = 5;
	repeated uint64 owneridlist = 6;
}

message JoinLargeRoomReply{
	optional string url = 1;
	optional uint32 key = 2;
	optional uint32 bussniessid = 3;
	optional uint64 roomid = 4;
	optional uint64 roomkey = 5;
	optional uint32 memberid = 6;
	optional uint64 roleid = 7;
	optional uint32 param = 8;
}

message FetchRoleInfoOnMsArg{
	optional uint32 gsline = 1;
	optional uint64 roleid = 2;
}

message FetchRoleInfoOnMsRes{
	optional ErrorCode result = 1;
	optional bool isCrossGs = 2;
	optional uint64 sessionID = 3;
	optional RoleInfoOnMs roleInfo = 4;
}

message NoticeGuildInheritEnd{
	optional uint64 roleOne = 1;
	optional uint64 roleTwo = 2;
	optional bool isend = 3;
}

message MsCrashRecoverR2G{
	optional uint32 serverid = 1;
}

message MSCrashRecoverG2M{
	optional bool isCrossGs = 1;
	repeated uint64 sessionList = 2;
	repeated RoleInfoOnMs roleList = 3;
	optional uint32 gsline = 4;
}

message LeaveLargeRoomParam{
	optional uint32 param = 1;
}

message LargeRoomRoleParam{
	repeated string name = 1;
	repeated uint64 roleid = 2;
}

message LargeRoomLoginParam{
	optional bool speaker = 1;
}

message SyncAllLiveInfoToMSData{
	repeated SyncLiveInfoToMsData infos = 1;
}

message FMWhiteRoleData{
	optional string acc = 1;
	optional string nick = 2;
}

message FMWhiteRoleList{
	repeated FMWhiteRoleData role = 1;
}

message LeaveLargeRoom{
	optional uint32 param = 1;
	optional string acc = 2;
}

message ResWarBuffArg{
	optional uint32 nParam = 1;
}

message ResWarBuffRes{
	optional uint32 buffid = 1;
	optional ErrorCode error = 2;
}

message PvpRoleBrief{
	optional uint64 roleid = 1;
	optional string rolename = 2;
	optional uint32 rolelevel = 3;
	optional uint32 roleprofession = 4;
	optional uint32 roleserverid = 5;
}

message GardenFishStopArg{
	optional uint64 garden_id = 1;
}

message TryTeamCostReward{
	repeated uint32 minrank = 1;
	repeated uint32 maxrank = 2;
	repeated ItemBrief item = 3;
	repeated uint32 delaytime = 4;
	optional uint64 roleid = 5;
	optional uint32 value = 6;
}

message TryTeamCostRewardRes{
	optional bool ishit = 1;
}

message ResWarTime{
	optional uint32 nTime = 1;
}

message EnterHallNotice{
	optional uint64 roleid = 1;
}

message StepMoveData{
	optional uint64 EntityID = 1;
	optional int32 PosXZ = 2;
	optional bool Stoppage = 3;
	optional int32 Face = 4;
}

message NotfiyGtSessionLogin{
}

message CrossGsCloseNtf2Ms{
	optional uint32 gsline = 1;
}

message NsCloseNtf{
	optional uint32 serverid = 1;
}

message ChangeNameCountNtf{
	optional uint32 count = 1;
}

message HandleMicphoneArg{
	optional bool param = 1;
}

message ChangeNameGsArg{
	optional uint32 delayrpcid = 1;
	optional string name = 2;
	optional uint64 roleid = 3;
	optional bool iscostitem = 4;
}

message ChangeNameGsRes{
	optional ErrorCode errorcode = 1;
}

message ChangeNameArg{
	optional string name = 1;
	optional bool iscostitem = 2;
}

message ChangeNameRes{
	optional ErrorCode errorcode = 1;
}

message FMShow{
	optional string data = 1;
	optional uint64 roleid = 2;
}

message GuildBuffCDParam{
	optional uint32 param = 1;
}

message FMLargeRoomCloseParm{
	optional uint32 param = 1;
}

message SceneEmptyNotify{
	optional uint32 sceneuid = 1;
	optional uint32 mapid = 2;
}

message MSDestoryScene{
	optional uint32 sceneuid = 1;
}

message QueryQQFriendsVipInfoArg{
	optional string token = 1;
	repeated string friendopenids = 2;
}

message QueryQQFriendsVipInfoRes{
	optional ErrorCode result = 1;
	repeated FriendVipInfo info = 2;
}

message FriendVipInfo{
	optional string openid = 1;
	optional bool is_vip = 2;
	optional bool is_svip = 3;
}

message ReqGuildInheritTimesArg{
	optional uint32 rpcid = 1;
	optional uint64 roleid = 2;
	repeated uint64 members = 3;
}

message ReqGuildInheritTimesRes{
	repeated uint64 roles = 1;
}

message RegisterDb2RouterArg{
	optional uint32 serverid = 1;
}

message RegisterDb2RouterRes{
	optional ErrorCode result = 1;
}

message AntiAddictionRemindInfo{
	optional AntiAddictionReportType type = 1;
	optional string remindmsg = 2;
}

message HorseAward{
	optional uint32 time = 1;
	optional uint32 horse = 2;
	optional uint32 rank = 3;
}

message HorseAwardAll{
	repeated HorseAward award = 1;
}

message HorseRank{
	optional uint32 rank = 1;
	optional uint32 turns = 2;
}

message HorseWaitTime{
	optional uint32 time = 1;
}

message HorseAnimation{
	optional uint64 time = 1;
}

message HorseEnterWaitArg{
	optional uint32 param = 1;
}

message HorseEnterWaitRes{
	optional ErrorCode error = 1;
}

message RemoveAskItemNtf{
	optional uint32 taskid = 1;
}

message TeamCountClient{
	optional int32 teamtype = 1;
	optional int32 leftcount = 2;
	optional int32 buycount = 3;
	optional int32 maxcount = 4;
}

message EnchantEquipArg{
	optional uint64 uid = 1;
	optional uint32 enchantid = 2;
}

message EnchantEquipRes{
	optional ErrorCode errorcode = 1;
	optional AttributeInfo attr = 2;
}

message ItemEnchant{
	optional uint32 enchantid = 1;
	repeated AttributeInfo attrs = 2;
	optional uint32 chooseAttrid = 3;
	repeated uint32 enchantids = 4;
	repeated AttributeInfo allAttrs = 5;
	repeated uint32 enchantBaodi = 6;
	repeated uint32 baodiCount = 7;
}

message TeamRecord{
	optional uint32 lastdayuptime = 1;
	optional uint32 lastweekuptime = 2;
	optional uint32 goddessGetRewardToday = 3;
	repeated TeamCountInfo teamcountins = 4;
	optional RoleTeamCostInfo teamcost = 5;
	optional uint32 weeknestrewardcount = 6;
	optional uint32 diamondcostcount = 7;
	optional uint32 useticketcount = 8;
	repeated int32 dragonhelpfetchedrew = 9;
	optional bool wantdragonhelp = 10;
}

message HorseFinal{
	optional uint32 time = 1;
	optional uint32 rank = 2;
	optional uint32 turns = 3;
}

message UpdatePartnerDataArg{
	optional DBOperType type = 1;
	optional PartnerSaveData data = 2;
	optional uint64 oldid = 3;
}

message UpdatePartnerDataRes{
	optional ErrorCode result = 1;
}

message MakePartnerM2GArg{
	repeated uint64 roleids = 1;
}

message MakePartnerM2GRes{
	optional ErrorCode result = 1;
	optional uint64 roleid = 2;
}

message RoleMiscData{
	optional uint32 dummy = 1;
	optional uint32 lastpush = 2;
	optional uint32 pushflag = 3;
	optional uint32 laddertime = 4;
	optional uint32 answersindex = 5;
	optional uint32 answersversion = 6;
	optional uint32 hintflag = 7;
	optional uint32 lastchangeprotime = 8;
	optional uint32 changeprocount = 9;
	optional uint32 daily_lb_num = 10;
	optional uint32 updatetime = 11;
	optional string declaration = 12;
	optional bool qqvip_hint = 13;
	optional uint32 qqvip_hint_read_time = 14;
	optional bool egame_hint = 15;
	optional uint32 egame_hint_readtime = 16;
	optional bool xinyue_hint = 17;
	optional uint32 xinyue_readtime = 18;
	optional uint32 last_level = 19;
	optional uint32 loginacttime = 20;
	optional bool loginactstatus = 21;
	optional uint32 daygiftitems = 22;
	optional uint32 hardestNestExpID = 23;
	optional StartUpType startuptype = 24;
	optional uint32 startuptime = 25;
	optional uint32 weddingflow_count = 26;
	optional uint32 weddingfireworks_count = 27;
	optional uint32 weddingcandy_count = 28;
	repeated AttributeInfo gmattrs = 29;
	optional SurviveRecord surviverec = 30;
	optional LuckyActivity turntable = 31;
	optional uint32 freeflow_hinttime = 32;
	optional uint32 kingbackrewardcount = 33;
	optional uint32 chare_back_rewardlevel = 34;
	optional uint32 charge_back_total = 35;
}

message PartnerMemberData{
	optional uint64 roleid = 1;
	optional bool is_apply_leave = 2;
	optional uint32 apply_leave_time = 3;
	optional uint32 open_shop_time = 4;
	optional uint32 refresh_shop_level = 5;
}

message GetPartnerInfoArg{
}

message GetPartnerInfoRes{
	optional uint64 id = 1;
	repeated uint64 memberids = 2;
	optional uint32 degree = 3;
	optional uint32 level = 4;
	optional uint32 last_leave_time = 5;
	optional bool shop_redpoint = 6;
	optional bool liveness_redpoint = 7;
}

message PicUrlInfo{
	optional string url = 1;
}

message WeekNestSceneInfo{
	optional bool iswin = 1;
	optional uint32 usetime = 2;
	repeated uint64 roles = 3;
	optional int32 expid = 4;
}

message GetOtherMentorStatusArg{
	optional uint64 roleid = 1;
}

message GetOtherMentorStatusRes{
	optional ErrorCode error = 1;
	optional MentorApplyStatus status = 2;
}

message OneMentorRelationInfo2Client{
	optional RoleBriefInfo roleInfo = 1;
	repeated MentorRelationStatusData relationlist = 2;
	optional int32 pos = 3;
	repeated OneMentorTaskInfo studentTaskList = 4;
	optional EMentorTaskStatus inheritStatus = 5;
	optional uint64 inheritApplyRoleID = 6;
	optional MentorRelationStatus curStatus = 7;
	optional uint64 breakApplyRoleID = 8;
}

message MentorRelationStatusData{
	optional uint32 status = 1;
	optional uint32 time = 2;
}

message OneMentorTaskInfo{
	optional int32 taskID = 1;
	optional int32 completeProgress = 2;
	optional int32 completeTime = 3;
	repeated MapIntItem taskApplyStatus = 4;
	optional uint32 taskType = 5;
	optional uint64 taskVar = 6;
}

message MentorSelfInfo{
	repeated OneMentorTaskInfo selfTaskList = 1;
}

message GetMyMentorInfoArg{
}

message GetMyMentorInfoRes{
	optional ErrorCode error = 1;
	repeated OneMentorRelationInfo2Client mentorRelationList = 2;
	optional MentorSelfInfo mentorSelfInfo = 3;
	optional int32 curTime = 4;
	optional uint64 audioID = 5;
	optional string mentorWords = 6;
	optional bool isNeedStudent = 7;
}

message GetMyApplyStudentInfoArg{
	optional bool isRefresh = 1;
}

message GetMyApplyStudentInfoRes{
	optional ErrorCode error = 1;
	repeated OneMentorApplyStudentShow canApplyList = 2;
	optional int32 leftRefreshTime = 3;
}

message OneMentorApplyStudentShow{
	optional RoleBriefInfo oneStudent = 1;
	optional bool hasApply = 2;
	optional string applyWords = 3;
}

message OneMentorApplyMasterShow{
	optional RoleBriefInfo oneMaster = 1;
	optional uint64 audioID = 2;
	optional string applyWords = 3;
	optional bool hasApply = 4;
}

message GetMyApplyMasterInfoArg{
	optional bool isRefresh = 1;
}

message GetMyApplyMasterInfoRes{
	optional ErrorCode error = 1;
	repeated OneMentorApplyMasterShow canApplyMasters = 2;
	optional int32 leftRefreshTime = 3;
}

message OneMentorBeAppliedMsg{
	optional MentorMsgApplyType type = 1;
	optional int32 time = 2;
	optional RoleBriefInfo roleBrief = 3;
	optional int32 reportTaskID = 4;
}

message MentorMyBeAppliedMsgArg{
	optional EMentorMsgOpType operation = 1;
	optional uint64 roleID = 2;
	optional MentorMsgApplyType msgType = 3;
	optional int32 taskID = 4;
	optional bool operatingAllTask = 5;
}

message MentorMyBeAppliedMsgRes{
	optional ErrorCode error = 1;
	repeated OneMentorBeAppliedMsg msgList = 2;
}

message UpdateMentorApplyStudentInfoArg{
	optional uint64 audioID = 1;
	optional string applyWords = 2;
	optional bool isNeedStudent = 3;
	optional bool onlineNotify = 4;
}

message UpdateMentorApplyStudentInfoRes{
	optional ErrorCode error = 1;
}

message MentorRelationOpArg{
	optional MentorRelationOpType operation = 1;
	optional uint64 destRoleID = 2;
	optional int32 reportTaskID = 3;
}

message MentorRelationOpRes{
	optional ErrorCode error = 1;
	optional int32 curTime = 2;
}

message NotifyMentorApplyData{
	optional EMentorRelationPosition pos = 1;
	optional bool hasInheritOrReportTask = 2;
	optional bool hasMsg = 3;
	repeated MentorBreakApplyInfo appliedBreakInfos = 4;
}

message OneMentorMsg2Db{
	optional int32 type = 1;
	optional int32 time = 2;
	optional uint64 roleid = 3;
	optional int32 paramid = 4;
	optional int32 paramcount = 5;
}

message MentorAllData2Db{
	optional uint64 roleID = 1;
	optional int32 updatetime = 2;
	optional uint64 mentorAudioID = 3;
	optional string mentorWords = 4;
	optional bool isNeedStudent = 5;
	optional bool isOnlineNotify = 6;
	optional bool hasCompleteMentor = 7;
	optional int32 menteeCompleteNum = 8;
	repeated OneMentorRelationInfo2Db relationRoleList = 9;
	repeated OneMentorTaskInfo selfTaskList = 10;
	repeated MentorTaskVar selfTaskVars = 11;
	repeated OneMentorMsg2Db applyMsgList = 12;
	repeated OneMentorMsg2Db beAppliedMsgList = 13;
	optional int32 selfPos = 14;
}

message OneMentorRelationInfo2Db{
	optional uint64 roleID = 1;
	repeated MentorRelationStatusData2Db relationStateList = 2;
	optional int32 pos = 3;
	optional int32 inheritTime = 4;
	optional int32 applyInheritTime = 5;
	optional int32 curStatus = 6;
	optional uint64 applyInheritRoleID = 7;
}

message AddPartnerLiveness{
	optional uint64 roleid = 1;
	optional uint32 actid = 2;
	optional uint32 value = 3;
}

message PartnerSaveData{
	optional uint64 id = 1;
	optional string base = 2;
	optional string liveness = 3;
	optional string shop = 4;
}

message TakePartnerChestArg{
	optional uint32 index = 1;
}

message TakePartnerChestRes{
	optional ErrorCode result = 1;
	repeated uint32 itemid = 2;
	repeated uint32 itemcount = 3;
	optional uint32 takedchest = 4;
}

message RolePartnerData{
	optional uint64 partnerid = 1;
	optional uint32 last_leave_partner_time = 2;
	optional uint32 taked_chest = 3;
	optional uint32 open_shop_time = 4;
	optional uint32 apply_leave_time = 5;
	optional bool chest_redpoint = 6;
	optional uint32 last_update_time = 7;
	optional uint32 compenstateTime = 8;
}

message GetPartnerInfoG2MArg{
	optional uint32 rpcid = 1;
}

message GetPartnerInfoG2MRes{
	optional uint64 partnerid = 1;
	optional uint32 level = 2;
	optional uint32 liveness = 3;
}

message GetPartnerRecordM2GArg{
	optional uint64 partnerid = 1;
	optional uint32 level = 2;
	optional uint32 liveness = 3;
	optional uint32 shop_refresh_time = 4;
	optional uint32 rpcid = 5;
	optional uint32 apply_leave_time = 6;
}

message GetPartnerRecordM2GRes{
	optional uint32 last_leave_time = 1;
	optional bool liveness_redpoint = 2;
	optional uint32 takedchest = 3;
}

message PartnerMemberDetail{
	optional uint64 memberid = 1;
	optional RoleType profession = 2;
	optional string name = 3;
	optional uint32 level = 4;
	optional uint32 ppt = 5;
	repeated uint32 fashion = 6;
	optional OutLook outlook = 7;
	optional uint32 viplevel = 8;
	optional uint32 paymemberid = 9;
	optional bool is_apply_leave = 10;
	optional uint32 left_leave_time = 11;
}

message GetPartnerDetailInfoArg{
}

message GetPartnerDetailInfoRes{
	optional ErrorCode result = 1;
	repeated PartnerMemberDetail members = 2;
	optional bool shop_redpoint = 3;
	optional bool liveness_redpoint = 4;
	optional uint32 degree = 5;
	optional uint32 level = 6;
	optional uint64 partnerid = 7;
}

message GetPartnerLivenessArg{
}

message GetPartnerLivenessRes{
	optional ErrorCode result = 1;
	optional uint32 liveness = 2;
	optional uint32 takedchest = 3;
	repeated PartnerLivenessItem record = 4;
}

message PartnerLivenessItem{
	optional uint64 roleid = 1;
	optional uint32 actid = 2;
	optional uint32 value = 3;
	optional uint32 time = 4;
	optional string name = 5;
}

message UpdatePartnerToClient{
	optional PartnerUpdateType type = 1;
	optional uint64 partid = 2;
	optional uint32 level = 3;
	optional uint32 degree = 4;
	optional uint64 leave_id = 5;
	optional string leave_name = 6;
}

message UpdatePartnerToGS{
	optional uint64 partnerid = 1;
	optional uint32 level = 2;
	optional uint32 degree = 3;
	optional uint32 liveness = 4;
	optional PartnerOperType type = 5;
	optional uint32 apply_leave_time = 6;
}

message LeavePartnerArg{
}

message LeavePartnerRes{
	optional ErrorCode result = 1;
}

message PokerTournamentSignUpCostRes{
	optional ErrorCode result = 1;
	optional uint64 role_id = 2;
}

message GetHeroBattleInfoArg{
}

message GetHeroBattleInfoRes{
	optional ErrorCode errorcode = 1;
	repeated uint32 havehero = 2;
	repeated uint32 weekhero = 3;
	optional uint32 winthisweek = 4;
	optional uint32 totalnum = 5;
	optional uint32 winnum = 6;
	optional uint32 losenum = 7;
	optional uint32 todaygetspcount = 8;
	optional uint32 weekprize = 9;
	optional bool cangetprize = 10;
	repeated uint32 experiencehero = 11;
	repeated uint32 experienceherolefttime = 12;
}

message MakePartnerResult{
	optional ErrorCode result = 1;
	optional uint64 err_roleid = 2;
	optional string err_rolename = 3;
	optional uint64 partnerid = 4;
	optional uint32 level = 5;
	optional uint32 degree = 6;
	repeated uint64 memberid = 7;
}

message CancelLeavePartnerArg{
}

message CancelLeavePartnerRes{
	optional ErrorCode result = 1;
}

message InvFightArg{
	optional InvFightReqType reqtype = 1;
	optional uint64 roleid = 2;
	optional uint64 invid = 3;
	optional bool iscross = 4;
	optional string account = 5;
}

message InvFightRoleBrief{
	optional uint64 invID = 1;
	optional uint32 title = 2;
	optional string name = 3;
	optional uint32 level = 4;
	optional uint32 profession = 5;
	optional uint32 ctime = 6;
	optional bool isplatfriend = 7;
}

message InvFightRes{
	optional ErrorCode errorcode = 1;
	repeated InvFightRoleBrief roles = 2;
	optional bool isPlatFriendOnline = 3;
}

message InvFightPara{
	optional InvFightNotifyType ntftype = 1;
	optional string name = 2;
	optional uint32 count = 3;
}

message CityData{
	optional uint32 id = 1;
	optional uint64 guildid = 2;
	optional string guildname = 3;
	optional uint32 time = 4;
	optional bool isGetToday = 5;
	optional GUILDTERRTYPE type = 6;
}

message ReqAllianceData{
	optional uint64 guildid = 1;
	optional uint32 time = 2;
}

message TerritoryUnit{
	optional uint64 guildId = 1;
	optional uint64 allianceid = 2;
	repeated ReqAllianceData reqAlliacne = 3;
}

message TerritoryData{
	repeated TerritoryUnit territoryunit = 1;
}

message GuildTerritory{
	optional uint32 id = 1;
	optional TerritoryData territorydata = 2;
}

message GuildTerritoryData{
	repeated CityData CityData = 1;
	repeated GuildTerritory ChallList = 2;
	optional uint32 battleBeginTime = 3;
	optional uint32 aucBeginTime = 4;
	optional uint32 declareEndTime = 5;
	optional uint32 warEndTime = 6;
	optional uint32 rewardStartTime = 7;
}

message HorseReConnectRes{
	optional ErrorCode error = 1;
	optional HorseRank rank = 2;
	optional HorseFinal selfarrive = 3;
	optional HorseAnimation otherreach = 4;
	repeated DoodadItemAddNtf item = 5;
}

message HorseReConnectArg{
	optional uint32 param = 1;
}

message HorseCountDownTime{
	optional uint64 time = 1;
}

message MDDelChatData{
	optional uint32 channel = 1;
	optional uint64 storekey = 2;
}

message InvFightUnit{
	optional uint64 roleid = 1;
	optional RoleSmallInfo smallinfo = 2;
}

message InvFightBattleInfo{
	repeated InvFightUnit inunit = 1;
	optional uint64 uID = 2;
}

message DoodadItemAddNtf{
	optional uint32 itemid = 1;
	optional uint32 index = 2;
}

message PhotographEffectArg{
}

message PhotographEffect{
	optional ErrorCode result = 1;
	repeated uint32 photograph_effect = 2;
	optional uint32 charm = 3;
}

message GCFJvDianInfo{
	optional GCFJvDianType type = 1;
	optional string guildname = 2;
}

message GCFGuildBrief{
	optional uint64 guildid = 1;
	optional string guildname = 2;
	optional uint32 guildicon = 3;
	optional uint32 point = 4;
	optional int32 group = 5;
}

message GCFRoleBrief{
	optional uint32 rank = 1;
	optional uint64 roleID = 2;
	optional string rolename = 3;
	optional uint32 killcount = 4;
	optional uint32 occupycount = 5;
	optional uint32 feats = 6;
}

message GCFZhanChBriefInfo{
	optional uint32 mapid = 1;
	optional uint32 multipoint = 2;
	optional uint32 curusercount = 3;
	optional uint32 maxusercount = 4;
	optional bool isopen = 5;
}

message GCFCommonArg{
	optional GCFReqType reqtype = 1;
	optional uint32 mapid = 2;
	optional uint32 territoryid = 3;
}

message GCFCommonRes{
	optional ErrorCode errorcode = 1;
	repeated GCFJvDianInfo jvdians = 2;
	repeated GCFGuildBrief guilds = 3;
	repeated GCFRoleBrief roles = 4;
	optional GCFRoleBrief myinfo = 5;
	repeated ItemBrief rewards = 6;
	optional uint32 territoryid = 7;
	optional GCFGuildBrief winguild = 8;
	optional uint32 lefttime = 9;
	repeated GCFBattleField fields = 10;
}

message GCFReadyInfoArg{
}

message GCFReadyInfoRes{
	repeated GCFZhanChBriefInfo allinfo = 1;
	optional uint32 lefttime = 2;
}

message GCFFightInfoArg{
}

message GCFFightInfoRes{
	repeated GCFGuildBrief guilds = 1;
	repeated GCFJvDianInfo JvDians = 2;
	optional uint32 lefttime = 3;
	optional int32 mygroup = 4;
	optional GCFRoleBrief myinfo = 5;
}

message GCFZhanLingPara{
	optional GCFZhanLingType zltype = 1;
	optional uint64 roleID = 2;
	optional GCFJvDianType jdtype = 3;
}

message GetCharmArg{
	optional uint32 rpc_id = 1;
	optional uint64 role_id = 2;
}

message GetCharmRes{
	optional uint32 charm = 1;
}

message InvFightBattleResult{
	optional PkResultType resulttype = 1;
	optional string opname = 2;
}

message InvFightM2GArg{
	optional uint32 delayid = 1;
	optional uint64 roleid = 2;
	optional InvFightArg c2mArg = 3;
}

message InvFightM2GRes{
	optional uint32 fromLevel = 1;
	optional uint32 toLevel = 2;
	optional ErrorCode errorcode = 3;
}

message PartnerShopData{
	repeated PartnerShopItemData item = 1;
	repeated PartnerShopRecordData record = 2;
	optional uint32 refreshtime = 3;
}

message PartnerShopItemData{
	optional uint32 id = 1;
	optional uint32 buy_count = 2;
}

message PartnerShopRecordData{
	optional uint64 roleid = 1;
	optional uint32 itemid = 2;
	optional uint32 itemcount = 3;
	optional uint32 time = 4;
}

message GetPartnerShopArg{
}

message GetPartnerShopRes{
	repeated PartnerShopItemClient item = 1;
	optional ErrorCode result = 2;
}

message BuyPartnerShopItemArg{
	optional uint32 id = 1;
	optional uint32 count = 2;
}

message BuyPartnerShopItemM2GArg{
	optional uint32 rpcid = 1;
	optional uint32 id = 2;
	optional uint32 count = 3;
}

message BuyPartnerShopItemRes{
	optional ErrorCode result = 1;
}

message BuyPartnerShopItemM2GRes{
	optional ErrorCode result = 1;
}

message PartnerLivenessData{
	repeated PartnerLivenessRecordData record = 1;
	optional uint32 liveness = 2;
}

message PartnerBaseData{
	optional uint32 degree = 1;
	repeated PartnerMemberData member = 2;
}

message PartnerLivenessRecordData{
	optional uint64 roleid = 1;
	optional uint32 actid = 2;
	optional uint32 value = 3;
	optional uint32 time = 4;
}

message InvFightBefESpara{
	repeated RoleSmallInfo roles = 1;
}

message HeroBattleInfo{
	optional uint32 uid = 1;
	repeated PvpRoleInfo roleinfo = 2;
	optional double elopoint1 = 3;
	optional double elopoint2 = 4;
}

message HeroBattleData{
	repeated HeroBattleGroupData groupData = 1;
	optional uint32 occupant = 2;
	optional uint32 lootTeam = 3;
	optional float lootProgress = 4;
	optional bool isInfight = 5;
	repeated uint64 roleInCircle = 6;
}

message HeroBattleGroupData{
	optional uint32 teamid = 1;
	optional uint32 headcount = 2;
	optional uint32 point = 3;
}

message PartnerShopRecordItem{
	optional uint64 roleid = 1;
	optional uint32 itemid = 2;
	optional uint32 itemcount = 3;
	optional uint32 time = 4;
	optional string name = 5;
	optional uint32 titleid = 6;
}

message PartnerShopItemClient{
	optional uint32 id = 1;
	optional uint32 itemid = 2;
	optional uint32 buy_count = 3;
}

message ReqGuildTerrCityInfoArg{
}

message ReqGuildTerrCityInfo{
	repeated CityData cityinfo = 1;
	optional GUILDTERRTYPE type = 2;
	optional uint32 targetid = 3;
	optional uint64 allianceId = 4;
	optional uint32 max_territory_level = 5;
}

message GuildTerrChallInfo{
	optional uint64 guildid = 1;
	optional string guildname = 2;
	optional uint64 allianceid = 3;
	repeated uint64 tryallianceid = 4;
}

message ReqGuildTerrChallInfoArg{
	optional uint32 id = 1;
}

message ReqGuildTerrChallInfoRes{
	repeated GuildTerrChallInfo challinfo = 1;
	optional uint32 cdtime = 2;
}

message GuildTerrAllianceInfo{
	optional string guildname = 1;
	optional uint32 guildlvl = 2;
	optional uint32 guildRoleNum = 3;
	optional uint32 time = 4;
	optional uint64 guildId = 5;
}

message ReqGuildTerrAllianceInfoArg{
}

message ReqGuildTerrAllianceInfoRes{
	optional uint64 allianceid = 1;
	repeated GuildTerrAllianceInfo allianceinfo = 2;
}

message ScenePrepareInfoNtf{
	repeated string unreadyroles = 1;
}

message HorseSwitchData{
	repeated uint64 roleid = 1;
}

message MentorRelationStatusData2Db{
	optional uint32 status = 1;
	optional uint32 time = 2;
	optional uint64 applierID = 3;
	optional uint32 beApplyRoleOnlineTime = 4;
}

message GetPartnerShopRecordArg{
}

message GetPartnerShopRecordRes{
	optional ErrorCode result = 1;
	repeated PartnerShopRecordItem record = 2;
}

message HeroBattleTeamMsg{
	repeated HeroBattleTeamData teamdata = 1;
}

message HeroBattleTeamData{
	optional uint32 teamid = 1;
	optional uint32 headcount = 2;
	optional uint32 point = 3;
}

message HeroBattleSyncData{
	optional uint32 occupant = 1;
	optional uint32 lootTeam = 2;
	optional float lootProgress = 3;
	optional bool isInFight = 4;
}

message HeroBattleInCircle{
	repeated uint64 roleInCircle = 1;
}

message PandoraLotteryArg{
	optional uint32 pandoraid = 1;
	optional bool isOneLottery = 2;
}

message PandoraLotteryRes{
	optional ErrorCode errorcode = 1;
	repeated ItemBrief items = 2;
}

message UnitAppearanceTeam{
	optional uint32 teamid = 1;
	optional bool haspassword = 2;
}

message SaveMentor2DbData{
	optional uint64 roleID = 1;
	optional bytes info = 2;
}

message GCFSynPara{
	optional GCFsynType type = 1;
	optional uint64 roleID = 2;
	optional GCFJvDianType jvdian = 3;
	optional uint32 sceneid = 4;
	optional uint64 uid = 5;
	optional uint32 mapid = 6;
	optional uint32 pmulti = 7;
	optional uint32 killcount = 8;
	optional uint32 continuekill = 9;
}

message AllianceGuildTerrArg{
	optional uint32 id = 1;
}

message AllianceGuildTerrRes{
	optional ErrorCode errorcod = 1;
}

message HeroBattleOverTimeData{
	optional uint64 millisecond = 1;
}

message GCFCreateBattleInfo{
	optional uint64 uid = 1;
	optional bool iswait = 2;
	repeated GCFGuildGroup guilds = 3;
	optional uint32 existtime = 4;
	optional uint32 territoryid = 5;
}

message GCFGuildGroup{
	optional uint64 guildid = 1;
	optional uint32 group = 2;
}

message HeroBattleTeamRoleData{
	optional uint32 team1 = 1;
	repeated HeroBattleTeamMember members1 = 2;
	optional uint32 team2 = 3;
	repeated HeroBattleTeamMember members2 = 4;
}

message MentorBreakApplyInfo{
	optional EMentorRelationPosition pos = 1;
	optional int32 breakTime = 2;
	optional uint64 roleID = 3;
	optional string roleName = 4;
}

message PayParameterInfo{
	optional string openkey = 1;
	optional string sessionId = 2;
	optional string sessionType = 3;
	optional string pf = 4;
	optional string pfKey = 5;
	optional string appid = 6;
}

message Payotherlist{
	optional uint32 ts = 1;
	optional string paramid = 2;
	optional int32 amount = 3;
}

message Payconsumelist{
	optional string billno = 1;
	optional int32 amt = 2;
	optional int32 reason = 3;
	optional int32 subreason = 4;
	repeated ItemBrief item = 5;
	optional int32 status = 6;
	optional int32 ts = 7;
	optional int32 type = 8;
	optional int32 index = 9;
	optional int32 count = 10;
}

message Paysendlist{
	optional string billno = 1;
	optional int32 amt = 2;
	optional int32 reason = 3;
	optional int32 subreason = 4;
	optional int32 ts = 5;
	optional string extparam = 6;
}

message PayAccessInfo{
	optional uint64 roleid = 1;
	optional int32 saveamt = 2;
	optional int32 nosaveamt = 3;
	optional PayotherInfo otherinfo = 4;
	optional PayConsumeInfo consumeinfo = 5;
	optional PaySendInfo sendinfo = 6;
}

message PayotherInfo{
	repeated Payotherlist other = 1;
}

message PaySendInfo{
	repeated Paysendlist send = 1;
}

message PayConsumeInfo{
	repeated Payconsumelist consume = 1;
}

message RecAllianceArg{
	optional uint64 guildid = 1;
}

message RecAllianceRes{
	optional ErrorCode errorcode = 1;
	optional uint64 allianceId = 2;
}

message TryAllianceArg{
	optional uint64 guild = 1;
}

message TryAlliance{
	optional ErrorCode errorcode = 1;
}

message GCFG2CSynPara{
	optional GCFG2CSynType type = 1;
	optional uint64 roleid = 2;
	optional uint32 killcount = 3;
	optional string killname = 4;
	optional string deadname = 5;
	optional uint32 mapid = 6;
	optional uint32 mulpoint = 7;
	optional GCFJvDianInfo jvdian = 8;
	optional uint32 territoryid = 9;
}

message AchieveDbInfo{
	repeated StcAchieveInfo achieveData = 1;
	repeated STC_ACHIEVE_POINT_REWARD achieveAward = 2;
	repeated StcAchieveInfo oldachievement = 3;
}

message AudioAuthKeyArg{
	optional string open_id = 1;
	optional string ip = 2;
}

message AudioAuthKeyRes{
	optional ErrorCode error = 1;
	optional uint32 dwMainSvrId = 2;
	optional uint32 dwMainSvrUrl1 = 3;
	optional uint32 dwMainSvrUrl2 = 4;
	optional uint32 dwSlaveSvrId = 5;
	optional uint32 dwSlaveSvrUrl1 = 6;
	optional uint32 dwSlaveSvrUrl2 = 7;
	optional string szAuthKey = 8;
	optional uint32 dwExpireIn = 9;
}

message AudioTextArg{
	optional string file_id = 1;
}

message AudioTextRes{
	optional ErrorCode error = 1;
	optional string file_text = 2;
}

message ClearGuildTerrAllianceArg{
}

message ClearGuildTerrAllianceRes{
	optional ErrorCode errorcode = 1;
}

message NoticeGuildTerrWar{
	optional bool isbegin = 1;
}

message NoticeGuildTerrall{
	optional uint32 num = 1;
}

message QueryClientIpArg{
	optional uint32 param = 1;
}

message QueryClientIpRes{
	optional string ip = 1;
}

message SavePayAccessArg{
	optional uint64 roleid = 1;
	optional int32 saveamt = 2;
	optional int32 nosaveamt = 3;
	optional string other = 4;
	optional string consume = 5;
	optional string send = 6;
	optional int32 op = 7;
	optional Payconsumelist list = 8;
}

message SavePayAccessDataRes{
	optional ErrorCode result = 1;
}

message GCFBattleField{
	optional uint32 mapid = 1;
	repeated GCFJvDianInfo jvdians = 2;
	optional GCFZhanChBriefInfo zhanchinfo = 3;
}

message SetHeroInHeroBattleArg{
	optional uint32 heroid = 1;
}

message SetHeroInHeroBattleRes{
	optional ErrorCode errorcode = 1;
}

message SkillRecord{
	repeated SkillInfo Skills = 1;
	repeated uint32 SkillSlot = 2;
	optional bool freeresetskill = 3;
	optional uint32 index = 4;
	repeated SkillInfo SkillsTwo = 5;
	repeated uint32 SkillSlotTwo = 6;
}

message SChatRecord{
	optional uint32 lastupdatetime = 1;
	optional uint32 worldchattimes = 2;
}

message SAtlasRecord{
	repeated uint32 atlas = 1;
	repeated atlasdata finishdata = 2;
}

message UpdateStartUpType{
	optional StartUpType type = 1;
}

message TryTeacherInherit{
	optional uint64 guildidOne = 1;
	optional uint64 guildidTwo = 2;
}

message ApolloRoomKey{
	optional uint64 key = 1;
	optional uint64 value = 2;
	optional uint32 retry = 3;
}

message SpActivityTask{
	optional uint32 taskid = 1;
	optional uint32 state = 2;
	optional uint32 progress = 3;
}

message BalanceInfo{
	optional int32 balance = 1;
	optional Paysendlist list = 2;
	optional uint64 roleid = 3;
}

message PayTsslist{
	optional string innerproductid = 1;
	optional string begintim = 2;
	optional string endtime = 3;
	optional string paychan = 4;
	optional int32 paysubchan = 5;
	optional string autopaychan = 6;
	optional int32 autopaysubchan = 7;
	optional int32 grandtotalopendays = 8;
	optional int32 grandtotalpresentdays = 9;
	optional string firstbuytime = 10;
	optional string extend = 11;
}

message PayGetBalanceArg{
	optional int32 balance = 1;
	repeated PayTsslist tsslist = 2;
	optional int32 saveamt = 3;
	optional bool ispay = 4;
	optional string paramid = 5;
	optional uint64 roleid = 6;
	optional uint32 costsum = 7;
}

message PayGetBalanceRes{
	optional ErrorCode result = 1;
	repeated string paracode = 2;
}

message PayconsumeBrief{
	optional uint32 ts = 1;
	optional string billno = 2;
}

message PayConsumeAddGoodsRes{
	optional ErrorCode result = 1;
}

message PayAddDiamondInfo{
	optional uint64 roleid = 1;
	optional Paysendlist data = 2;
}

message PayConsumeAddgoodsArg{
	optional uint64 roleid = 1;
	optional Payconsumelist list = 2;
	optional int32 balance = 3;
}

message PaytssInfo{
	optional int32 begintime = 1;
	optional int32 endtime = 2;
	optional int32 lastGetAwardTime = 3;
}

message PayConsumeDiamondInfo{
	optional uint64 roleid = 1;
	optional Payconsumelist list = 2;
}

message DoodadItemUseNtf{
	optional uint32 buffid = 1;
	optional uint64 roleid = 2;
}

message GuildBonusGetAllData{
	optional uint32 bonusID = 1;
}

message GetGuildBonusLeftArg{
}

message GetGuildBonusLeftRes{
	optional ErrorCode errorCode = 1;
	repeated GuildBonusBriefInfo bonusInfos = 2;
}

message GuildBonusBriefInfo{
	optional uint32 bonusID = 1;
	optional int32 sendTime = 2;
}

message UpdateServerState2Login{
	optional uint32 register_account = 1;
	optional uint32 online_role = 2;
	optional bool write_db = 3;
	optional uint32 serverid = 4;
	repeated uint32 serverids = 5;
}

message UpdateRegisterCount2Ns{
	optional uint32 register_account = 1;
}

message HeroBattleOneGame{
	repeated RoleSmallInfo team1 = 1;
	repeated RoleSmallInfo team2 = 2;
	optional HeroBattleOver over = 3;
	optional uint64 mvpid = 4;
	optional uint32 exploit = 5;
}

message HeroBattleRecord{
	repeated uint32 havehero = 1;
	optional bool cangetprize = 2;
	optional bool alreadygetprize = 3;
	optional uint32 totalnum = 4;
	optional uint32 winnum = 5;
	optional uint32 losenum = 6;
	optional uint32 winthisweek = 7;
	optional uint32 lastupdatetime = 8;
	repeated HeroBattleOneGame gamerecord = 9;
	optional uint32 todayspcount = 10;
	repeated uint32 freeweekhero = 11;
	optional uint32 bigrewardcount = 12;
	optional uint32 weekprize = 13;
	optional double elopoint = 14;
	optional uint32 daytime = 15;
	optional uint32 daytimes = 16;
	repeated uint32 experiencehero = 17;
	repeated uint32 experienceherotime = 18;
	optional uint32 continuewinnum = 19;
	optional uint32 maxkillnum = 20;
}

message SpecialStateNtf{
	optional uint32 state = 1;
	optional uint32 effectmask = 2;
	optional uint64 uid = 3;
}

message ResWarEnemyTime{
	optional uint32 param = 1;
}

message ReconnectScene{
	optional uint32 sceneid = 1;
	optional bool isready = 2;
}

message CrossRoleInfo{
	optional uint64 session = 1;
	optional uint64 roleid = 2;
	optional string name = 3;
}

message GetHeroBattleGameRecordArg{
}

message GetHeroBattleGameRecordRes{
	optional ErrorCode errorcode = 1;
	repeated HeroBattleOneGame games = 2;
}

message NotifyServerConnect{
	optional ServerIdInfo server = 1;
}

message BroadCastG2R{
	optional string data = 1;
	optional BroadCastG2RType type = 2;
}

message BuyHeroInHeroBattleArg{
	optional uint32 heroid = 1;
}

message BuyHeroInHeroBattleRes{
	optional ErrorCode errorcode = 1;
}

message LevelScriptStateData{
	repeated DoorState doorStates = 1;
}

message DoorState{
	optional string name = 1;
	optional bool isOn = 2;
}

message SSceneState{
	optional bool isready = 1;
	optional uint32 runstate = 2;
}

message SceneStateNtf{
	optional SSceneState state = 1;
	optional uint32 rolespecialstate = 2;
}

message QueryRoleStateReq{
	repeated uint64 roleids = 1;
}

message QueryRoleStateAck{
	repeated uint64 roleids = 1;
	repeated uint32 state = 2;
}

message HeroBattleResult{
	optional HeroBattleOver over = 1;
	optional uint64 mvpid = 2;
	optional uint32 mvpheroid = 3;
	optional uint32 teamid = 4;
	repeated ItemBrief dayjoinreward = 5;
	repeated ItemBrief winreward = 6;
	optional uint64 losemvpid = 7;
	optional float kda = 8;
}

message GetHeroBattleWeekRewardArg{
}

message GetHeroBattleWeekRewardRes{
	optional ErrorCode errorcode = 1;
	optional uint32 weekprize = 2;
	optional bool getnextweekprize = 3;
}

message PayConsumeBase{
	optional int32 type = 1;
	optional int32 index = 2;
	optional int32 amt = 3;
	optional int32 reason = 4;
	optional int32 subreason = 5;
	optional int32 count = 6;
}

message IBShopHasBuy{
	optional uint32 goodsid = 1;
	optional uint32 count = 2;
}

message GCFCommonArgM2G{
	optional uint32 delayid = 1;
	optional uint64 sessionid = 2;
	optional GCFCommonArg c2mArg = 3;
}

message GCFCommonResM2G{
	optional ErrorCode errorcode = 1;
}

message PkBattleInfo{
	repeated PkRoleInfo roles = 1;
	optional uint32 robotlookupid = 2;
	repeated uint64 guildladderid = 3;
}

message SaveLeagueTeamDataArg{
	optional DBOperType type = 1;
	optional LeagueTeamSaveData data = 2;
}

message SaveLeagueTeamDataRes{
	optional ErrorCode result = 1;
}

message LeagueTeamSaveData{
	optional uint64 id = 1;
	optional string base = 2;
	optional string battlerecord = 3;
}

message LeagueTeamBaseData{
	optional uint32 create_time = 1;
	optional string name = 2;
	repeated LeagueTeamMemberData member = 3;
	optional uint32 score = 4;
	optional uint32 cross_score = 5;
	optional uint64 creatorid = 6;
}

message LeagueTeamMemberData{
	optional uint64 roleid = 1;
	optional uint32 last_battle_time = 2;
}

message LeagueBattleSeasonData{
	optional uint32 last_update_time = 1;
	optional bool is_season_open = 2;
	optional LeagueTeamState league_teamstate = 3;
	optional uint32 season_num = 4;
	optional uint32 last_season_open_time = 5;
	optional bool report_world = 6;
	optional uint32 last_check_open_time = 7;
}

message GetLeagueBattleInfoRes{
	optional ErrorCode result = 1;
	optional LeagueBattleTimeState today_state = 2;
	optional uint32 timestamp = 3;
	optional uint64 league_teamid = 4;
	optional string league_teamname = 5;
	optional uint32 score = 6;
	optional uint32 battlenum = 7;
	optional uint32 week_battlenum = 8;
	optional float winrate = 9;
	repeated LeagueTeamMemberDetail member = 10;
	optional uint32 matchlefttime = 11;
	optional uint32 rankreward_lefttime = 12;
	optional uint32 crossrankreward_lefttime = 13;
	optional uint32 rank = 14;
	optional LeagueEliType eli_type = 15;
	optional bool is_cross = 16;
}

message UpdateLeagueBattleSeasonInfo{
	optional bool is_open = 1;
	optional bool is_cross = 2;
	optional uint64 league_teamid = 3;
	repeated uint64 league_teammember = 4;
	optional LeagueTeamState league_teamstate = 5;
	optional uint32 season_num = 6;
	optional uint32 matchlefttime = 7;
	optional LeagueBattleTimeState state = 8;
}

message GetLeagueBattleInfoArg{
}

message LeagueTeamDetail{
	optional uint64 league_teamid = 1;
	optional string teamname = 2;
	optional uint32 serverid = 3;
	optional string zonename = 4;
	optional string servername = 5;
	repeated LeagueTeamMemberDetail members = 6;
	optional uint32 score = 7;
}

message LeagueTeamMemberDetail{
	optional RoleOutLookBrief brief = 1;
	optional uint32 pkpoint = 2;
}

message GetLeagueTeamInfoArg{
	optional uint64 league_teamid = 1;
}

message GetLeagueTeamInfoRes{
	optional ErrorCode result = 1;
	optional LeagueTeamDetail team = 2;
}

message SkillInitCoolPara{
}

message NotifyLeagueTeamCreate{
	optional uint64 league_teamid = 1;
	optional string name = 2;
	repeated uint64 members = 3;
}

message NotifyLeagueTeamDissolve{
	optional uint64 leave_roleid = 1;
	optional string leave_rolename = 2;
}

message HeroBattleCanUseHeroData{
	repeated uint32 havehero = 1;
	repeated uint32 freehero = 2;
	repeated uint32 experiencehero = 3;
	optional uint32 leftChooseTime = 4;
}

message HeroBattleTeamMember{
	optional uint64 uid = 1;
	optional uint32 heroid = 2;
	optional string name = 3;
	optional uint32 killnum = 4;
	optional uint32 deathnum = 5;
	optional uint32 assitnum = 6;
}

message GetGardenInfoArg{
	optional uint32 rpc_id = 1;
	optional uint64 role_id = 2;
}

message GetGardenInfoRes{
	optional uint32 cook_level = 1;
}

message PkRoleRec{
	optional uint32 point = 1;
	optional uint32 win = 2;
	optional uint32 lose = 3;
	optional uint32 draw = 4;
	repeated uint32 records = 5;
}

message LeagueBattleRecordData{
	optional uint32 total_num = 1;
	optional uint32 total_winnum = 2;
	optional uint32 total_losenum = 3;
	optional uint32 week_num = 4;
	optional uint32 week_winnum = 5;
	optional uint32 week_losenum = 6;
	optional uint32 max_continuwin = 7;
	optional uint32 max_continuelose = 8;
	optional uint32 continuewin = 9;
	optional uint32 continuelose = 10;
	repeated LeagueBattleOneRecord records = 11;
	optional uint32 cross_num = 12;
	optional uint32 cross_winnum = 13;
	optional uint32 cross_losenum = 14;
	optional uint32 cross_maxconwin = 15;
	optional uint32 cross_maxconlose = 16;
	optional uint32 cross_conwin = 17;
	optional uint32 cross_conlose = 18;
}

message LeaveLeagueTeamArg{
}

message LeaveLeagueTeamRes{
	optional ErrorCode result = 1;
}

message RoleOutLookBrief{
	optional uint64 roleid = 1;
	optional RoleType profession = 2;
	optional string name = 3;
	optional uint32 level = 4;
	optional uint32 ppt = 5;
	repeated uint32 fashion = 6;
	optional OutLook outlook = 7;
	optional uint32 viplevel = 8;
	optional uint32 paymemberid = 9;
}

message atlasdata{
	optional uint32 groupid = 1;
	optional uint32 finishid = 2;
}

message PlatUserAllInfo2Redis{
	optional PlatUserAllInfo userAllInfo = 1;
	repeated PlatFriendGiftBriefInfo sendGifts = 2;
}

message LeagueBattleReqArg{
	optional LeagueBattleReqType type = 1;
}

message LeagueBattleReqRes{
	optional ErrorCode result = 1;
}

message UpdateLeagueTeamState{
	optional LeagueTeamState state = 1;
}

message LeagueBattleStartMatchNtf{
}

message LeagueBattleStopMatchNtf{
}

message ReportDataRecord{
	optional uint32 weeklogindays = 1;
	optional uint32 within20minsdays = 2;
	optional uint32 lastdayonlinetime = 3;
	optional uint32 lastdayupdate = 4;
	optional uint32 lastweekupdate = 5;
	optional uint32 weeknestfasttime = 6;
	optional uint32 weekactivedays = 7;
	optional uint32 weeknestdaytimes = 8;
	repeated WeekReportData wxdata = 9;
	optional uint32 lastrecommondtime = 10;
	optional uint32 abyssdaycount = 11;
	optional uint32 superrisktodaycount = 12;
	optional uint32 buyibshopcount = 13;
	optional uint32 pokercount = 14;
	optional uint32 lastpokertime = 15;
	optional uint32 horsemacthcount = 16;
}

message AtlasUpStarArg{
	optional uint32 groupid = 1;
}

message AtlasUpStarRes{
	optional ErrorCode errorcode = 1;
	optional uint32 groupid = 2;
	optional uint32 star = 3;
}

message LeagueBattleRoleBrief{
	optional uint64 roleid = 1;
	optional string name = 2;
	optional uint32 level = 3;
	optional uint32 serverid = 4;
	optional uint32 profession = 5;
	optional uint32 ppt = 6;
	optional uint32 pkpoint = 7;
	optional string account = 8;
}

message LeagueBattleTeamData{
	optional uint64 league_teamid = 1;
	optional string name = 2;
	optional uint32 serverid = 3;
	optional string servername = 4;
	optional uint32 score = 5;
	optional uint32 rank = 6;
	optional uint32 total_num = 7;
	optional uint32 total_win = 8;
	repeated LeagueBattleRoleBrief members = 9;
}

message LeagueBattleLoadInfoNtf{
	optional LeagueBattleType type = 1;
	optional LeagueBattleTeamData team1 = 2;
	optional LeagueBattleTeamData team2 = 3;
}

message LeagueBattleOneRole{
	optional LeagueBattleRoleBrief basedata = 1;
	optional LeagueBattleRoleState state = 2;
	optional int32 index = 3;
}

message LeagueBattleOneTeam{
	optional uint64 league_teamid = 1;
	optional string name = 2;
	optional uint32 serverid = 3;
	optional uint32 score = 4;
	repeated LeagueBattleOneRole members = 5;
}

message LeagueBattleBaseDataNtf{
	optional LeagueBattleOneTeam team1 = 1;
	optional LeagueBattleOneTeam team2 = 2;
}

message LeagueBattleOneResultNtf{
	optional LeagueBattleRoleBrief winrole = 1;
	optional LeagueBattleRoleBrief loserole = 2;
	optional float winhppercent = 3;
	optional float losehppercent = 4;
}

message LeagueBattleTeamBrief{
	optional uint64 league_teamid = 1;
	optional uint32 serverid = 2;
	optional string name = 3;
}

message LeagueBattleResultNtf{
	optional LeagueBattleType type = 1;
	optional LeagueBattleResultTeam winteam = 2;
	optional LeagueBattleResultTeam loseteam = 3;
}

message LeagueBattleReadyReqArg{
	optional LeagueBattleReadyOper type = 1;
}

message LeagueBattleReadyReqRes{
	optional ErrorCode result = 1;
}

message LeagueBattleInfo{
	optional LeagueBattleTeamData team1 = 1;
	optional LeagueBattleTeamData team2 = 2;
	optional LeagueBattleType type = 3;
	optional uint32 uid = 4;
}

message ItemRandAttr{
	repeated AttributeInfo attrs = 1;
}

message ItemForge{
	repeated AttributeInfo attrs = 1;
	optional AttributeInfo unReplacedAttr = 2;
	repeated uint32 haveAttrs = 3;
}

message ForgeEquipArg{
	optional uint64 uid = 1;
	optional bool isUsedStone = 2;
	optional ForgeOpType type = 3;
}

message ForgeEquipRes{
	optional ErrorCode errorcode = 1;
}

message PushPraise{
	optional CommentType type = 1;
	optional uint32 spriteid = 2;
}

message HeroBattleTipsData{
	optional uint32 id = 1;
}

message SubScribe{
	optional uint32 id = 1;
	optional string title = 2;
	optional bool status = 3;
}

message GetListSubscribeArg{
	optional string token = 1;
}

message GetListSubscribeRes{
	optional ErrorCode result = 1;
	repeated SubScribe list = 2;
	optional bool more = 3;
}

message SetSubscirbeArg{
	repeated uint32 msgid = 1;
	optional int32 msgtype = 2;
	optional string token = 3;
}

message SetSubscribeRes{
	optional ErrorCode result = 1;
}

message LeagueBattleStateNtf{
	optional uint32 lefttime = 1;
	optional LeagueBattleFightState state = 2;
}

message LeagueBattleResultRole{
	optional LeagueBattleRoleBrief basedata = 1;
	optional uint32 killnum = 2;
	optional bool is_up = 3;
}

message LeagueBattleResultTeam{
	optional uint64 league_teamid = 1;
	optional string name = 2;
	optional uint32 serverid = 3;
	optional string servername = 4;
	repeated LeagueBattleResultRole members = 5;
	optional uint32 rank = 6;
	optional uint32 score = 7;
	optional int32 score_change = 8;
	optional uint32 honorpoint = 9;
	optional int32 rank_change = 10;
}

message LeagueBattleMatchTimeoutNtf{
}

message ChangeProfessionArg{
	optional uint32 pro = 1;
}

message ChangeProfessionRes{
	optional ErrorCode errorcode = 1;
}

message CancelRedDot{
	optional uint32 systemid = 1;
}

message MidasExceptionInfo{
	optional ErrorCode result = 1;
}

message LeagueRankData{
	optional uint64 league_teamid = 1;
	optional uint32 serverid = 2;
	optional string servername = 3;
	optional string teamname = 4;
	optional uint32 point = 5;
	optional uint32 winnum = 6;
	optional float winrate = 7;
	optional uint32 continuewin = 8;
	optional uint32 joincount = 9;
}

message LeagueBattleUpdateDataG2M{
	optional uint64 league_teamid = 1;
	optional uint32 sceneid = 2;
	optional bool is_ready_end = 3;
	optional bool is_battle_end = 4;
	optional uint32 score = 5;
	optional LeagueBattleOneRecord record = 6;
}

message LeagueRankUpdateG2MArg{
	optional uint64 win_teamid = 1;
	repeated uint64 league_teamid = 2;
	repeated uint32 point = 3;
	optional uint32 sceneid = 4;
	repeated uint32 total_num = 5;
	repeated uint32 win_num = 6;
}

message LeagueRankUpdateG2MRes{
	optional uint32 allrank = 1;
	repeated uint64 league_teamid = 2;
	repeated uint32 lastrank = 3;
	repeated uint32 currank = 4;
}

message ChangeProfessionMsArg{
	optional uint64 roleid = 1;
	optional uint32 rpcid = 2;
	optional uint32 pro = 3;
}

message ChangeProfessionMsRes{
}

message ReadHiddenRolesArg{
	optional uint32 rpcid = 1;
	optional string account = 2;
	optional uint32 slot = 3;
	optional uint64 roleid = 4;
	optional uint32 serverid = 5;
}

message ReadHiddenRolesRes{
	optional bytes slotrole = 1;
	optional bytes hiddenroles = 2;
	optional uint32 result = 3;
	optional uint64 roleid = 4;
	optional uint32 slot = 5;
}

message HiddenRoles{
	repeated HiddenRole roles = 1;
}

message HiddenRole{
	optional uint32 slot = 1;
	optional uint64 roleid = 2;
	optional bytes rolebrief = 3;
}

message GetHolidayStageInfoArg{
}

message GetHolidayStageInfoRes{
	optional uint32 holidayid = 1;
	optional uint32 sceneid = 2;
	optional uint32 lasttime = 3;
	optional uint32 havetimes = 4;
}

message ServerInfo{
	optional int32 id = 1;
	optional string name = 2;
	optional string zonename = 3;
}

message ServerInfoPara{
	repeated ServerInfo serverinfo = 1;
}

message LeagueBattleOneRecord{
	optional uint64 other_teamid = 1;
	optional string other_teamname = 2;
	optional string servername = 3;
	optional uint32 serverid = 4;
	optional int32 score_change = 5;
	optional PkResultType result = 6;
	optional uint32 time = 7;
	optional LeagueBattleType type = 8;
}

message GetLeagueBattleRecordArg{
}

message GetLeagueBattleRecordRes{
	optional ErrorCode result = 1;
	optional uint32 winnum = 2;
	optional uint32 losenum = 3;
	optional float winrate = 4;
	optional uint32 max_continuewin = 5;
	optional uint32 max_continuelose = 6;
	repeated LeagueBattleOneRecord records = 7;
}

message ChangeProSaveData{
	optional bytes lastslotrole = 1;
	optional bytes hiddenroles = 2;
	optional uint32 lastslot = 3;
}

message ItemSellArg{
	optional uint64 uid = 1;
}

message ItemSellRes{
	optional ErrorCode errorcode = 1;
}

message EnchantTransferArg{
	optional uint64 originuid = 1;
	optional uint64 destuid = 2;
}

message EnchantTransferRes{
	optional ErrorCode errorcode = 1;
}

message LeagueEliminationUpdateData{
	optional uint32 roomid = 1;
	optional uint32 sceneid = 2;
	optional uint32 liveid = 3;
	optional bool is_ready_end = 4;
	optional uint64 win_leagueid = 5;
}

message LBEleTeamData{
	optional uint64 leagueid = 1;
	optional uint32 serverid = 2;
}

message LBEleRoomData{
	optional uint32 roomid = 1;
	optional LBEleTeamData team1 = 2;
	optional LBEleTeamData team2 = 3;
	optional LBEleRoomState state = 4;
	optional uint64 winleagueid = 5;
	optional uint32 liveid = 6;
	optional uint32 sceneid = 7;
	optional uint32 gsline = 8;
	optional bool iscross = 9;
}

message LBEleRoundData{
	optional uint32 round = 1;
	repeated LBEleRoomData rooms = 2;
}

message RoleSystem{
	optional bytes system = 1;
	optional bytes firsttime = 2;
	repeated SysOpenTime opentime = 3;
}

message LBEleTeamInfo{
	optional uint64 leagueid = 1;
	optional string name = 2;
	optional uint32 serverid = 3;
	optional string servername = 4;
	optional string zonename = 5;
}

message LBEleRoomInfo{
	optional uint32 roomid = 1;
	optional LBEleTeamInfo team1 = 2;
	optional LBEleTeamInfo team2 = 3;
	optional LBEleRoomState state = 4;
	optional uint64 winleagueid = 5;
	optional uint32 liveid = 6;
}

message LBEleRoundInfo{
	optional uint32 round = 1;
	repeated LBEleRoomInfo rooms = 2;
}

message LBEleSaveData{
	optional uint32 curround = 1;
	optional uint32 updatetime = 2;
	repeated LBEleRoundData rounds = 3;
	optional LBEleTeamData chamption = 4;
}

message GetLeagueEleInfoArg{
}

message GetLeagueEleInfoRes{
	optional ErrorCode result = 1;
	repeated LBEleRoundInfo rounds = 2;
	optional LeagueTeamDetail chamption = 3;
}

message UpdateLeagueEleRoomStateNtf{
	optional LBEleRoomInfo room = 1;
}

message CloseLeagueEleNtf{
}

message JoinLeagueEleBattleArg{
}

message JoinLeagueEleBattleRes{
	optional ErrorCode result = 1;
}

message guildbossinfo{
	optional uint32 bossindex = 1;
	optional uint32 curbossindex = 2;
	optional double bosshp = 3;
	optional uint32 count = 4;
}

message SynGuildBossHp{
	optional uint32 sceneid = 1;
	optional double delhp = 2;
	optional uint64 guildid = 3;
}

message SynGuildBossDie{
	optional uint64 guildId = 1;
}

message SynGuildBossDoEnd{
}

message AudioInfo{
	optional uint64 uid = 1;
	optional bytes audio = 2;
	optional bytes text = 3;
	optional uint32 time = 4;
}

message AudioList{
	repeated AudioInfo dataList = 1;
}

message SynGuildBossAttr{
	optional uint32 sceneid = 1;
	optional uint64 guildid = 2;
}

message NoticeGuildBossAttr{
	optional uint64 guildid = 1;
	optional uint32 sceneid = 2;
	optional uint32 count = 3;
}

message PkBaseHist{
	optional uint32 win = 1;
	optional uint32 lose = 2;
	optional uint32 draw = 3;
	optional uint32 lastwin = 4;
	optional uint32 lastlose = 5;
	optional uint32 continuewin = 6;
	optional uint32 continuelose = 7;
}

message GuildBossRoleHurt{
	optional uint64 roleid = 1;
	optional double hurt = 2;
}

message LevelChangeNtfMs{
	optional uint64 roleid = 1;
	optional uint32 level = 2;
}

message ControlFunciontInfo{
	optional uint32 systemid = 1;
	optional bool isopen = 2;
}

message RegisterMSToCSDataRes{
	optional ErrorCode error = 1;
	optional uint32 serverID = 2;
}

message PersonalCareerArg{
	optional PersonalCarrerReqType quest_type = 1;
	optional uint64 role_id = 2;
}

message PersonalCareerRes{
	optional ErrorCode result = 1;
	optional PersonalHomePage home_page = 2;
	optional PVPInformation pvp_info = 3;
	repeated bool system_status = 4;
	optional StageTrophy trophy_data = 5;
}

message PersonalHomePage{
	optional uint32 qq_vip = 1;
	optional uint32 paymember_id = 2;
	optional string play_name = 3;
	optional uint32 uid = 4;
	optional string declaration = 5;
	optional string server_name = 6;
	optional uint32 level = 7;
	optional uint32 profession_id = 8;
	optional string guild_name = 9;
	optional double power = 10;
	optional uint32 continue_login_time = 11;
	optional uint32 online_time = 12;
	repeated CareerData carrer_data = 13;
}

message PVPInformation{
	optional PKInformation pk_info = 1;
}

message PersonalCareerTotalInfoArg{
	optional uint32 rpc_id = 1;
	optional uint64 role_id = 2;
	optional PersonalCarrerReqType  quest_type = 3;
}

message PersonalCareerTotalInfoRes{
	optional string server_name = 1;
	optional uint32 continue_login_days = 2;
	repeated CareerData career_data = 3;
	optional uint32 max_score_history = 4;
	optional string all_roles = 5;
	optional string warrior = 6;
	optional string archer = 7;
	optional string minister = 8;
	optional string master = 9;
	optional uint32 pk_rank = 10;
	optional uint32 profession_rank = 11;
}

message ChangeDeclarationArg{
	optional string declaration = 1;
}

message ChangeDeclarationRes{
	optional ErrorCode result = 1;
	optional string declaration = 2;
}

message CareerData{
	optional CarrerDataType type = 1;
	optional uint32 time = 2;
	optional uint32 para1 = 3;
}

message ClickNewNoticeArg{
	optional PlatNotice info = 1;
}

message ClickNewNoticeRes{
	optional ErrorCode result = 1;
}

message GuildAuctItemTime{
	optional uint32 auct_type = 1;
}

message CrossLeagueTeamData{
	optional uint64 id = 1;
	optional uint32 serverid = 2;
	optional string name = 3;
	optional uint32 score = 4;
	repeated uint64 memberids = 5;
	optional uint32 total_num = 6;
	optional uint32 win_num = 7;
	optional uint32 lose_num = 8;
	optional uint32 time = 9;
	optional uint32 continuewin = 10;
	optional uint32 continuelose = 11;
	optional uint32 max_continuewin = 12;
	optional uint32 max_continuelose = 13;
}

message LeagueReportTop2WorldArg{
	repeated CrossLeagueTeamData teams = 1;
}

message LeagueReportTop2WorldRes{
	optional ErrorCode result = 1;
}

message PkMatchStage{
	optional uint32 ctime = 1;
	optional uint32 span = 2;
	optional uint32 robotpercent = 3;
	optional int32 lookupid = 4;
}

message PkMatchInfo{
	optional uint64 roleid = 1;
	optional uint32 timebegin = 2;
	repeated PkMatchStage stage = 3;
	optional PkRoleRec rolerec = 4;
	optional uint32 rolelevel = 5;
}

message PkMatchToWorldPara{
	optional MatchToWorldType type = 1;
	optional PkMatchInfo pkinfo = 2;
	optional PkRoleInfo roleinfo = 3;
	optional uint32 gsline = 4;
	optional uint64 roleid = 5;
	optional uint32 sceneid = 6;
	optional bool isguildladder = 7;
	optional uint32 curtime = 8;
}

message PkMatchToWorldRes{
	optional int32 ret = 1;
}

message SyncCrossLeagueTeam2MS{
	repeated CrossLeagueTeamData teams = 1;
}

message GetRoleSummaryFromMSArg{
	repeated uint64 roleids = 1;
}

message GetRoleSummaryFromMSRes{
	repeated RoleSummaryStored rsus = 1;
}

message SyncRoleSummaryToMS{
	repeated RoleSummaryStored rsus = 1;
}

message ChangeSkillSetArg{
	optional uint32 index = 1;
}

message ChangeSkillSetRes{
	optional ErrorCode errorcode = 1;
	optional SkillRecord record = 2;
}

message LeagueMatchWorldNtf{
	optional MatchToWorldType type = 1;
	optional uint32 serverid = 2;
	optional uint64 ltid = 3;
	optional uint32 teamid = 4;
	optional LeagueBattleTeamData  ltdata = 5;
}

message LeagueMatchWorldResultNtf{
	optional MatchToWorldType type = 1;
	optional uint64 ltid = 2;
	optional uint32 teamid = 3;
	optional uint32 gsline = 4;
	optional uint32 sceneid = 5;
}

message PokerTournamentEndReFundMsg{
}

message CheckNoticeArg{
	optional uint64 roleid = 1;
	repeated PlatNotice notice = 2;
	optional uint32 rpcid = 3;
}

message CheckNoticeRes{
	optional ErrorCode result = 1;
	repeated PlatNotice notice = 2;
}

message ClickNoticeData{
	optional PlatNotice notice = 1;
	optional uint64 roleid = 2;
}

message RegisterMs2FmArg{
	optional uint32 zoneid = 1;
	optional uint32 serverid = 2;
}

message RegisterMs2FmRes{
	optional ErrorCode result = 1;
	optional uint32 fmsvrid = 2;
	optional FMWhiteRoleList whitelist = 3;
	optional LargeRoomRoleParam radiolist = 4;
	optional bool is_master = 5;
}

message HeroBattleWorldMatchData{
	optional uint32 type = 1;
	optional uint32 serverid = 2;
	optional uint64 roleid = 3;
	optional int32 teamid = 4;
	optional double elopoint = 5;
	repeated PvpRoleInfo roleinfo = 6;
}

message HeroWorldRoomData{
	optional uint32 sceneid = 1;
	optional uint32 gsline = 2;
	optional uint32 mapid = 3;
	optional uint64 roleid = 4;
	optional int32 teamid = 5;
}

message GetPayRewardArg{
}

message GetPayRewardRes{
	optional ErrorCode errorcode = 1;
	optional uint32 cdTime = 2;
}

message LeagueCrossEliNtfMs{
	optional LBEleSaveData alldata = 1;
	optional LBEleRoomData oneroom = 2;
	optional LBEleTeamData chamption = 3;
}

message LeagueCrossReward{
	optional LeagueCrossRankReward rankreward = 1;
	optional LeagueCrossEliReward elireward = 2;
}

message LeagueCrossRankReward{
	optional uint64 ltid = 1;
	optional uint32 rank = 2;
}

message LeagueCrossEliReward{
	optional uint64 ltid = 1;
	optional uint32 round = 2;
	optional bool iswin = 3;
	optional uint64 enemy_teamid = 4;
}

message DeleteCrossRoleSummary{
}

message OpenSystemNtfMsData{
	optional uint64 roleID = 1;
	optional Systems systems = 2;
}

message PKInformation{
	optional PkRecord pk_record = 1;
	optional uint32 pk_rank = 2;
	optional uint32 pk_profession_rank = 3;
	optional uint32 pk_max_score = 4;
	optional string pk_all_roles_rate = 5;
	optional string pk_warrior_rate = 6;
	optional string pk_archer_rate = 7;
	optional string pk_minister_rate = 8;
	optional string pk_master_rate = 9;
}

message NoticeGuildTerrEnd{
}

message TerrData{
	optional uint32 id = 1;
	optional uint64 guildid = 2;
	optional uint32 icon = 3;
	optional string name = 4;
}

message ReqGuildTerrIntellInfoArg{
}

message ReqGuildTerrIntellInfoRes{
	repeated TerrData intellInfo = 1;
}

message NoticeGuildTerrBattleWin{
	optional uint32 id = 1;
	optional uint64 guildid = 2;
}

message NoticeGuildTerrBigIcon{
	optional bool isnow = 1;
}

message CloseHintNtf{
	optional uint32 systemid = 1;
}

message MentorTaskVar{
	optional uint32 taskType = 1;
	optional uint64 var = 2;
	optional uint32 value = 3;
	optional int32 updatetime = 4;
}

message GetMulActOpenInfoArg{
	optional uint32 rpcid = 1;
}

message GetMulActOpenInfoRes{
	optional ErrorCode result = 1;
	optional uint32 last_bonus_time = 2;
	optional bool guildcardopen = 3;
	optional MulActivityTimeState guildcard_openstate = 4;
	optional bool is_all_check_bonus_taked = 5;
}

message GetRoleSummaryFromWorld{
	repeated uint64 roleids = 1;
}

message HeroRankData{
	optional double eloPoint = 1;
	optional uint32 totalNum = 2;
	optional uint32 winNum = 3;
	optional uint32 continueWinNum = 4;
	optional uint32 maxKillNum = 5;
}

message FmReloadInfo{
	optional FMWhiteRoleList whitelist = 1;
	optional LargeRoomRoleParam radiolist = 2;
	repeated string kickroles = 3;
}

message WorldMasterInfo{
	optional uint32 serverid = 1;
	optional uint32 gs_num = 2;
}

message RouterListenInfo{
	optional ListenAddress ms = 1;
	optional ListenAddress gate = 2;
	optional ListenAddress gs = 3;
	optional ListenAddress ctrl = 4;
	optional ListenAddress db = 5;
}

message AccountLogout{
	optional string account = 1;
	optional uint32 serverid = 2;
}

message BroadCastG2TData{
	optional string data = 1;
	repeated uint64 sessionList = 2;
}

message CountDownNtf{
	optional uint32 time = 1;
}

message MilitaryRecord{
	optional uint32 military_rank = 1;
	optional uint32 military_rank_his = 2;
	optional uint32 military_exploit = 3;
	optional uint32 military_exploit_his = 4;
	optional uint32 last_update_time = 5;
	repeated uint32 achieve_rank = 6;
}

message MilitaryRankData{
	optional uint32 military_exploit = 1;
	optional uint32 military_rank = 2;
	optional uint32 total_num = 3;
}

message MilitaryRankChangeArg{
	optional uint64 role_id = 1;
	optional uint32 military_rank = 2;
}

message GetMilitaryRankArg{
	optional uint64 role_id = 1;
}

message GetMilitaryRankRes{
	optional uint64 role_id = 1;
	optional uint32 military_rank = 2;
}

message OutLookMilitaryRank{
	optional uint32 military_rank = 1;
}

message PayFriendItemArg{
	optional PayParameterInfo payparam = 1;
	optional uint32 goodsid = 2;
	optional uint32 count = 3;
	optional uint64 toroleid = 4;
	optional string text = 5;
}

message PayFriendItemRes{
	optional ErrorCode ret = 1;
	optional string token = 2;
	optional string url_param = 3;
	optional string billno = 4;
}

message GiftIbItem{
	optional string openid = 1;
	optional string name = 2;
	optional ItemBrief item = 3;
	optional string text = 4;
	optional string orderid = 5;
}

message AllGiftIBItem{
	repeated GiftIbItem gift = 1;
}

message GiftIBBackInfo{
	optional string openid = 1;
	optional string name = 2;
}

message GiftIbItemInfo{
	optional uint64 roleid = 1;
	optional string openid = 2;
	optional string name = 3;
	optional uint32 time = 4;
	optional string text = 5;
	optional ItemBrief item = 6;
	optional GiftIbItemState giftstate = 7;
}

message GiftIbItem2DB{
	optional string name = 1;
	optional string openid = 2;
	repeated GiftIbItemDetail gifts = 3;
}

message IBGiftHistItem{
	optional string name = 1;
	optional ItemBrief item = 2;
	optional uint32 time = 3;
}

message IBGiftHistAllItem{
	repeated IBGiftHistItem allitem = 1;
}

message IBGiftHistAllItemArg{
	optional uint32 type = 1;
}

message IBGiftHistAllItemRes{
	optional ErrorCode errorcode = 1;
	optional IBGiftHistAllItem gift = 2;
}

message IBGiftHistRecord{
	optional IBGiftHistAllItem allitem = 1;
	optional uint32 type = 2;
}

message MysqlConnectLostData{
	optional string msg = 1;
}

message SyncActivityEnd2MSArg{
	optional uint32 actID = 1;
	repeated SpActivityData2MS spActivityData = 2;
}

message SyncActivityEnd2MSRes{
	optional ErrorCode error = 1;
}

message ItemComposeArg{
	optional string uid = 1;
}

message ItemComposeRes{
	optional ErrorCode errorcode = 1;
}

message MsSaveDBEndArg{
}

message MsSaveDBEndRes{
}

message QueryRouterArg{
	optional uint32 serverid = 1;
}

message QueryRouterRes{
	optional RouterListenInfo info = 1;
	optional uint32 line = 2;
}

message FmMasterInfo{
	optional uint32 serverid = 1;
}

message ShareRandomGiftData{
	optional uint32 id = 1;
}

message NoneData{
}

message GetBackFlowSpActTimeArg{
}

message GetBackFlowSpActTimeRes{
	optional ErrorCode errorcode = 1;
	optional string lefttime = 2;
}

message BackFlowShopData{
	optional uint32 lastUpdateTime = 1;
	repeated BackFlowShopGood goods = 2;
	optional uint32 freshCount = 3;
}

message PunishAccount{
	optional uint32 type = 1;
	optional uint32 starttime = 2;
	optional uint32 endtime = 3;
	optional string reason = 4;
	optional string account = 5;
}

message BuyPayAileenStatus{
	optional uint64 roleid = 1;
	optional string paramid = 2;
}

message PunishAccountBrief{
	optional string account = 1;
}

message BanAccount{
	optional string openid = 1;
	optional uint32 endtime = 2;
	optional string reason = 3;
}

message PlatBanAccount{
	optional string reason = 1;
	optional uint32 endtime = 2;
}

message WeekReportData{
	optional WeekReportDataType type = 1;
	optional int32 joincount = 2;
	optional uint32 lastjointime = 3;
}

message InvFightCross2CSReqArg{
	optional InvFightReqType reqtype = 1;
	optional uint32 delayID = 2;
	optional InvFightCrossMsg invMsg = 3;
}

message InvFightCross2CSReqRes{
	optional ErrorCode error = 1;
	optional InvFightCrossMsg  invMsg = 2;
}

message InvFightCross2MSReqArg{
	optional InvFightReqType reqtype = 1;
	optional InvFightCrossMsg invMsg = 2;
	optional uint32 delayID = 3;
}

message InvFightCross2MSReqRes{
	optional ErrorCode error = 1;
	optional InvFightCrossMsg  invMsg = 2;
}

message CreateCrossBattleSceneArg{
	optional uint32 mapID = 1;
	repeated CreateCrossBattleSceneData createInfos = 2;
	optional InvFightBefESpara smallInfo = 3;
}

message CreateCrossBattleSceneRes{
	optional ErrorCode error = 1;
}

message CreateCrossBattleSceneData{
	optional uint64 roleid = 1;
	optional uint32 serverid = 2;
}

message NotifyEnterCrossBattle2MSArg{
	optional uint32 gsline = 1;
	optional uint32 sceneID = 2;
	repeated uint64 roleIDs = 3;
}

message NotifyEnterCrossBattle2MSRes{
	optional ErrorCode error = 1;
}

message ModifyArg{
	optional string name = 1;
}

message ModifyRes{
	optional ErrorCode error = 1;
}

message WorldBossGuildAddAttrArg{
	optional uint32 count = 1;
}

message WorldBossGuildAddAttrRes{
	optional ErrorCode errorcode = 1;
}

message WorldBossGuildAddAttrGsArg{
	optional uint32 count = 1;
	optional uint32 delayid = 2;
	optional uint64 roleid = 3;
	optional uint64 guildid = 4;
}

message WorldBossGuildAddAttrGsRes{
	optional ErrorCode errorcode = 1;
}

message WorldBossGuildAddAttrSyncGs{
	optional uint32 count = 1;
	optional uint64 guildid = 2;
	optional uint64 roleid = 3;
}

message WorldBossGuildAddAttrSyncClient{
	optional uint32 count = 1;
}

message BanAccountList{
	repeated BanAccount acclist = 1;
}

message BanAccontSimple{
	optional string acc = 1;
}

message FirstPassStageInfo2Client{
	optional int32 firstPassID = 1;
	optional bool isGetReward = 2;
	optional int32 myRank = 3;
	required int32 totalRank = 4;
	optional bool hasCommended = 5;
}

message ArgentaActivityArg{
	optional uint32 type = 1;
	optional uint32 id = 2;
}

message ArgentaActivityRes{
	optional ErrorCode errorcode = 1;
	optional uint32 leftTime = 2;
	optional uint32 level = 3;
	repeated uint32 getRewardIDs = 4;
}

message GetPlatformShareChestArg{
	optional uint32 box_id = 1;
	optional string open_key = 2;
	optional uint32 share_type = 3;
}

message GetPlatformShareChestRes{
	optional ErrorCode errorcode = 1;
	optional string boxid = 2;
	optional uint32 act_id = 3;
	optional string url = 4;
}

message ModifyFwArg{
	optional uint64 roleid = 1;
	optional string name = 2;
	optional uint32 rpcid = 3;
}

message ModifyFwRes{
	optional ErrorCode error = 1;
}

message ArgentaData{
	optional uint32 argentaStartTime = 1;
	optional uint32 level = 2;
	optional uint32 lastUpdateTime = 3;
	repeated uint32 getDailyRewards = 4;
}

message ArgentaPreData{
	optional uint32 lastUpdateTime = 1;
	repeated uint32 activityPoint = 2;
	repeated uint32 finishNestCount = 3;
}

message M2SUserStatusSyncArg{
	optional string openid = 1;
	optional uint32 serverid = 2;
	optional bool isonline = 3;
}

message M2SUserStatusSyncData{
	optional string openid = 1;
	optional uint32 serverid = 2;
	optional bool isonline = 3;
	optional uint64 roleid = 4;
}

message S2MInvFightMsgNtfData{
	repeated InvFightCrossMsg invMsgs = 1;
}

message InvFightCrossMsg{
	optional uint64 fromid = 1;
	optional uint32 fromsrverid = 2;
	optional uint32 toserverid = 3;
	optional string fromAccount = 4;
	optional string toaccount = 5;
	optional uint64 toid = 6;
	optional uint64 invid = 7;
	optional InvFightBefESpara smallinfo = 8;
	optional uint32 time = 9;
}

message AccountRole{
	optional string account = 1;
	optional uint64 roleid = 2;
}

message InvFightCrossNtfData{
	optional uint64 roleID = 1;
	optional uint32 sceneID = 2;
	optional uint32 gsLine = 3;
}

message EnterSceneFromMsData{
	optional uint64 roleID = 1;
	optional uint32 sceneID = 2;
	optional uint32 gsLine = 3;
	optional uint32 mapID = 4;
	optional bool isCross = 5;
}

message UpdateGlobalValue{
	optional uint32 id = 1;
	optional GlobalDragonInfo dragoninfo = 2;
	optional GlobalLoginActivityInfo loginactivity = 3;
	optional GlobalCompeteDragonInfo competeDragonInfo = 4;
}

message QueryRolesummaryArg{
	optional uint64 roleid = 1;
}

message BroadCastGlobalValue{
	optional uint32 id = 1;
	optional string value = 2;
}

message GlobalDragonInfo{
	repeated uint32 sceneid = 1;
	repeated uint32 timestamp = 2;
	repeated GlobalDragonWeakInfo weakInfos = 3;
}

message SkillCDInfo{
	required string skillName = 1;
	required float remainingCD = 2;
}

message LoginActivityStatus{
	optional bool state = 1;
}

message LoginActivityArg{
	optional uint32 param = 1;
}

message LoginActivityRes{
	repeated ItemBrief items = 1;
	optional ErrorCode errcode = 2;
}

message QueryRolesummaryRes{
	optional RoleSummaryStored data = 1;
	optional ErrorCode errorcode = 2;
}

message GlobalLoginActivityInfo{
	optional uint32 worldlv = 1;
}

message QueryGardenInfoArg{
	optional uint64 role_id = 1;
}

message GetGrowthFundTimeArg{
}

message GetGrowthFundTimeRes{
	optional uint32 lefttime = 1;
	optional ErrorCode err = 2;
}

message QueryGardenInfoRes{
	optional ErrorCode result = 1;
	optional GardenInfo garden_info = 2;
}

message GiftIbItemArg{
	optional uint64 roleid = 1;
	repeated PayGiftIbItem allitem = 2;
}

message GiftIbItemRes{
	optional ErrorCode error = 1;
}

message GiftIbItemDetail{
	optional string orderid = 1;
	optional uint32 time = 2;
	optional GiftIbItem gift = 3;
}

message AllGiftIBItemDetail{
	repeated GiftIbItemDetail item = 1;
}

message IBGiftOrder{
	optional string orderid = 1;
	optional uint32 time = 2;
}

message PayBuyGoodsFail{
	optional string token = 1;
}

message UpPayFriednItemArg{
	optional PayParameterInfo payparam = 1;
	optional string goodsid = 2;
	optional uint32 count = 3;
	optional string name = 4;
	optional string desc = 5;
	optional uint64 toroleid = 6;
	optional string text = 7;
}

message UpPayFriendItemArg{
	optional PayParameterInfo payparam = 1;
	optional string goodsid = 2;
	optional uint32 itemid = 3;
	optional uint32 count = 4;
	optional string name = 5;
	optional string desc = 6;
	optional uint64 fromroleid = 7;
	optional uint64 toroleid = 8;
	optional string text = 9;
	optional uint32 price = 10;
	optional uint32 rpcid = 11;
}

message UpPayFriendItemRes{
	optional ErrorCode errorcode = 1;
	optional string token = 2;
	optional string url_param = 3;
	optional string billno = 4;
}

message IBGiftTips{
	optional string orderid = 1;
}

message PayGiftIbItem{
	optional string billno = 1;
	optional uint64 fromroleid = 2;
	optional uint64 toroleid = 3;
	optional string goodsid = 4;
	optional uint32 count = 5;
	optional uint32 ts = 6;
	optional uint32 status = 7;
	optional string text = 8;
	optional uint32 itemid = 9;
	optional string toopenid = 10;
	optional string fromopenid = 11;
	optional string name = 12;
	optional uint32 paydegree = 13;
	optional GiftIbShipStatus shipstatus = 14;
}

message SavePayIbItemNtf{
	optional MysqlOpType op = 1;
	optional PayGiftIbItem data = 2;
}

message ArenaStarHistData{
	optional uint32 rankOneNum = 1;
	optional uint32 rankTenNum = 2;
	repeated RankOnce rankRecent = 3;
}

message RankOnce{
	optional uint32 season = 1;
	optional uint32 rank = 2;
}

message ArenaStarAllData{
	optional ArenaStarHistData historydata = 1;
	optional int32 notice = 2;
}

message ArenaStarTypeData{
	optional ArenaStarType type = 1;
	optional ArenaStarAllData alldata = 2;
}

message ArenaStarRoleData{
	optional uint64 roleid = 1;
	repeated ArenaStarTypeData typedata = 2;
}

message ArenaStarDataSaveArg{
	repeated ArenaStarRoleData roledata = 1;
}

message ArenaStarDataSaveRes{
}

message ArenaStarReqArg{
	optional ArenaStarReqType reqtype = 1;
	optional uint64 roleid = 2;
	optional ArenaStarType zantype = 3;
}

message ArenaStarReqRes{
	optional ErrorCode errorcode = 1;
	repeated ArenaStarTopRoleData toproledata = 2;
	optional uint32 seasonbegintime = 3;
	optional uint32 seasonendtime = 4;
	optional uint32 season_num = 5;
}

message ArenaStarPara{
	repeated ArenaStarType newdata = 1;
}

message PkRankData{
	optional uint64 roleid = 1;
	optional uint32 point = 2;
	optional PkRankExtraData ExtraData = 3;
}

message PkRankExtraData{
	optional uint32 joincount = 1;
	optional float winrate = 2;
	optional uint32 continuewin = 3;
}

message ArenaStarTopRoleData{
	optional ArenaStarHistData historydata = 1;
	optional RoleOutLookBrief outlook = 2;
	optional uint32 rank = 3;
	optional uint32 season = 4;
}

message SkyTeamMemberData{
	optional uint64 roleid = 1;
}

message SkyTeamSaveData{
	optional uint64 id = 1;
	optional string base = 2;
	optional string record = 3;
}

message SkyTeamBaseData{
	optional uint32 create_time = 1;
	optional string name = 2;
	repeated SkyTeamMemberData member = 3;
	optional uint32 score = 4;
	optional uint64 creatorid = 5;
}

message SkyTeamData2DBArg{
	optional DBOperType type = 1;
	optional SkyTeamSaveData data = 2;
}

message SkyTeamData2DBRes{
	optional ErrorCode result = 1;
}

message ASSeaonTime{
	optional uint32 season = 1;
	optional uint32 endtime = 2;
}

message ASSeasonGlobalData{
	repeated ASTypeSeasonTime typedata = 1;
}

message ASTypeSeasonTime{
	optional ArenaStarType type = 1;
	repeated ASSeaonTime seasontime = 2;
}

message NotifySkyTeamCreate{
	optional uint64 sky_teamid = 1;
	optional string name = 2;
}

message LeaveSkyTeamArg{
}

message LeaveSkyTeamRes{
	optional ErrorCode result = 1;
}

message SkyTeamRecordData{
	optional uint32 total_num = 1;
	optional uint32 total_winnum = 2;
	optional uint32 total_losenum = 3;
	optional uint32 max_continuewin = 4;
	optional uint32 max_continuelose = 5;
	optional uint32 continuewin = 6;
	optional uint32 continuelose = 7;
	optional uint32 today_num = 8;
	repeated SkyCraftBattleRecord records = 9;
}

message SkyCraftMatchReq{
	optional SkyCraftMatchReqTpe type = 1;
}

message SkyCraftMatchRes{
	optional ErrorCode result = 1;
}

message SkyCraftMatchNtf{
	optional SkyCraftMatchNtfType type = 1;
}

message SkyCraftTeamData{
	optional uint64 stid = 1;
	optional string name = 2;
	optional uint32 score = 3;
	optional uint32 rank = 4;
	optional uint32 total_num = 5;
	optional uint32 win_num = 6;
	repeated SkyCraftRoleBrief members = 7;
}

message CustombattleRoleSystem{
	repeated CustomBattleRole system = 1;
}

message SkyCraftRoleBrief{
	optional uint64 roleid = 1;
	optional string name = 2;
	optional uint32 level = 3;
	optional uint32 profession = 4;
	optional uint32 ppt = 5;
	optional uint32 pkpoint = 6;
}

message SkyCraftInfo{
	optional SkyCraftType type = 1;
	optional uint32 uid = 2;
	optional SCEliRoundType round = 3;
	optional SkyCraftTeamData team1 = 4;
	optional SkyCraftTeamData team2 = 5;
}

message CustomBattleOpArg{
	optional CustomBattleOp op = 1;
	optional uint64 uid = 2;
	optional CustomBattleConfig config = 3;
	optional string password = 4;
	optional string token = 5;
	optional bool querycross = 6;
	optional string name = 7;
}

message CustomBattleOpRes{
	optional ErrorCode errorcode = 1;
	optional CustomBattleClientInfo info = 2;
}

message CustomBattleGsOpArg{
	optional CustomBattleOp op = 1;
	optional uint64 roleid = 2;
	repeated ItemBrief itemcost = 3;
	optional uint32 delayid = 4;
	optional bool issystem = 5;
	optional uint64 uid = 6;
	optional CustomBattleConfig config = 7;
}

message CustomBattleGsOpRes{
	optional ErrorCode errorcode = 1;
}

message CustomBattleWorldOpArg{
	optional CustomBattleOp op = 1;
	optional uint64 uid = 2;
	optional uint64 roleid = 3;
	optional string rolename = 4;
	optional uint32 delayid = 5;
	optional uint32 serverid = 6;
	optional CustomBattleConfig config = 7;
	optional string password = 8;
	optional string token = 9;
	optional CustomBattleMatchInfo matchinfo = 10;
	optional string battlename = 11;
	optional bool isgmjoin = 12;
	optional bool querycross = 13;
	optional uint32 level = 14;
}

message CustomBattleWorldOpRes{
	optional ErrorCode errorcode = 1;
	optional CustomBattleClientInfo info = 2;
}

message SCEliRoomInfo{
	optional uint32 roomid = 1;
	optional SCEliTeamInfo team1 = 2;
	optional SCEliTeamInfo team2 = 3;
	optional LBEleRoomState state = 4;
	optional uint64 win_stid = 5;
	optional uint32 liveid = 6;
}

message SCEliTeamInfo{
	optional uint64 stid = 1;
	optional string name = 2;
}

message SCEliRoundInfo{
	optional SCEliRoundType round = 1;
	repeated SCEliRoomInfo rooms = 2;
}

message SCEliRoomData{
	optional uint32 roomid = 1;
	optional uint64 team1 = 2;
	optional uint64 team2 = 3;
	optional uint64 win_stid = 4;
	optional LBEleRoomState state = 5;
	optional uint32 liveid = 6;
	optional uint32 sceneid = 7;
	optional uint32 gsline = 8;
}

message SkyCraftEliRoomNtf{
	optional SCEliRoomInfo room = 1;
}

message SCEliSaveData{
	optional SCEliRoundType curround = 1;
	optional uint32 updatetime = 2;
	repeated SCEliRoundData rounds = 3;
	optional uint64 champion = 4;
}

message SCEliRoundData{
	optional SCEliRoundType round = 1;
	repeated SCEliRoomData rooms = 2;
}

message SkyCraftRankData{
	optional uint64 stid = 1;
	optional string teamname = 2;
	optional uint32 point = 3;
	optional uint32 winnum = 4;
	optional float winrate = 5;
}

message GetSkyCraftInfoArg{
}

message GetSkyCraftInfoRes{
	optional ErrorCode result = 1;
	optional uint64 stid = 2;
	optional string name = 3;
	optional uint32 total_num = 4;
	optional float winrate = 5;
	optional uint32 rank = 6;
	repeated SkyTeamMemberInfo members = 7;
	optional uint32 today_num = 8;
}

message SkyTeamMemberInfo{
	optional RoleOutLookBrief brief = 1;
}

message GetSkyCraftRecordArg{
}

message GetSkyCraftRecordRes{
	optional ErrorCode result = 1;
	optional uint32 winnum = 2;
	optional uint32 losenum = 3;
	optional float winrate = 4;
	optional uint32 max_continuewin = 5;
	optional uint32 max_continuelose = 6;
	repeated SkyCraftBattleRecord records = 7;
}

message SkyTeamDetail{
	optional uint64 stid = 1;
	optional string name = 2;
	repeated SkyTeamMemberInfo members = 3;
	optional uint32 score = 4;
}

message GetSkyCraftEliInfoArg{
}

message GetSkyCraftEliInfoRes{
	optional ErrorCode result = 1;
	repeated SCEliRoundInfo rounds = 2;
	optional SkyTeamDetail chamption = 3;
}

message GetSkyCraftTeamInfoArg{
	optional uint64 stid = 1;
}

message GetSkyCraftTeamInfoRes{
	optional ErrorCode result = 1;
	optional SkyTeamDetail team = 2;
}

message CloseSkyCraftEliNtf{
}

message SkyCraftBattleRecord{
	optional uint64 other_teamid = 1;
	optional string other_name = 2;
	optional int32 score_change = 3;
	optional PkResultType result = 4;
	optional uint32 time = 5;
	optional SkyCraftType type = 6;
}

message SaveGiftIbHist{
	optional uint64 roleid = 1;
	repeated IBGiftHistItem self = 2;
	repeated IBGiftHistItem target = 3;
}

message CustomBattleConfig{
	optional uint32 tagtype = 1;
	optional uint32 configid = 2;
	optional uint32 scalemask = 3;
	optional string name = 4;
	optional string desc = 5;
	optional bool haspassword = 6;
	optional string password = 7;
	optional bool isfair = 8;
	optional uint32 battletime = 9;
	optional uint32 canjoincount = 10;
	optional uint64 creator = 11;
	optional string creatorname = 12;
	optional CustomBattleState state = 13;
	optional uint32 readytime = 14;
	optional bool issystem = 15;
	optional uint32 hasjoincount = 16;
	optional string token = 17;
	optional uint32 battletimeconf = 18;
	optional uint32 tagmask = 19;
	optional CustomBattleType fighttype = 20;
}

message SaveIbGiftRecordArg{
	optional uint64 roleid = 1;
	optional IBGiftHistAllItem giftself = 2;
	optional IBGiftHistAllItem gifttarget = 3;
	optional SaveHistIbGiftEnum opertype = 4;
}

message SaveIbGiftRecordRes{
	optional ErrorCode error = 1;
}

message CustomBattleData{
	optional uint64 uid = 1;
	optional CustomBattleConfig config = 2;
	repeated CustomBattleRank rank = 3;
}

message ActivateFashionCharm{
	optional uint32 suit_id = 1;
	optional uint32 activate_count = 2;
	repeated uint32 items = 3;
}

message CustomBattleDataRole{
	optional CustomBattleData data = 1;
	optional CustomBattleRole role = 2;
}

message ActivateFashionArg{
	optional uint32 suit_id = 1;
}

message ActivateFashionRes{
	optional ErrorCode result = 1;
	optional uint32 active_count = 2;
}

message ChangeSceneWorldReq{
	repeated uint64 roleid = 1;
	optional uint32 sceneuid = 2;
	optional uint32 type = 3;
	optional uint32 gsline = 4;
}

message OutLookDisplayFashion{
	repeated uint32 display_fashions = 1;
	optional uint32 hair_color_id = 2;
	optional uint32 special_effects_id = 3;
}

message CustomBattleParam{
	optional CustomBattleMatchInfo infoa = 1;
	optional CustomBattleMatchInfo infob = 2;
}

message PayDegreeArg{
	optional uint64 roleid = 1;
	optional uint32 rpcid = 2;
}

message PayDegreeRes{
	optional uint32 degree = 1;
	optional ErrorCode error = 2;
}

message CustomBattleQueryInfo{
	repeated CustomBattleDataRole battlesystem = 1;
	repeated CustomBattleDataRole battlerandom = 2;
	optional CustomBattleDataRole battleone = 3;
}

message CustomBattleRank{
	optional uint64 roleid = 1;
	optional string name = 2;
	optional uint32 point = 3;
	optional uint32 rewardcd = 4;
	optional bool istakenreward = 5;
	optional uint32 timestamp = 6;
}

message GetGuildCamPartyRandItemRes{
	optional ErrorCode result = 1;
	repeated ItemBrief random_items = 2;
}

message GetGuildCamPartyRandItemArg{
	optional uint32 query_type = 1;
	optional uint32 npc_id = 2;
	optional uint32 sprite_id = 3;
}

message TalkGuildCampSpriteRes{
	repeated ItemBrief items = 1;
}

message TalkGuildCampSpriteArg{
	optional uint64 enemy_id = 1;
}

message GuildCampPartyReqExchangeRes{
	optional ErrorCode result = 1;
}

message GuildCampPartyReqExchangeReq{
	optional uint64 role_id = 1;
}

message guildcamppartyNotifyNtf{
	optional uint32 notify_type = 1;
	repeated GuildCampSpriteInfo sprite_list = 2;
	repeated uint32 lottery_list = 3;
	optional uint32 left_time = 4;
}

message GetGuildCampPartyExchangeInfoArg{
}

message GetGuildCampPartyExchangeInfoRes{
	optional ErrorCode result = 1;
	repeated PartyExchangeItemInfo infos = 2;
}

message PartyExchangeItemInfo{
	optional uint64 role_id = 1;
	optional uint32 time = 2;
	optional uint32 level = 3;
	optional string name = 4;
	optional uint32 profession_id = 5;
}

message IBGiftIcon{
	optional bool status = 1;
}

message CustomBattleClientInfo{
	optional CustomBattleQueryInfo queryinfo = 1;
	optional CustomBattleDataRole createinfo = 2;
	optional CustomBattleDataRole joininfo = 3;
	optional uint32 rank = 4;
	repeated CustomBattleDataRole searchinfo = 5;
}

message GuildCampExchangeOperateArg{
	optional GuildCampItemOperate operate_type = 1;
	optional uint64 item_uid = 2;
	optional bool confirm = 3;
	optional uint64 audio_id = 4;
	optional uint32 audio_time = 5;
	optional string chat_text = 6;
}

message GuildCampExchangeOperateRes{
	optional ErrorCode result = 1;
}

message EffectData{
	optional uint32 effectID = 1;
	repeated EffectMultiParams multiParams = 2;
	optional bool isWork = 3;
}

message CustomBattleRole{
	optional uint64 uid = 1;
	optional uint32 configid = 2;
	optional uint32 lose = 3;
	optional uint32 win = 4;
	optional uint32 point = 5;
	optional uint32 rank = 6;
	optional CustomBattleRoleState state = 7;
	optional uint32 rewardcd = 8;
	repeated uint32 records = 9;
	optional uint32 draw = 10;
}

message GetGuildCampPartyRewardArg{
	optional uint32 reward_id = 1;
}

message GetGuildCampPartyRewardRes{
	optional ErrorCode result = 1;
	repeated ItemBrief items = 2;
}

message GiftIbReqGoodsArg{
	optional string orderid = 1;
}

message GiftIbReqGoodsRes{
	optional ErrorCode error = 1;
}

message GiftIbReqGSGoodsArg{
	optional PayGiftIbItem item = 1;
	optional uint32 rpcid = 2;
}

message GiftIbReqGSGoodsRes{
	optional ErrorCode error = 1;
}

message AbsPartyInfo{
	repeated AbsPartyBase aby = 1;
	optional uint32 abyssmailtime = 2;
}

message AbsPartyBase{
	optional uint32 type = 1;
	optional uint32 diff = 2;
}

message ArtifactComposeArg{
	optional ArtifactComposeType type = 1;
	repeated uint64 uids = 2;
	optional uint32 level = 3;
	repeated uint32 qualitys = 4;
}

message ArtifactComposeRes{
	optional ErrorCode errorcode = 1;
	optional uint64 newuid = 2;
	repeated uint64 newuids = 3;
}

message UpdateCustomBattleOnDB{
	optional CustomBattleData data = 1;
	optional bool isdelete = 2;
	optional uint64 uid = 3;
}

message UpdateCustomBattleRoleOnDB{
	optional uint64 roleid = 1;
	optional CustombattleRoleSystem system = 2;
	optional CustomBattleRole custom = 3;
}

message AbsEnterInfo{
	optional uint32 id = 1;
}

message ReportCustomBattleResult{
	optional uint64 roleid = 1;
	optional bool iswin = 2;
	optional int32 point = 3;
	optional CustomBattleMatchBattleInfo battle = 4;
}

message AbsEnterSceneArg{
	optional uint32 id = 1;
}

message AbsEnterSceneRes{
	optional ErrorCode error = 1;
}

message GuildCampPartyTradeNotifyArg{
	optional GuildCampPartyTradeType notify_type = 1;
	optional uint64 lauch_role_id = 2;
	optional uint32 lauch_item_id = 3;
	optional uint64 lauch_item_uid = 4;
	optional bool lauch_confirm = 5;
	optional uint64 target_role_id = 6;
	optional uint32 target_item_id = 7;
	optional uint64 target_item_uid = 8;
	optional bool target_confirm = 9;
	optional uint32 lauch_count = 10;
	optional bool open_trade = 11;
	optional string lauch_name = 12;
	optional uint32 lauch_profession = 13;
	optional string target_name = 14;
	optional uint32 target_profession = 15;
	optional GuildCampChatInfo lauch_chat_info = 16;
	optional GuildCampChatInfo target_chat_info = 17;
}

message ReplyPartyExchangeItemOptArg{
	optional uint32 operate_type = 1;
	optional uint64 lauch_role_id = 2;
}

message CustomBattleCheckValidArg{
	optional uint64 uid = 1;
	optional uint64 roleid = 2;
}

message ReplyPartyExchangeItemOptRes{
	optional ErrorCode result = 1;
	optional uint32 lauch_role_id = 2;
	optional uint32 lauch_item_id = 3;
	optional bool lauch_status = 4;
	optional uint32 target_role_id = 5;
	optional uint32 target_item_id = 6;
	optional uint32 target_status = 7;
}

message CustomBattleCheckValidRes{
	optional ErrorCode errorcode = 1;
	optional bool canreward = 2;
}

message EnchantActiveAttributeArg{
	optional uint64 uid = 1;
	optional uint32 attrID = 2;
}

message EnchantActiveAttributeRes{
	optional ErrorCode errorcode = 1;
}

message CustomBattleDelMatch{
	optional uint64 roleid = 1;
}

message GuildCampSpriteInfo{
	optional uint32 sprite_id = 1;
	optional int32 position = 2;
	optional string summoner = 3;
}

message BuyExtraSkillEmblemSlotArg{
}

message BuyExtraSkillEmblemSlotRes{
	optional ErrorCode result = 1;
	optional uint32 extraSkillEmblemSlot = 2;
}

message ChangeLiveVisibleArg{
	optional bool visible = 1;
}

message ChangeLiveVisibleRes{
	optional ErrorCode error = 1;
}

message CustomBattleResultMsArg{
	repeated uint64 roleida = 1;
	repeated uint64 roleidb = 2;
	repeated uint64 rolewin = 3;
	optional uint64 uid = 4;
	optional CustomBattleType type = 5;
	optional uint32 sceneuid = 6;
}

message CustomBattleResultMsRes{
	repeated uint64 roleida = 1;
	repeated int32 pointa = 2;
	repeated int32 ranka = 3;
	repeated uint64 roleidb = 4;
	repeated int32 pointb = 5;
	repeated int32 rankb = 6;
	repeated int32 allpointa = 7;
	repeated int32 allpointb = 8;
}

message TransCustomBattleMatch{
	optional CustomBattleMatchInfo info = 1;
}

message DisplayAddItemArg{
	optional uint32 add_item_id = 1;
	optional uint32 del_item_id = 2;
}

message UpdateDisplayItems{
	repeated uint32 display_items = 1;
	optional uint32 hair_color_id = 2;
	optional uint32 special_effects_id = 3;
}

message ReportBadPlayerArg{
	optional uint64 roleid = 1;
	optional uint32 scenetype = 2;
	repeated uint32 reason = 3;
}

message ReportBadPlayerRes{
	optional ErrorCode result = 1;
}

message RegisterMs2HArg{
	optional uint32 serverid = 1;
}

message RegisterMs2HRes{
	optional int32 ret = 1;
}

message TeamCrossRequest2CS{
}

message TeamCrossRequest2CSArg{
	optional TeamOperate  type = 1;
	optional TeamInvite inviteInfo = 2;
}

message TeamCrossRequest2CSRes{
	optional ErrorCode error = 1;
}

message TeamTransData{
	optional int32 type = 1;
	optional uint32 delayid = 2;
	optional uint64 roleid = 3;
	optional uint32 serverid = 4;
	optional int32 teamid = 5;
	optional TeamChanged changedata = 6;
	optional TeamOPArg c2mOpArg = 7;
	repeated TeamMemberChangeData memberchangedata = 8;
	optional TeamSynAll teamalldata = 9;
	optional LeaveTeamType leavereason = 10;
	optional FetchTeamListArg teamlistroarg = 11;
	optional TeamInvite teaminvdata = 12;
	optional string account = 13;
	optional TeamFullDataNtf teamfulldata = 14;
	optional uint32 gsline = 15;
	optional TeamSynPara synpara = 16;
	optional KMatchCommonArg matcharg = 17;
	repeated TeamSynExtraData tsynextradata = 18;
	optional int32 SpecialType = 19;
	optional ChatInfo chatinfo = 20;
	optional TeamStartBattleArg startbattlearg = 21;
	optional int32 teamtype = 22;
	optional KMatchUnit kmatchunit = 23;
	optional uint32 para32 = 24;
	optional StartBattleFailedRes startbattlefaileddata = 25;
	optional uint32 diamondcount = 26;
}

message TeamTransRes{
	optional TeamOPRes c2mOpRes = 1;
	optional FetchTeamListRes teamlistres = 2;
	optional TeamMember memberbrief = 3;
	optional TeamSynExtraData teamsynextradata = 4;
	optional TeamInvite invdata = 5;
	optional KMatchCommonRes matchres = 6;
	optional KMatchRole matchroledata = 7;
	repeated uint64 roles = 8;
	optional uint32 expid = 9;
}

message TeamMemberChangeData{
	optional uint64 roleid = 1;
	optional int32 expid = 2;
	optional TeamSynExtraData extradata = 3;
}

message TeamRequestPlatFreindM2SArg{
	optional int32 delayID = 1;
	optional TeamInvite teamInviteInfo = 2;
	optional TeamRequestPlatFriendDestInfo destInfo = 3;
}

message TeamRequestPlatFreindM2SRes{
	optional ErrorCode error = 1;
}

message TeamRequestPlatFreindS2MArg{
	optional int32 delayID = 1;
	optional TeamInvite teamInviteInfo = 2;
	optional TeamRequestPlatFriendDestInfo destInfo = 3;
	optional uint32 serverID = 4;
}

message TeamRequestPlatFreindS2MRes{
	optional ErrorCode error = 1;
}

message TeamRequestPlatFreindConfirmData{
	optional TeamInvite teamInviteInfo = 1;
	optional TeamRequestPlatFriendDestInfo destInfo = 2;
}

message TeamRequestPlatFriendDestInfo{
	optional string openID = 1;
	optional uint64 roleID = 2;
}

message TeamRequestPlatFreind2ClientData{
	optional bool userOffline = 1;
	optional string openID = 2;
}

message KMatchCommonArg{
	optional KMatchType type = 1;
	optional KMatchOp op = 2;
	optional bool isteam = 3;
}

message KMatchCommonRes{
	optional ErrorCode errorcode = 1;
	optional string problem_name = 2;
	optional uint32 endtime = 3;
}

message KMatchRole{
	optional uint64 roleid = 1;
	optional uint32 serverid = 2;
	optional PvpRoleInfo pvpinfo = 3;
	optional RoleSmallInfo rolebrief = 4;
	optional PkRoleRec pkrec = 5;
	repeated PkMatchStage pkmatchstage = 6;
	optional double eloPoint = 7;
	optional KMatchExp expdata = 8;
	optional uint32 mapid = 9;
}

message KMatchUnit{
	optional uint32 serverid = 1;
	optional uint64 roleid = 2;
	optional int32 teamid = 3;
	repeated KMatchRole roles = 4;
	optional uint64 param = 5;
}

message KMatchTransArg{
	optional KMatchCommonArg matcharg = 1;
	optional KMatchUnit kunit = 2;
	optional uint64 uniqueIndex = 3;
}

message KMatchedPara{
	optional KMatchType type = 1;
	optional KMatchUnit kunit = 2;
	optional uint32 sceneid = 3;
	optional uint32 gsline = 4;
	optional uint32 mapid = 5;
}

message ReportBadPlayerData{
	optional uint64 report_roleid = 1;
	optional uint32 scenetype = 2;
	repeated uint32 reason = 3;
	optional uint32 time = 4;
	optional int32 score = 5;
}

message ReportBadPlayer2Ms{
	optional uint64 roleid = 1;
	optional uint64 report_roleid = 2;
	optional uint32 scenetype = 3;
	optional uint32 score = 4;
	optional string report_openid = 5;
	optional uint32 group = 6;
	optional uint32 report_group = 7;
	repeated uint32 reason = 8;
	optional bool ismvp = 9;
}

message GetGuildPartyReceiveInfoArg{
}

message GetGuildPartyReceiveInfoRes{
	optional ErrorCode result = 1;
	repeated MapIntItem  receives = 2;
}

message ServerIdInfo{
	optional uint32 serverid = 1;
	repeated uint32 serverids = 2;
}

message CustomBattleMatchInfo{
	optional CustomBattleMatchRoleInfo role = 1;
	optional CustomBattleMatchBattleInfo battle = 2;
}

message CustomBattleMatchRoleInfo{
	optional uint64 roleid = 1;
	optional uint32 profession = 2;
	optional string rolename = 3;
	optional uint32 serverid = 4;
	optional uint32 win = 5;
	optional uint32 lose = 6;
	optional uint32 draw = 7;
	repeated uint32 records = 8;
	optional uint32 timestamp = 9;
	repeated PkMatchStage stages = 10;
	optional uint32 point = 11;
}

message CustomBattleMatchBattleInfo{
	optional uint64 battleuid = 1;
	optional uint32 matchid = 2;
	optional bool issystem = 3;
	optional bool isfair = 4;
	optional uint32 type = 5;
}

message BagExpandData{
	optional BagType type = 1;
	optional uint32 num = 2;
	optional uint32 count = 3;
}

message KMatchFightData{
	optional KMatchType type = 1;
	repeated KMatchRole roles = 2;
	repeated KMatchUnit units = 3;
	optional uint64 uid = 4;
	optional int32 param = 5;
}

message ReturnSmeltStoneArg{
	optional uint64 uid = 1;
}

message ReturnSmeltStoneRes{
	optional ErrorCode errorcode = 1;
}

message KMatchCommonArgM2G{
	optional KMatchCommonArg c2mArg = 1;
	optional uint32 delayid = 2;
	optional uint64 roleid = 3;
}

message KMatchCommonResM2G{
	optional KMatchCommonRes c2mRes = 1;
	repeated KMatchRole roledata = 2;
}

message CustomBattleResult{
	optional PkResultType result = 1;
	optional CustomBattleType type = 2;
	optional int32 point = 3;
	optional int32 rank = 4;
	optional uint32 fightgroup = 5;
	optional bool ismvp = 6;
}

message CustomBattleLoadingNtf{
	repeated CustomBattleMatchRoleInfo roleinfos = 1;
	optional CustomBattleType type = 2;
}

message RoleReportData{
	repeated RoleSceneReportData data = 1;
	optional uint32 updatetime = 2;
}

message UpdateRoleReportDataArg{
	optional DBOperType type = 1;
	optional uint64 roleid = 2;
	optional RoleReportData data = 3;
}

message UpdateRoleReportDataRes{
	optional ErrorCode result = 1;
}

message PkRecordSubInfo{
	optional uint32 point = 1;
	optional uint32 rewardcount = 2;
	optional PkBaseHist seasondata = 3;
	repeated PkOneRec recs = 4;
}

message PkOneRec{
	optional PkResultType ret = 1;
	repeated PvpRoleBrief myside = 2;
	repeated PvpRoleBrief opside = 3;
	optional int32 cpoint = 4;
}

message CustomBattleGMNotify{
	optional bool isgmcreate = 1;
	optional bool isgmjoin = 2;
}

message EffectMultiParams{
	optional uint32 IDType = 1;
	optional uint32 ID = 2;
	repeated int32 effectParams = 3;
}

message RoleSceneReportData{
	optional uint32 scenetype = 1;
	repeated ReportBadPlayerData data = 2;
	optional uint32 banendtime = 3;
	optional uint32 reportnum = 4;
}

message PandoraDrop{
	optional uint32 pandoraDropID = 1;
	optional uint32 betterDropTimes = 2;
	optional uint32 noUsedBestDropTimes = 3;
	optional uint32 nextBetterDropTimes = 4;
	optional uint32 noUsedNextBestDropTimes = 5;
	repeated uint32 bestDropTimes = 6;
	repeated uint32 nextBestDropTimes = 7;
}

message TarjaInfo{
	optional uint64 role = 1;
	optional uint32 time = 2;
}

message TarjaBrief{
	optional uint32 time = 1;
}

message SceneTeamResultPara{
	optional int32 teamid = 1;
	optional bool iswin = 2;
}

message TeamCostPara{
	optional uint64 roleid = 1;
}

message RegisterTs2WorldArg{
}

message RegisterTs2WorldRes{
	optional bool ismaster = 1;
}

message W2TMasterInfo{
}

message PkUpdateSynPara{
	optional uint64 roleid = 1;
	optional uint32 ctime = 2;
}

message PlatFriendServer{
	optional string openid = 1;
	optional int32 serverid = 2;
	optional string rolename = 3;
	optional int32 level = 4;
}

message RegisterAudioToCenterArg{
	optional uint32 zoneid = 1;
	optional uint32 serverid = 2;
}

message RegisterAudioToCenterRes{
	optional ErrorCode result = 1;
}

message PlatformShareResult{
	optional uint32 last_update_time = 1;
	repeated MapIntItem firstpass_share_list = 2;
	optional uint32 weekly_share_number = 3;
	optional bool weekly_award = 4;
	optional bool disappear_redpoint = 5;
	repeated uint32 have_notify_scene = 6;
	optional uint64 consume_dragoncoins_now = 7;
	optional uint64 consume_dragoncoins_before_1 = 8;
	optional uint64 consume_dragoncoins_before_2 = 9;
	optional uint64 consume_dragoncoins_before_3 = 10;
	optional uint64 consume_dragoncoins_before_4 = 11;
	optional uint64 consume_dragoncoins_before_5 = 12;
	optional uint64 consume_dragoncoins_before_6 = 13;
	optional uint64 consume_dragoncoins_before_7 = 14;
	optional uint32 last_update_consume = 15;
}

message PlatformShareAwardPara{
	optional uint32 share_scene_id = 1;
	optional uint32 weekly_share_number = 2;
	optional bool weekly_award = 3;
	optional bool disappear_redpoint = 4;
}

message NotifyPlatShareResultArg{
	optional uint32 scene_id = 1;
	optional bool redpoint_disappear = 2;
}

message GetPlatShareAwardArg{
	optional uint32 scene_id = 1;
}

message GetPlatShareAwardRes{
	optional ErrorCode result = 1;
}

message WeekEnd4v4Data{
	optional uint32 indexWeekEnd = 1;
	optional uint32 activityID = 2;
	optional uint32 count = 3;
}

message WeekEnd4v4BattleAllRoleData{
	repeated WeekEnd4v4BattleRoleData roleData = 1;
}

message WeekEnd4v4BattleRoleData{
	optional uint64 roleid = 1;
	optional uint32 redblue = 2;
	optional uint32 score = 3;
	optional uint32 killCount = 4;
	optional uint32 bekilledCount = 5;
	optional uint32 timeSeconds = 6;
	optional string rolename = 7;
	optional uint32 profession = 8;
	optional uint32 rolelevel = 9;
	optional uint32 rank = 10;
	optional bool isline = 11;
}

message WeekEnd4v4GetInfoArg{
}

message WeekEnd4v4GetInfoRes{
	optional ErrorCode errorcode = 1;
	optional uint32 thisActivityID = 2;
	optional uint32 nextActivityID = 3;
	optional uint32 joinCount = 4;
}

message MobaBattleInfo{
	optional uint32 uid = 1;
	repeated PvpRoleInfo roleinfo = 2;
	optional double elopoint1 = 3;
	optional double elopoint2 = 4;
}

message GetFlowerActivityRewardArg{
}

message GetFlowerActivityRewardRes{
	optional ErrorCode errorcode = 1;
}

message FlowerActivityData{
	optional bool gotReward = 1;
	optional int32 activityID = 2;
	optional int32 activityEndTime = 3;
	optional int32 updateTime = 4;
	repeated MapIntItem activityFlower = 5;
}

message SceneMobaOpArg{
	optional MobaOp op = 1;
	optional uint32 param = 2;
}

message SceneMobaOpRes{
	optional ErrorCode errorcode = 1;
	optional uint32 nowparam = 2;
}

message SpActivityData2MS{
	optional uint32 actID = 1;
	optional uint32 startTime = 2;
	optional uint32 endTime = 3;
	optional uint32 actStage = 4;
	optional uint32 minlevel = 5;
}

message KMatchExp{
	optional int32 expid = 1;
	optional uint32 rolecount = 2;
	optional string name = 3;
}

message HeroKillNotifyData{
	optional HeroKillUnit killer = 1;
	optional HeroKillUnit dead = 2;
	repeated HeroKillUnit assists = 3;
	optional uint32 multiKill = 4;
	optional bool isFirstBlood = 5;
}

message HeroKillUnit{
	optional HeroKillUnitType type = 1;
	optional uint32 id = 2;
	optional uint32 teamid = 3;
	optional uint32 continueCounts = 4;
}

message MobaRoleData{
	optional uint64 uid = 1;
	optional string name = 2;
	optional double exp = 3;
	optional uint32 level = 4;
	optional uint32 upgradeNum = 5;
	optional uint32 heroid = 6;
	optional uint32 killNum = 7;
	optional uint32 deathNum = 8;
	optional uint32 assistNum = 9;
	optional uint32 attackLevel = 10;
	optional uint32 defenseLevel = 11;
	optional uint32 reviveTime = 12;
}

message MobaBattleTeamRoleData{
	optional uint32 team1 = 1;
	repeated MobaRoleData datalist1 = 2;
	optional uint32 team2 = 3;
	repeated MobaRoleData datalist2 = 4;
}

message RegisterMs2NsArg{
}

message RegisterMs2NsRes{
}

message MobaRoleChangeData{
	repeated MobaRoleData changeRole = 1;
}

message MobaBattleTeamData{
	optional uint32 teamid = 1;
	optional uint32 grouplevel = 2;
	optional uint32 headcount = 3;
}

message MobaBattleTeamMsg{
	repeated MobaBattleTeamData teamdata = 1;
}

message TransSkillNotfiy{
	repeated uint32 skillhash = 1;
	repeated uint32 skilllevel = 2;
	optional bool isincreasing = 3;
}

message ActivateHairColor{
	optional uint32 hair_id = 1;
	repeated uint32 hair_color_id = 2;
}

message EntityTargetData{
	optional uint64 entityUID = 1;
	optional uint64 targetUID = 2;
}

message LoginExtraData{
	optional bool is_backflow_server = 1;
	optional uint32 backflow_level = 2;
}

message MobaSignalBroadcastData{
	optional uint32 type = 1;
	optional uint64 uid = 2;
	optional uint32 posxz = 3;
}

message MobaSignalingRes{
	optional ErrorCode errorcode = 1;
}

message MobaSignalingArg{
	optional uint32 type = 1;
}

message MobaBattleResult{
	optional uint64 mvpid = 1;
	optional uint64 losemvpid = 2;
	optional uint64 damagemaxid = 3;
	optional uint64 behitdamagemaxid = 4;
}

message MobaBattleRoleResult{
	optional bool isWin = 1;
	optional uint32 heroid = 2;
	optional float kda = 3;
	optional bool isescape = 4;
	repeated ItemBrief winreward = 5;
}

message ActivateHairColorArg{
	optional uint32 hair_id = 1;
	optional uint32 hair_color_id = 2;
}

message ActivateHairColorRes{
	optional ErrorCode result = 1;
	optional uint32 hair_id = 2;
	repeated uint32 hair_colorid_list = 3;
}

message TryTeacherInheritNewArg{
	optional uint64 role_one = 1;
	optional uint64 role_two = 2;
	optional uint32 rpc_id = 3;
}

message TryTeacherInheritNewRes{
	optional ErrorCode result = 1;
}

message DHRArg{
	optional DHRReqOp op = 1;
	optional int32 id = 2;
}

message DHRRes{
	optional ErrorCode errorcode = 1;
	repeated DHRewrad2State rewstate = 2;
	optional uint32 helpcount = 3;
	optional bool wanthelp = 4;
}

message DHRewrad2State{
	optional int32 id = 1;
	optional DHRState state = 2;
}

message WeekEnd4v4TeamResult{
	optional uint32 teamSeconds = 1;
	optional uint32 redTeamScore = 2;
	optional uint32 blueTeamScore = 3;
	repeated uint64 hasRewardsID = 4;
}

message MobaBattleOneGameRole{
	optional uint64 roleid = 1;
	optional string name = 2;
	optional uint32 heroid = 3;
	optional uint32 killcount = 4;
	optional uint32 deathcount = 5;
	optional uint32 assistcount = 6;
	optional uint32 multikillcount = 7;
	optional float kda = 8;
	optional bool isescape = 9;
}

message MobaBattleOneGame{
	repeated MobaBattleOneGameRole team1 = 1;
	repeated MobaBattleOneGameRole team2 = 2;
	optional uint32 tag = 3;
	optional uint32 date = 4;
	optional uint32 timeSpan = 5;
	optional uint32 winteamid = 6;
	optional uint64 mvpid = 7;
	optional uint64 losemvpid = 8;
	optional uint64 damagemaxid = 9;
	optional uint64 behitdamagemaxid = 10;
}

message MobaBattleRoleRecord{
	optional double elopoint = 1;
	optional uint32 tagcount = 2;
	repeated MobaBattleOneGame gamerecord = 3;
	optional uint32 totalnum = 4;
	optional uint32 winnum = 5;
	optional uint32 lastupdatetime = 6;
	optional uint32 winthisweek = 7;
	optional uint32 weekprize = 8;
	optional uint32 todaynum = 9;
	optional uint32 realtotalnum = 10;
	optional uint32 realwinnum = 11;
}

message GetMobaBattleGameRecordArg{
	optional uint32 tag = 1;
}

message GetMobaBattleGameRecordRes{
	optional MobaBattleOneGame record = 1;
}

message GetMobaBattleBriefRecordArg{
}

message GetMobaBattleBriefRecordRes{
	optional uint32 totalnum = 1;
	optional uint32 winnum = 2;
	repeated MobaBattleOneGameBrief brief = 3;
}

message MobaBattleOneGameBrief{
	optional uint32 tag = 1;
	optional uint32 date = 2;
	optional uint32 heroid = 3;
	optional bool iswin = 4;
	optional bool isescape = 5;
	optional bool ismvp = 6;
	optional bool islosemvp = 7;
}

message PetOperationOtherArg{
	optional PetOtherOp op = 1;
	optional uint64 otherroleid = 2;
}

message PetOperationOtherRes{
	optional ErrorCode errorcode = 1;
}

message PetInviteInfo{
	optional uint64 roleid = 1;
	optional uint64 petuid = 2;
	optional uint32 petconfigid = 3;
	optional string rolename = 4;
	optional uint32 profession = 5;
	optional uint32 ppt = 6;
	optional uint32 petppt = 7;
}

message PetInviteNtf{
	optional PetInviteInfo info = 1;
	optional uint32 allcount = 2;
}

message AddMobaBattleRecordData{
	optional MobaBattleOneGame game = 1;
	optional double elopoint1 = 2;
	optional double elopoint2 = 3;
	optional string transTag = 4;
}

message QueryMobaRoleRecordRes{
	optional ErrorCode errorcode = 1;
	optional MobaBattleRoleRecord record = 2;
}

message QueryMobaRoleRecordArg{
	optional uint64 roleid = 1;
}

message SaveMobaRoleRecordData{
	optional uint64 roleid = 1;
	optional MobaBattleRoleRecord record = 2;
}

message LoginReconnectInfo{
	optional uint32 scenetemplateid = 1;
	optional uint32 scenetime = 2;
}

message LoginReconnectReqArg{
	optional bool reconnect = 1;
}

message LoginReconnectReqRes{
	optional ErrorCode result = 1;
}

message ReplaceSessionArg{
	optional uint32 rpcid = 1;
	optional uint64 newsession = 2;
	optional uint64 oldsession = 3;
}

message ReplaceSessionRes{
	optional ErrorCode result = 1;
}

message MobaMiniMapData{
	repeated uint32 canSeePosIndex = 1;
}

message SessionChangeData{
	optional uint64 oldsession = 1;
	optional uint64 newsession = 2;
	optional uint64 roleid = 3;
}

message NotifyRoleLoginReconnect2GsArg{
	optional uint32 rpcid = 1;
	optional uint64 oldsession = 2;
	optional uint64 newsession = 3;
	optional uint64 roleid = 4;
	optional ClientInfo cinfo = 5;
	optional uint32 sceneid = 6;
	optional uint32 mapid = 7;
}

message NotifyRoleLoginReconnect2GsRes{
	optional ErrorCode result = 1;
}

message LoginReconnectEnterSceneData{
	optional UnitAppearance selfAppearance = 1;
	optional DeathInfo deathinfo = 2;
	optional bool isautofight = 3;
}

message ClientSessionChangeG2M{
	optional uint64 roleid = 1;
	optional uint64 oldsession = 2;
	optional uint64 newsession = 3;
	optional ClientInfo cinfo = 4;
}

message RoleLoginReconnectNtf{
	optional uint64 roleid = 1;
}

message MobaAddExpData{
	optional double addexp = 1;
	optional uint32 posxz = 2;
}

message EnterBMReadySceneArg{
	optional int32 param = 1;
}

message EnterBMReadySceneRes{
	optional ErrorCode error = 1;
	optional uint32 group = 2;
}

message BMReadySceneInfo{
	optional uint32 group = 1;
}

message BMFightSceneInfo{
	optional uint32 games = 1;
	optional uint32 groupsvr = 2;
	optional uint32 battleid = 3;
	repeated BMRoleEnter roles = 4;
}

message BMCrossNtfData{
	optional uint32 sceneid = 1;
	optional uint32 gsline = 2;
	optional uint32 group = 3;
	optional uint32 mapid = 4;
}

message BMReadyTime{
	optional uint32 time = 1;
}

message BMRoleEnter{
	optional uint64 roleid = 1;
	optional string name = 2;
	optional uint32 sceneid = 3;
	optional uint32 gsline = 4;
	optional uint32 level = 5;
	optional uint32 score = 6;
}

message BMEnterSvrInfo{
	optional uint32 svrid = 1;
	optional BMRoleEnter roles = 2;
	optional uint32 optype = 3;
}

message MayhemRankInfo{
	optional uint64 roleid = 1;
	optional uint32 point = 2;
	optional uint32 killcount = 3;
	optional uint32 time = 4;
	optional uint32 serverid = 5;
	optional string name = 6;
	optional string svrname = 7;
	optional uint32 pro = 8;
}

message QueryMayhemRankArg{
	optional int32 count = 1;
}

message QueryMayhemRankRes{
	optional ErrorCode err = 1;
	optional int32 selfrank = 2;
	repeated MayhemRankInfo rank = 3;
	optional bool infight = 4;
	optional MayhemRankInfo selfinfo = 5;
	optional uint32 gamezoneid = 6;
}

message QueryMayhemRank2kArg{
	optional uint32 rpcid = 1;
	optional uint32 serverid = 2;
	optional uint64 roleid = 3;
	optional int32 count = 4;
}

message MayhemRankList{
	repeated MayhemRankInfo rank = 1;
}

message EnterBMFightScene{
	optional uint32 group = 1;
	optional uint32 battleidx = 2;
	optional uint32 sceneid = 3;
	optional uint32 gsline = 4;
	repeated BMRoleEnter roles = 5;
	optional uint32 mapid = 6;
}

message MayhemAward{
	optional uint64 roleid = 1;
	optional uint32 point = 2;
	optional uint32 rank = 3;
	repeated ItemBrief pointaward = 4;
	repeated ItemBrief rankaward = 5;
	repeated ItemBrief joinaward = 6;
}

message MayhemAwardList{
	repeated MayhemAward item = 1;
}

message BMRoleFightInfo{
	optional uint64 roleid = 1;
	optional uint32 score = 2;
	optional uint32 killer = 3;
	optional uint32 deadcount = 4;
	optional uint32 time = 5;
	optional uint32 job = 6;
	optional uint32 level = 7;
}

message BMSceneFightInfo{
	optional uint32 battleidx = 1;
	optional uint32 svrgroup = 2;
	optional uint32 sceneid = 3;
	optional BMRoleFightInfo roles = 4;
}

message BMFightTime{
	optional uint32 type = 1;
	optional uint32 time = 2;
}

message BMRoleSceneSync{
	optional uint32 games = 1;
	repeated BMRoleEnter roles = 2;
}

message BMSceneRankRes{
	optional uint32 rank = 1;
	optional uint32 score = 2;
	optional ErrorCode error = 3;
	optional uint32 jointime = 4;
	optional uint32 deathcount = 5;
	optional uint32 killcount = 6;
}

message MayhemBattlefieldArg{
	optional uint32 report_type = 1;
	optional string round = 2;
	optional string server_name = 3;
	optional string player_name = 4;
}

message BigMeleeBattleResult{
	optional uint64 roleid = 1;
	optional uint32 rank = 2;
	optional uint32 score = 3;
	optional uint32 kill = 4;
	optional uint32 death = 5;
	repeated ItemBrief items = 6;
}

message BigMeleeRelive{
	optional uint32 time = 1;
}

message BigMeleeGroupData{
	optional uint32 group = 1;
	repeated uint32 svrid = 2;
}

message BigMeleeSeasonData{
	repeated BigMeleeGroupData grouplist = 1;
	optional uint32 time = 2;
}

message MobaHintNtf{
	optional int32 index = 1;
}

message MsGiveItemArg{
	optional uint64 roleid = 1;
	optional int32 reason = 2;
	optional int32 subreason = 3;
	repeated ItemBrief items = 4;
}

message MsGiveItemRes{
	optional ErrorCode errorcode = 1;
}

message AddMilitaryRankData{
	optional bool iswin = 1;
	optional uint64 roleid = 2;
	optional SceneType scenetype = 3;
}

message GetMobaBattleInfoArg{
}

message GetMobaBattleInfoRes{
	optional uint32 winthisweek = 1;
	optional uint32 weekprize = 2;
	optional bool getnextweekprize = 3;
}

message GetMobaBattleWeekRewardArg{
}

message GetMobaBattleWeekRewardRes{
	optional ErrorCode errorcode = 1;
	optional uint32 weekprize = 2;
	optional bool getnextweekprize = 3;
}

message TeamStartBattleRes{
	optional ErrorCode errorcode = 1;
}

message TeamStartBattleArg{
	optional SceneSwitchTeamData teamdata = 1;
	optional uint32 mapid = 2;
	optional uint32 sceneid = 3;
	optional uint32 gsline = 4;
}

message RoleCrossData{
	optional uint64 roleid = 1;
	optional MyGuild guild = 2;
}

message ServerCrossData{
	optional uint32 serverid = 1;
	optional uint32 worldlevel = 2;
	optional uint32 sealtype = 3;
	optional uint32 seallevel = 4;
	optional uint32 serveropentime = 5;
	optional bool isbackflow = 6;
	optional uint32 backflowlevel = 7;
	repeated uint32 idipclosesys = 8;
	optional ConsumeRebateNtfData rebate = 9;
	optional ServerCrossTeamData teamdata = 10;
}

message ServerCrossDataSynPara{
	repeated ServerCrossData serverdata = 1;
	optional int32 syntype = 2;
}

message BuySpriteEggArg{
	optional uint32 type = 1;
}

message BuySpriteEggRes{
	optional ErrorCode errorcode = 1;
	repeated ItemBrief item = 2;
	optional uint32 cooldown = 3;
	optional uint32 goldfreebuycount = 4;
	optional uint32 goldfreebuycooldown = 5;
}

message TajieHelpData{
	optional int32 sceneID = 1;
	optional int32 sceneType = 2;
	optional int32 dragonStatus = 3;
	optional int32 dragonWeakLeftTime = 4;
	optional bool isIconAppear = 5;
}

message TajieHelp2DB{
	repeated TajieHelpSceneData taJieHelpSceneData = 1;
	optional int32 updateTime = 2;
}

message TajieHelpSceneData{
	optional int32 sceneID = 1;
	optional int32 intervalContinueFailTimes = 2;
	optional int32 intervalFailNoticeTimes = 3;
}

message Temp_Data{
	optional uint32 helpcount = 1;
}

message GetEnhanceAttrArg{
	optional uint32 prof = 1;
	optional uint32 equippos = 2;
	optional uint32 enhancelevel = 3;
}

message GetEnhanceAttrRes{
	optional bool isEnd = 1;
	repeated AttributeInfo attrs = 2;
}

message StageTrophyData{
	optional uint32 scene_id = 1;
	optional uint32 pass_count = 2;
	optional uint32 quickly_pass_time = 3;
	optional uint64 hight_damage = 4;
	optional uint64 hight_treat = 5;
	optional uint32 help_count = 6;
	optional uint32 no_deathpass_count = 7;
	repeated TrophyGetTypeDetail get_trophy_detail = 8;
}

message GroupChatFindTeamInfo{
	optional uint64 groupchatID = 1;
	optional string groupchatName = 2;
	optional uint64 issueIndex = 3;
	optional uint32 stageID = 4;
	optional uint32 fighting = 5;
	optional uint32 type = 6;
	optional uint32 time = 7;
	optional uint32 state = 8;
	optional uint32 issuetime = 9;
	optional uint64 leaderroleid = 10;
	optional bool isselfingroup = 11;
}

message GroupChatFindRoleInfo{
	optional uint64 roleid = 1;
	optional string rolename = 2;
	optional uint64 groupchatID = 3;
	optional string groupchatName = 4;
	optional uint64 issueIndex = 5;
	optional uint32 stageID = 6;
	optional uint32 fighting = 7;
	optional uint32 type = 8;
	optional uint32 time = 9;
	optional uint32 state = 10;
	optional uint32 issuetime = 11;
	optional uint32 roleprofession = 12;
}

message GroupChatPlayerInfo{
	optional uint64 roleid = 1;
	optional string rolename = 2;
	optional uint32 profession = 3;
	optional uint32 title = 4;
	optional uint32 level = 5;
	optional uint32 fighting = 6;
	optional string guild = 7;
	optional uint32 joingrouptime = 8;
	optional uint32 uid = 9;
}

message GroupChatTeamInfo{
	optional uint64 groupchatID = 1;
	optional uint64 leaderRoleID = 2;
	optional string groupchatName = 3;
	optional uint32 createtype = 4;
	optional uint32 rolecount = 5;
	optional uint32 groupcreatetime = 6;
}

message GroupChatFindRoleInfoListC2S{
	optional uint32 type = 1;
}

message GroupChatFindTeamInfoListS2C{
	repeated GroupChatFindTeamInfo teamlist = 1;
	optional ErrorCode errorcode = 2;
}

message GroupChatFindTeamInfoListC2S{
	optional uint32 type = 1;
}

message GroupChatFindRoleInfoListS2C{
	repeated GroupChatFindRoleInfo rolelist = 1;
	optional ErrorCode errorcode = 2;
}

message GroupChatLeaderReviewListC2S{
}

message GroupChatLeaderReviewListS2C{
	repeated GroupChatFindRoleInfo roleinfolist = 1;
	optional ErrorCode errorcode = 2;
}

message GroupChatPlayerIssueInfoC2S{
	optional GroupChatFindRoleInfo roleinfo = 1;
}

message GroupChatPlayerIssueInfoS2C{
	optional ErrorCode errorcode = 1;
}

message GroupChatLeaderIssueInfoC2S{
	optional GroupChatFindTeamInfo teaminfo = 1;
}

message GroupChatLeaderIssueInfoS2C{
	optional ErrorCode errorcode = 1;
}

message GroupChatLeaderReviewC2S{
	optional uint64 groupchatID = 1;
	optional uint64 issueIndex = 2;
	optional uint64 roleid = 3;
	optional bool isAgree = 4;
}

message GroupChatLeaderReviewS2C{
	optional ErrorCode errorcode = 1;
}

message GroupChatPlayerApplyC2S{
	optional uint64 groupchatID = 1;
	optional uint64 issueIndex = 2;
}

message GroupChatPlayerApplyS2C{
	optional ErrorCode errorcode = 1;
}

message GroupChatGetGroupInfoC2S{
	optional uint64 groupchatID = 1;
}

message GroupChatGetGroupInfoS2C{
	repeated GroupChatPlayerInfo playerlist = 1;
	optional ErrorCode errorcode = 2;
}

message GroupChatManagerC2S{
	optional uint64 groupchatID = 1;
	repeated uint64 subrolelist = 2;
	repeated uint64 addrolelist = 3;
}

message GroupChatManagerS2C{
	optional ErrorCode errorcode = 1;
}

message GroupChatQuitC2S{
	optional uint64 groupchatID = 1;
}

message GroupChatQuitS2C{
	optional ErrorCode errorcode = 1;
}

message TrophyDetail{
	optional uint32 tropy_order = 1;
	optional uint32 trophy_time = 2;
}

message NotifyStartUpTypeToClient{
	optional StartUpType type = 1;
}

message GuildCampChatInfo{
	optional uint64 audio_id = 1;
	optional uint32 audio_time = 2;
	optional string chat_text = 3;
}

message StageTrophy{
	repeated StageTrophyData trophydata = 1;
	optional uint64 total_score = 2;
	optional uint32 honour_rank = 3;
}

message HeroBattleAncientPowerData{
	repeated uint64 roleids = 1;
	repeated double ancientpower = 2;
}

message SelectHeroAncientPowerArg{
	optional uint32 selectpower = 1;
}

message SelectHeroAncientPowerRes{
	optional ErrorCode errorcode = 1;
}

message GroupChatCreateC2S{
	optional string groupchatName = 1;
	optional uint32 createtype = 2;
}

message GroupChatCreateS2C{
	optional uint64 groupchatID = 1;
	optional ErrorCode errorcode = 2;
}

message GroupChatManagerPtc{
	optional uint64 groupchatID = 1;
	repeated GroupChatPlayerInfo addrolelist = 2;
	repeated uint64 subrolelist = 3;
}

message GroupChatQuitPtc{
	optional uint64 groupchatID = 1;
	optional uint64 roleid = 2;
}

message GroupChatDismissPtc{
	optional uint64 groupchatID = 1;
	optional uint64 roleid = 2;
}

message AncientTimes{
	optional uint32 award = 1;
}

message AncientTimesArg{
	optional uint32 pos = 1;
}

message AncientTimesRes{
	optional ErrorCode error = 1;
	optional uint32 reward = 2;
}

message GroupChatClearC2S{
}

message GroupChatClearS2C{
	optional ErrorCode errorcode = 1;
}

message HoldWeddingReq{
}

message HoldWeddingRes{
	optional ErrorCode result = 1;
	optional WeddingBrief briedf = 2;
}

message WeddingRoleBrief{
	optional uint64 roleid = 1;
	optional string name = 2;
	optional uint32 profession = 3;
	optional uint32 level = 4;
	optional uint32 ppt = 5;
	optional string guildname = 6;
}

message WeddingBrief{
	optional uint64 weddingid = 1;
	optional WeddingType type = 2;
	optional WeddingRoleBrief role1 = 3;
	optional WeddingRoleBrief role2 = 4;
	optional WeddingState state = 5;
	optional uint32 lefttime = 6;
}

message GetAllWeddingInfoArg{
}

message GetAllWeddingInfoRes{
	optional ErrorCode result = 1;
	repeated WeddingBrief can_enter = 2;
	repeated WeddingBrief can_apply = 3;
	repeated bool is_apply = 4;
}

message GetWeddingInviteInfoArg{
}

message GetWeddingInviteInfoRes{
	optional ErrorCode result = 1;
	optional bool permitstranger = 2;
	repeated WeddingRoleBrief friends = 3;
	repeated WeddingRoleBrief guildmembers = 4;
	repeated WeddingRoleBrief invitelist = 5;
	repeated bool invite_enter = 6;
	repeated WeddingRoleBrief applylist = 7;
	optional uint64 weddingid = 8;
}

message EnterWeddingSceneArg{
	optional uint64 weddingid = 1;
}

message EnterWeddingSceneRes{
	optional ErrorCode result = 1;
}

message GetMarriageRelationArg{
}

message GetMarriageRelationRes{
	optional ErrorCode error = 1;
	repeated RoleOutLookBrief infos = 2;
	optional MarriageStatus marriageStatus = 3;
	optional WeddingType type = 4;
	optional int32 leftDivorceTime = 5;
	optional uint64 applyDivorceID = 6;
	optional int32 coupleOfflineTime = 7;
}

message MarriageRelationOpArg{
	optional MarriageOpType opType = 1;
	optional WeddingType type = 2;
	optional uint64 destRoleID = 3;
}

message MarriageRelationOpRes{
	optional ErrorCode error = 1;
	optional uint64 oppoRoleID = 2;
	optional string oppoRoleName = 3;
}

message WeddingInviteOperatorArg{
	optional WeddingInviteOperType type = 1;
	optional uint64 roleid = 2;
	optional uint64 weddingid = 3;
}

message WeddingInviteOperatorRes{
	optional ErrorCode result = 1;
}

message WeddingInviteNtf{
	optional WeddingInviteOperType type = 1;
	optional WeddingBrief weddinginfo = 2;
	optional WeddingRoleBrief applyer = 3;
}

message WeddingCreateInfo{
	optional WeddingBrief data = 1;
	optional bool is_test = 2;
}

message GroupChatLeaderAddRoleC2S{
	optional uint64 groupchatID = 1;
	optional uint64 roleid = 2;
	optional uint64 roleIssueIndex = 3;
}

message GroupChatLeaderAddRoleS2C{
	optional ErrorCode errorcode = 1;
}

message MarriageAllData2DB{
	optional uint64 roleID = 1;
	optional int32 updateTime = 2;
	optional MarriagePos selfPos = 3;
	optional OneMarriageRelation2DB curRelation = 4;
	repeated OneMarriageRelation2DB hisRelation = 5;
	optional uint32 getActivityRewardTime = 6;
}

message OneMarriageRelation2DB{
	optional uint64 roleID = 1;
	optional MarriagePos pos = 2;
	optional WeddingType type = 3;
	optional MarriageStatus status = 4;
	optional uint32 marriageTime = 5;
	optional uint32 divorceTime = 6;
	optional bool isDivorceApplier = 7;
	optional bool notifyDivorce = 8;
	optional bool notifyDivorceCancel = 9;
	optional bool weddingholded = 10;
	optional bool takeWeddingCar = 11;
	optional uint32 liveness = 12;
	optional uint32 chesttaked = 13;
	repeated PartnerLivenessRecordData livenessrecord = 14;
}

message SaveMarriage2DbData{
	optional uint64 roleID = 1;
	optional bytes info = 2;
}

message NotifyMarriageApplyData{
	optional MarriageApplyInfo applyInfo = 1;
	optional MarriageApplyResponse response = 2;
}

message MarriageApplyInfo{
	optional uint64 applyRoleID = 1;
	optional string applyName = 2;
	optional WeddingType type = 3;
}

message MarriageApplyResponse{
	optional bool isAgree = 1;
	optional uint64 roleID = 2;
	optional string roleName = 3;
}

message CheckMarriageCoupleArg{
	optional uint64 role1 = 1;
	optional uint64 role2 = 2;
	optional uint32 delayRpc = 3;
	optional MarriageOpType opType = 4;
	optional WeddingType type = 5;
}

message CheckMarriageCoupleRes{
	optional ErrorCode error = 1;
	optional uint64 role1 = 2;
	optional uint64 role2 = 3;
}

message BattleStatisticsNtf{
	repeated uint32 skillID = 1;
	repeated int32 skillCount = 2;
	repeated double skillValue = 3;
	repeated uint32 mobID = 4;
	repeated int32 mobCount = 5;
	repeated double mobValue = 6;
}

message WeddingLoadInfoNtf{
	optional WeddingBrief info = 1;
}

message WeddingStateNtf{
	optional WeddingState state = 1;
	optional uint32 lefttime = 2;
	optional uint32 happyness = 3;
	optional bool vows = 4;
}

message WeddingOperatorArg{
	optional WeddingOperType type = 1;
}

message WeddingOperatorRes{
	optional ErrorCode result = 1;
}

message WeddingEventNtf{
	optional WeddingOperType type = 1;
	optional uint64 roleid = 2;
	optional string rolename = 3;
	optional uint32 total_num = 4;
}

message TactEnterSceneArg{
	optional uint32 actid = 1;
	optional uint32 sceneid = 2;
}

message TactEnterSceneRes{
	optional ErrorCode result = 1;
}

message DuckTimes{
	optional uint32 exchangetimes = 1;
}

message BioHellSceneInfo{
	optional uint32 usetime = 1;
	repeated uint64 roles = 2;
}

message SpFirstCompleteScene{
	optional uint32 scenetype = 1;
	repeated uint32 sceneid = 2;
}

message NotifyMarriageDivorceApplyData{
	optional bool isApplyCancel = 1;
	optional uint64 roleID = 2;
	optional string name = 3;
	optional int32 leftTime = 4;
}

message WarningItemSet{
	repeated WarningPackage WarningItem = 1;
}

message WarningRandomSet{
	repeated WarningItemSet WarningItems = 1;
	required uint64 Firer = 2;
	required uint32 skill = 3;
}

message WarningPackage{
	repeated uint32 WarningPos = 1;
	required uint64 ID = 2;
}

message GroupChatChangeNameC2S{
	optional uint64 groupchatID = 1;
	optional string newname = 2;
}

message GroupChatChangeNameS2C{
	optional ErrorCode errorcode = 1;
}

message GroupChatIssueCountNtf{
	optional uint32 rolecount = 1;
	optional uint32 groupcount = 2;
}

message UpdateWeddingStateG2M{
	optional uint64 weddingid = 1;
	optional WeddingState state = 2;
	optional uint32 statestarttime = 3;
	optional bool is_end = 4;
}

message GroupChatApplyNtf{
}

message DragonGroupRoleInfo{
	optional uint64 roleid = 1;
	optional string rolename = 2;
	optional uint32 profession = 3;
	optional uint32 title = 4;
	optional uint32 level = 5;
	optional uint32 fighting = 6;
	optional string guild = 7;
	optional uint32 uid = 8;
	optional uint32 stageID = 9;
	optional uint32 stageTime = 10;
	optional uint32 stageCount = 11;
}

message DragonGroupRoleListC2S{
}

message DragonGroupRoleListS2C{
	repeated DragonGroupRoleInfo rolelist = 1;
	optional ErrorCode errorcode = 2;
}

message DragonGroupRecordInfoList{
	optional uint32 stageid = 1;
	optional uint32 time = 2;
	optional uint32 costtime = 3;
	repeated DragonGroupRoleInfo roleinfo = 4;
	optional bool iswin = 5;
	optional bool isFirstPass = 6;
	optional bool isServerFirstPass = 7;
	optional uint32 commendnum = 8;
	optional uint32 watchnum = 9;
	optional bool ismostcommendnum = 10;
	optional bool ismostwatchnum = 11;
}

message DragonGroupRecordC2S{
}

message DragonGroupRecordS2C{
	repeated DragonGroupRecordInfoList recordlist = 1;
	optional ErrorCode errorcode = 2;
}

message DBGroupChatIDTime{
	optional uint64 id = 1;
	optional uint32 time = 2;
}

message DBGroupChatSaveGroupIssue{
	optional uint64 index = 1;
	optional uint32 time = 2;
	optional uint64 groupid = 3;
	optional uint32 showstageid = 4;
	optional uint32 showfighting = 5;
	optional uint32 showtime = 6;
	optional uint32 showfighttype = 7;
	optional uint32 state = 8;
	repeated uint64 zmApplyRoleidList = 9;
}

message DBGroupChatDelGroupIssue{
	optional uint64 index = 1;
	optional uint32 todaybegintime = 2;
	optional bool isclear = 3;
}

message DBGroupChatSaveRoleIssue{
	optional uint64 index = 1;
	optional uint32 time = 2;
	optional uint64 roleid = 3;
	optional uint32 showstageid = 4;
	optional uint32 showfighting = 5;
	optional uint32 showtype = 6;
	optional uint32 showtime = 7;
	optional uint32 state = 8;
}

message DBGroupChatDelRoleIssue{
	optional uint64 index = 1;
	optional uint32 todaybegintime = 2;
	optional bool isclear = 3;
}

message DBGroupChatSaveGroup{
	optional uint64 index = 1;
	optional uint32 time = 2;
	repeated DBGroupChatIDTime memberRoleIDList = 3;
	optional string groupname = 4;
	optional uint32 createtype = 5;
	optional uint32 createtime = 6;
	optional uint64 leaderroleid = 7;
}

message DBGroupChatDelGroup{
	optional uint64 groupid = 1;
	optional uint32 todaybegintime = 2;
	optional bool isclear = 3;
}

message DBGroupChatSaveRole{
	optional uint64 index = 1;
	optional uint32 time = 2;
	repeated uint64 groupIDList = 3;
	repeated DBGroupChatIDTime zmRoleIssueList = 4;
	repeated DBGroupChatIDTime zmGroupIssueList = 5;
}

message DBGroupChatDelRole{
	optional uint64 roleid = 1;
	optional uint32 todaybegintime = 2;
	optional bool isclear = 3;
}

message GetMarriageLivenessArg{
}

message GetMarriageLivenessRes{
	optional ErrorCode result = 1;
	optional uint32 liveness = 2;
	optional uint32 takedchest = 3;
	repeated PartnerLivenessItem record = 4;
}

message TakeMarriageChestArg{
	optional uint32 index = 1;
}

message TakeMarriageChestRes{
	optional ErrorCode result = 1;
	repeated uint32 itemid = 2;
	repeated uint32 itemcount = 3;
	optional uint32 takedchest = 4;
}

message CheckRoleBeforePayArg{
	optional uint64 roleid = 1;
	optional uint32 serverid = 2;
	optional string openid = 3;
}

message CheckRoleBeforePayRes{
	optional ErrorCode result = 1;
}

message GiveMarriageLvRewardM2GArg{
	optional uint32 index = 1;
	optional uint32 rpcid = 2;
}

message GiveMarriageLvRewardRes{
	optional ErrorCode result = 1;
	repeated uint32 itemid = 2;
	repeated uint32 itemcount = 3;
}

message DragonGroupDB{
	optional DragonGroupRecordS2C record = 1;
	optional DragonGroupRoleListS2C rolelist = 2;
}

message Holdweddingcheckm2g{
	optional uint32 delayid = 1;
	optional uint64 roleid1 = 2;
	optional uint64 roleid2 = 3;
}

message Holdweddingcheckm2gArg{
	optional uint32 delayid = 1;
	optional uint64 roleid1 = 2;
	optional uint64 roleid2 = 3;
}

message Holdweddingcheckm2gRes{
	optional ErrorCode result = 1;
}

message ShareReportData{
	optional int32 op = 1;
	optional int32 type = 2;
}

message ArtifactDeityStoveOpArg{
	optional ArtifactDeityStoveOpType type = 1;
	optional uint64 uid1 = 2;
	optional uint64 uid2 = 3;
	optional bool isUsedStone = 4;
}

message ArtifactDeityStoveOpRes{
	optional ErrorCode errorcode = 1;
}

message ThemeActivityData{
	repeated SpFirstCompleteScene firstscene = 1;
	optional bool ishint = 2;
}

message ThemeActivityChangeData{
	optional bool ishint = 1;
	repeated SpFirstCompleteScene scene = 2;
	optional uint32 actid = 3;
}

message StartWeddingCarArg{
}

message StartWeddingCarRes{
	optional ErrorCode result = 1;
}

message WeddingOperM2GArg{
	optional uint32 opertype = 1;
	optional WeddingType type = 2;
	optional uint64 roleid1 = 3;
	optional uint64 roleid2 = 4;
	optional uint32 rpcid = 5;
}

message WeddingOperM2GRes{
	optional ErrorCode result = 1;
}

message WeddingCarEndM2G{
	optional uint64 roleid1 = 1;
	optional uint64 roleid2 = 2;
}

message ThemeActivityHintArg{
	optional uint32 actid = 1;
}

message ThemeActivityHintRes{
	optional ErrorCode result = 1;
}

message RoleLeaveCrossSceneNtf{
	optional uint32 gsline = 1;
	repeated uint64 rolelist = 2;
}

message WeddingCarNotify{
	optional UnitAppearance role1 = 1;
	optional UnitAppearance role2 = 2;
}

message GlobalDragonWeakInfo{
	optional uint32 sceneID = 1;
	optional uint32 openTime = 2;
}

message BackFlowBuyOpRes{
	optional ErrorCode errorcode = 1;
	optional int32 countleft = 2;
	repeated ItemBrief items = 3;
	optional int32 countmax = 4;
	optional ItemBrief cost = 5;
}

message BackFlowBuyOpArg{
	optional int32 op = 1;
}

message BackFlowBuy{
	optional uint32 index = 1;
	optional uint32 day = 2;
	optional uint32 count = 3;
}

message IdipHintData{
	optional uint32 systemid = 1;
	optional bool ishint = 2;
}

message BackFlowOpenNtf{
	optional bool isopen = 1;
}

message TrophyGetTypeDetail{
	optional uint32 trophy_id = 1;
	repeated TrophyDetail detail = 2;
}

message DneRecord{
	optional uint32 dneid = 1;
	optional uint32 count = 2;
}

message GMDoWhiteListArg{
	optional int32 cmdid = 1;
	optional string openid = 2;
	optional int32 type = 3;
	optional uint32 httpid = 4;
}

message GMDoWhiteListRes{
	optional string resultstring = 1;
	optional int32 result = 2;
}

message TransformOpArg{
	optional int32 op = 1;
	optional string roleid = 2;
	optional uint32 itemid = 3;
}

message TransformOpRes{
	optional ErrorCode errorcode = 1;
	optional uint32 timeleft = 2;
}

message STransformBuff{
	optional bool ispassive = 1;
	optional bool iseffecting = 2;
	optional Buff buff = 3;
}

message PrivateChatGS{
	optional uint64 sourceroleid = 1;
	optional uint64 destroleid = 2;
	optional string content = 3;
}

message TransNotify{
	optional bool istrans = 1;
	optional string roleid = 2;
}

message WENActivityData{
	optional uint32 count = 1;
	optional uint32 award = 2;
}

message WeekEndNestArg{
}

message WeekEndNestRes{
	optional ErrorCode error = 1;
}

message UpgradeEquipArg{
	optional uint64 uid = 1;
}

message UpgradeEquipRes{
	optional ErrorCode errorcode = 1;
}

message BattleFieldInfo{
	optional uint32 point = 1;
	optional uint32 killer = 2;
	optional uint32 deadcount = 3;
	optional uint32 rank = 4;
	optional double hurt = 5;
	optional BattleFieldRoleInfo roleinfo = 6;
}

message BattleFieldRoleInfo{
	optional uint64 roleid = 1;
	optional string name = 2;
	optional uint32 svrid = 3;
	optional uint32 level = 4;
	optional uint32 job = 5;
	optional string svrname = 6;
}

message BattleFieldEvent{
	optional BattleFieldType event = 1;
	optional BattleFieldRoleInfo roleinfo = 2;
}

message InvFightAgainPara{
	optional CreateCrossBattleSceneArg data = 1;
}

message EnterBattleReadySceneArg{
	optional uint32 param = 1;
}

message EnterBattleReadySceneRes{
	optional ErrorCode error = 1;
}

message BFFightSceneInfo{
}

message BFRoleEnter{
	optional uint32 sceneid = 1;
	optional uint32 gsline = 2;
	repeated BattleFieldRoleInfo roleinfo = 3;
	optional uint32 lvindx = 4;
	optional bool end = 5;
}

message EnterBFFightScene{
	optional uint32 sceneid = 1;
	optional uint32 gsline = 2;
	optional uint32 mapid = 3;
	optional uint32 lvidx = 4;
	repeated BattleFieldRoleInfo roles = 5;
}

message EnterBFFightBatchScene{
	repeated EnterBFFightScene scenes = 1;
}

message DragonGuildSaveData{
	optional uint64 id = 1;
	optional string name = 2;
	optional string base = 3;
	optional string liveness = 4;
	optional string shop = 5;
	optional string applications = 6;
	optional string bindinfo = 7;
	optional string task = 8;
}

message DragonGuildMemberData{
	optional uint64 roleId = 1;
	optional uint32 position = 2;
	optional uint32 activity = 3;
	optional uint32 jointime = 4;
	optional uint32 refreshShopLevel = 5;
	optional uint32 ppt = 6;
	optional uint32 openshoptime = 7;
	optional GuildBindStatus bindstatus = 8;
	optional uint32 updatebindtime = 9;
}

message DragonGuildBaseData{
	optional bytes brief = 1;
	repeated DragonGuildMemberData member = 2;
}

message DragonGuildMemberDetail{
	optional uint64 memberid = 1;
	optional RoleType profession = 2;
	optional string name = 3;
	optional uint32 level = 4;
	optional uint32 ppt = 5;
	repeated uint32 fashion = 6;
	optional OutLook outlook = 7;
	optional uint32 viplevel = 8;
	optional uint32 paymemberid = 9;
}

message DragonGuildDetailInfoRes{
	optional ErrorCode result = 1;
	repeated DragonGuildMemberDetail members = 2;
	optional bool shop_point = 3;
	optional uint32 level = 4;
	optional uint64 dragonguildid = 5;
}

message DragonGuildBrief{
	optional uint64 ID = 1;
	optional uint64 leaderId = 2;
	optional int32 level = 3;
	optional int32 activity = 4;
	optional int32 rank = 5;
	optional uint32 createTime = 6;
	optional string leadername = 7;
	optional string name = 8;
	optional uint32 recuirtPPT = 9;
	optional uint32 needApproval = 10;
	optional uint32 mapId = 11;
	optional uint32 mapPassCnt = 12;
	optional uint32 firstPassTime = 13;
	optional string announcement = 14;
	optional uint64 totalppt = 15;
}

message CreateOrJoinDragonGuildArg{
	optional bool iscreate = 1;
	optional uint64 dgid = 2;
	optional string dgname = 3;
}

message CreateOrJoinDragonGuildRes{
	optional ErrorCode result = 1;
	optional uint64 dgid = 2;
	optional string name = 3;
	optional uint32 cdtime = 4;
}

message CreateDragonGuildCostArg{
	optional bool iscreate = 1;
	optional uint32 rpcid = 2;
	optional uint64 roleId = 3;
	optional uint32 icon = 4;
}

message CreateDragonGuildCostRes{
	optional ErrorCode result = 1;
}

message GetRolePowerArg{
	optional uint32 rpcid = 1;
	optional uint64 roleid = 2;
	optional uint32 sysid = 3;
}

message GetRolePowerRes{
	optional ErrorCode result = 1;
	optional uint32 rolePower = 2;
	optional uint32 cdtime = 3;
}

message DragonGuildRecordData{
	optional uint64 dragonguildid = 1;
	optional uint32 taked_chest = 2;
	optional bool chest_redpoint = 3;
	optional uint32 last_update_time = 4;
	repeated DragonGuildRoleTaskItem tasks = 5;
	repeated DragonGuildRoleTaskItem achivements = 6;
	optional uint32 ReceiveCount = 7;
	optional uint32 taskRefreshTime = 8;
}

message UpdateDragonGuildData{
	optional DBOperType type = 1;
	optional DragonGuildSaveData data = 2;
}

message DragonGuildLivenessRecordData{
	optional uint64 roleid = 1;
	optional uint32 actid = 2;
	optional uint32 value = 3;
	optional uint32 time = 4;
}

message DragonGuildLivenessData{
	repeated DragonGuildLivenessRecordData record = 1;
	optional uint32 liveness = 2;
	repeated DragonGuildRoleActicityData roleActivity = 3;
}

message TakeDragonguildChestArg{
	optional uint32 index = 1;
}

message TakeDragonGuildChestRes{
	optional ErrorCode result = 1;
	repeated uint32 itemid = 2;
	repeated uint32 itemcount = 3;
	optional uint32 takechest = 4;
}

message dragonguildSimpleRoleInfo{
	optional uint64 roleId = 1;
	optional uint32 position = 2;
}

message dragonguildSimpleData{
	optional bool isDel = 1;
	optional uint64 dragonguildId = 2;
	optional uint32 dragonguildLv = 3;
	optional string dragonguildname = 4;
	repeated dragonguildSimpleRoleInfo addmembers = 5;
	repeated uint64 delmembers = 6;
}

message SynDragonGuildSimpleData{
	repeated dragonguildSimpleData data = 1;
}

message DragonGuildDataReq{
	optional uint32 gsline = 1;
}

message DragonGuildShopItemData{
	optional uint32 id = 1;
	optional uint32 buy_count = 2;
}

message DragonGuildShopRecordData{
	optional uint64 roleid = 1;
	optional uint32 itemid = 2;
	optional uint32 itemcount = 3;
	optional uint32 time = 4;
}

message DragonGuildShopData{
	repeated DragonGuildShopItemData item = 1;
	repeated DragonGuildShopRecordData record = 2;
	optional uint32 refreshtime = 3;
}

message DranonGuildApplicationInfo{
	optional uint64 roleId = 1;
	optional uint32 time = 2;
}

message DragonGuildApps{
	repeated DranonGuildApplicationInfo apps = 1;
}

message MyDragonGuild{
	optional uint64 dgid = 1;
	optional uint32 position = 2;
	optional uint32 level = 3;
	optional string name = 4;
	optional uint64 totalPPT = 5;
	optional uint32 capacity = 6;
	optional uint32 memberCount = 7;
	optional uint32 mapId = 8;
	optional uint32 mapCnt = 9;
	optional uint32 firstPassTime = 10;
	optional uint32 exp = 11;
}

message FetchDGAppArg{
}

message FetchDGAppRes{
	optional ErrorCode result = 1;
	repeated uint64 roleid = 2;
	repeated string rolename = 3;
	repeated uint32 ppt = 4;
	repeated uint32 time = 5;
	repeated uint32 level = 6;
	repeated RoleType profession = 7;
}

message ChangeDragonGuildSettingArg{
	optional uint32 powerpoint = 1;
	optional uint32 needapproval = 2;
	optional string annoucement = 3;
}

message ChangeDragonGuildSettingRes{
	optional ErrorCode result = 1;
}

message DragonGuildSettingChanged{
	optional uint32 recuitPPT = 1;
	optional uint32 needApproval = 2;
	optional string annoucement = 3;
}

message DragonGuildApprovalArg{
	optional uint64 roleid = 1;
	optional uint32 type = 2;
}

message DragonGuildApprovalRes{
	optional ErrorCode result = 1;
}

message LeaveDragonGuildArg{
	optional uint64 roleid = 1;
}

message LeaveDragonGuildRes{
	optional ErrorCode result = 1;
}

message DragonGuildTaskInfo{
	optional uint32 taskID = 1;
	optional uint32 finishCount = 2;
	optional uint32 receiveCount = 3;
}

message ModifyDragonNameCostArg{
	optional uint64 roleid = 1;
	optional string name = 2;
	optional uint64 rpcid = 3;
}

message DragonGuildTaskData{
	repeated DragonGuildTaskInfo tasks = 1;
	repeated DragonGuildTaskInfo achivements = 2;
	optional uint32 refreshtime = 3;
}

message ModifyDragonNameCostRes{
	optional ErrorCode result = 1;
}

message ModifyDragonGuildNameArg{
	optional string name = 1;
}

message ModifyDragonGuildNameRes{
	optional ErrorCode result = 1;
}

message DragonGuildNameNtf{
	optional string name = 1;
}

message DragonGuildMembersInfo{
	optional string name = 1;
	optional uint64 roleid = 2;
	optional int32 position = 3;
	optional uint32 contribute = 4;
	optional uint32 ppt = 5;
	optional uint32 flag = 6;
	optional uint32 level = 7;
	optional RoleType profession = 8;
	optional uint32 lastlogin = 9;
	optional uint32 vip = 10;
	optional bool isonline = 11;
	optional uint32 activity = 12;
	optional uint32 paymemberid = 13;
	optional uint32 title = 14;
}

message DragonGuildMemberRes{
	optional ErrorCode result = 1;
	repeated DragonGuildMembersInfo members = 2;
}

message DragonGuildMemberArg{
	optional uint64 guildId = 1;
}

message DragonGuildInfo{
	optional string name = 1;
	optional uint64 leaderId = 2;
	optional string leadername = 3;
	optional uint32 level = 4;
	optional uint32 membercounts = 5;
	optional bool isSendApplication = 6;
	optional uint64 id = 7;
	optional uint32 recruitppt = 8;
	optional bool needapproval = 9;
	optional uint32 capacity = 10;
	optional string announcement = 11;
	optional uint32 guildExp = 12;
	optional uint64 totalPPT = 13;
	optional uint32 sceneId = 14;
	optional uint32 sceneCnt = 15;
}

message FetchDragonGuildRes{
	optional ErrorCode result = 1;
	repeated DragonGuildInfo dragonguilds = 2;
}

message FetchDragonGuildListArg{
	optional int32 start = 1;
	optional int32 count = 2;
	optional int32 reason = 3;
	optional int32 sortType = 4;
	optional bool reverse = 5;
	optional string name = 6;
}

message DragonGuildRoleTaskItem{
	optional uint32 taskid = 1;
	optional bool received = 2;
}

message DragonGuildLivenessItem{
	optional uint64 roleid = 1;
	optional uint32 actid = 2;
	optional uint32 value = 3;
	optional uint32 time = 4;
	optional string name = 5;
}

message ChatParamDragonGuild{
	optional uint64 dragonguildId = 1;
	optional string dragonguildname = 2;
}

message GetDragonGuildTaskInfoArg{
}

message GetDragonGuildTaskInfoRes{
	optional ErrorCode errorcode = 1;
	optional uint32 exp = 2;
	repeated DragonGuildTaskInfo taskrecord = 3;
	repeated bool taskcompleted = 4;
	repeated DragonGuildTaskInfo achiverecord = 5;
	repeated bool achivecompleted = 6;
	optional string task_refreshtime = 7;
}

message GetDragonGuildTaskChestArg{
	optional DragonGuildTaskType type = 1;
	optional uint32 taskid = 2;
}

message GetDragonGuildTaskChestRes{
	optional ErrorCode errorcode = 1;
	repeated uint64 itemid = 2;
	repeated uint32 itemCount = 3;
	optional uint32 guildexp = 4;
}

message GetDragonGuildTaskChestG2MArg{
	optional uint32 rpcid = 1;
	optional DragonGuildTaskType type = 2;
	optional uint32 taskid = 3;
}

message GetDragonGuildTaskChestG2MRes{
	optional uint64 dragonguildid = 1;
	optional uint32 exp = 2;
	optional ErrorCode errorcode = 3;
}

message CostDragonGuildReceiveCountData{
	optional DragonGuildTaskType type = 1;
	optional uint32 taskid = 2;
	optional uint64 roleid = 3;
}

message CheckDragonGuildTaskData{
	optional uint32 rolecount = 1;
	repeated uint64 roleid = 2;
	optional uint32 noDieCount = 3;
	optional uint32 sceneid = 4;
	optional uint32 time = 5;
}

message GetDragonGuildRecieveInfoArg{
	repeated uint32 tasklist = 1;
	repeated uint32 achievelist = 2;
	optional uint32 rpcid = 3;
}

message GetDragonGuildRecieveInfoRes{
	repeated bool task_receieved = 1;
	repeated bool achieve_recieved = 2;
}

message DragonGuildShopItemClient{
	optional uint32 id = 1;
	optional uint32 itemid = 2;
	optional uint32 buy_count = 3;
}

message GetDragonGuildShopRes{
	optional ErrorCode result = 1;
	repeated DragonGuildShopItemClient items = 2;
}

message GetDragonGuildShopArg{
}

message BuyDragonGuildShopItemArg{
	optional uint32 id = 1;
	optional uint32 count = 2;
}

message BuyDragonGuildShopItemRes{
	optional ErrorCode result = 1;
}

message BuyDragonGuildShopItemM2GArg{
	optional uint32 rpcid = 1;
	optional uint32 id = 2;
	optional uint32 count = 3;
}

message BuyDragonGuildShopItemM2GRes{
	optional ErrorCode result = 1;
}

message GetDragonGuildShopRecordArg{
}

message DragonGuildShopRecordItem{
	optional uint64 roleid = 1;
	optional uint32 itemid = 2;
	optional uint32 itemcount = 3;
	optional uint32 time = 4;
	optional string name = 5;
	optional uint32 titleId = 6;
}

message GetDragonGuildShopRecordRes{
	optional ErrorCode result = 1;
	repeated DragonGuildShopRecordItem record = 2;
}

message NotifyDragonGuildRedPoint{
	optional uint32 systemid = 1;
	optional uint32 liveness = 2;
	optional DragonGuildTaskType tasktype = 3;
	optional uint32 taskid = 4;
}

message ChangeDragonGuildPositionArg{
	optional uint64 roleid = 1;
	optional uint32 position = 2;
}

message ChangeDragonGuildPositionRes{
	optional ErrorCode result = 1;
}

message GetDragonGuildBindInfoArg{
	optional string token = 1;
}

message GetDragonGuildBindInfoRes{
	optional GuildBindStatus bind_status = 1;
	optional string group_name = 2;
	optional ErrorCode result = 3;
}

message DragonGuildBindReq{
	optional string token = 1;
}

message DragonGuildBindRes{
	optional ErrorCode result = 1;
	optional string group_name = 2;
}

message DragonGuildJoinBindGroupArg{
	optional string token = 1;
}

message DragonGuildJoinBindGroupRes{
	optional ErrorCode result = 1;
}

message DragonGuildUnBindGroupArg{
	optional string token = 1;
}

message DragonGuildUnBindGroupRes{
	optional ErrorCode result = 1;
}

message CheckDragonGuildRedPointG2MArg{
	optional uint64 dragonguildid = 1;
}

message CheckDragonGuildRedPointG2MRes{
	repeated uint32 tasklist = 1;
	repeated uint32 achivelist = 2;
	optional uint32 liveness = 3;
}

message GoBackReadyScene{
}

message GoalAwardsInfo{
	optional uint32 goalAwardsID = 1;
	optional uint32 doneIndex = 2;
	optional uint32 gottenAwardsIndex = 3;
	optional double totalvalue = 4;
	repeated GoalAwardsValue gkidvalue = 5;
}

message GoalAwardsGetList_C2M{
	optional uint32 type = 1;
}

message GoalAwardsGetList_M2C{
	repeated GoalAwardsInfo goalAwardsList = 1;
	optional ErrorCode errorcode = 2;
}

message GoalAwardsGetAwards_C2M{
	optional uint32 goalAwardsID = 1;
}

message GoalAwardsGetAwards_M2C{
	optional uint32 gottenAwardsIndex = 1;
	optional ErrorCode errorcode = 2;
}

message GoalAwardsRedPointNtf{
	repeated uint32 typelist = 1;
}

message BattleFieldData{
	optional uint32 firstrankcount = 1;
	optional uint32 totalkillcount = 2;
	repeated BattleFieldPoint point = 3;
	optional uint32 lastupdatetime = 4;
	optional HellDropInfoAll hell = 5;
	optional uint32 weekpoint = 6;
	optional uint32 dayupdatetime = 7;
	optional uint32 version = 8;
}

message BattleFieldPoint{
	optional uint32 id = 1;
	optional uint32 count = 2;
}

message BattleFieldAwardNumArg{
}

message BattleFieldAwardNumRes{
	repeated BattleFieldLeftAward award = 1;
}

message BattleFieldReadyInfo{
	optional uint32 round = 1;
	optional uint32 time = 2;
	optional bool failed = 3;
	optional bool end = 4;
}

message BattleFieldRank{
	optional uint64 roleid = 1;
	optional string name = 2;
	optional uint32 point = 3;
}

message BattleFieldRankArg{
}

message BattleFieldRankRes{
	repeated BattleFieldRank ranks = 1;
}

message BattleFieldBattleResult{
	optional uint64 roleid = 1;
	optional uint32 rank = 2;
	optional uint32 point = 3;
	optional uint32 killer = 4;
	optional uint32 death = 5;
	optional string svrname = 6;
	repeated ItemBrief items = 7;
	optional bool ismvp = 8;
	optional double hurt = 9;
	optional string name = 10;
	optional uint32 job = 11;
	optional uint32 killstreak = 12;
}

message BattleFieldRoleSimpleInfo{
	optional uint64 roleid = 1;
	optional string name = 2;
}

message BattleFieldRoleAgainst{
	repeated BattleFieldRoleSimpleInfo roles = 1;
}

message GuildActivityRole{
	optional uint64 roleid = 1;
	optional string name = 2;
	optional uint32 score = 3;
}

message BattleFieldReliveInfo{
	optional uint32 time = 1;
}

message BattleFieldLeftAward{
	optional uint32 id = 1;
	optional uint32 count = 2;
}

message WeeklyTaskInfo{
	optional uint32 index = 1;
	optional uint32 id = 2;
	optional uint32 step = 3;
	optional bool is_rewarded = 4;
	optional bool ask_help = 5;
	optional uint32 refresh_count = 6;
}

message WeeklyTaskData{
	repeated WeeklyTaskInfo tasks = 1;
	optional uint32 accept_level = 2;
	optional bool rewarded = 3;
	optional uint32 askhelp_num = 4;
	optional bool accept = 5;
	optional uint32 accept_count = 6;
	optional uint32 score = 7;
	repeated uint32 rewarded_box = 8;
	repeated TaskHelpInfo helpinfo = 9;
	optional uint32 free_refresh_count = 10;
}

message GetWeeklyTaskInfoArg{
}

message GetWeeklyTaskInfoRes{
	optional ErrorCode result = 1;
	repeated WeeklyTaskInfo task = 2;
	optional uint32 score = 3;
	optional uint32 askhelp_num = 4;
	repeated uint32 rewarded_box = 5;
	optional uint32 accept_level = 6;
	repeated TaskHelpInfo helpinfo = 7;
	optional uint32 lefttime = 8;
	optional uint32 remain_free_refresh_count = 9;
}

message GetWeeklyTaskRewardArg{
	optional uint32 type = 1;
	optional uint32 value = 2;
}

message GetWeeklyTaskRewardRes{
	optional ErrorCode result = 1;
	optional uint32 score = 2;
}

message RefreshWeeklyTaskArg{
	optional uint32 index = 1;
}

message RefreshWeeklyTaskRes{
	optional ErrorCode result = 1;
	optional WeeklyTaskInfo task = 2;
}

message BattleFieldRoleAgainstArg{
}

message GetCompeteDragonInfoArg{
	optional CompeteDragonOpArg opArg = 1;
}

message GetCompeteDragonInfoRes{
	optional ErrorCode error = 1;
	optional int32 leftRewardCount = 2;
	optional int32 totalRewardCount = 3;
	optional int32 canCanGetRewardCount = 4;
	optional uint32 curDNExpID = 5;
}

message GoalAwardsServerAwards_M2G{
	optional uint32 goalAwardsID = 1;
	optional uint32 awardsIndex = 2;
}

message GoalAwardsServerEvent_G2M{
	optional uint64 roleid = 1;
	optional uint32 goalAwardsID = 2;
	optional double num = 3;
	optional uint32 gkid = 4;
}

message BattleFieldReadyScene{
	optional uint32 round = 1;
	optional bool flag = 2;
	optional uint32 param = 3;
	optional uint32 nextmatchtime = 4;
	optional bool end = 5;
}

message BFFightTime{
	optional uint32 time = 1;
}

message NpcFeelingOneNpc{
	optional uint32 npcid = 1;
	optional uint32 level = 2;
	optional uint32 exp = 3;
	repeated NpcLikeItem likeitem = 4;
	repeated ItemBrief exchange = 5;
	optional bool isnew = 6;
}

message NpcFeelingUnite{
	optional uint32 id = 1;
	optional uint32 level = 2;
}

message NpcFeelingRecord{
	optional uint32 lastupdaytime = 1;
	repeated NpcFeelingOneNpc npclist = 2;
	repeated NpcFeelingUnite unitelist = 3;
	optional uint32 exchangecount = 4;
	optional uint32 returncount = 5;
	optional uint32 givecount = 6;
	repeated ItemBrief nouse = 7;
	repeated NpcFlReturn returndrop = 8;
	optional uint32 buycount = 9;
	optional uint32 triggerfavorcount = 10;
	optional uint32 giveleftaddcount = 11;
}

message ItemFuse{
	optional uint32 fuseLevel = 1;
	optional uint32 fuseExpCount = 2;
}

message FuseEquipArg{
	optional uint32 type = 1;
	optional uint64 uid = 2;
	optional uint32 itemID = 3;
}

message FuseEquipRes{
	optional ErrorCode errorcode = 1;
}

message DBGoalAwardsSave{
	optional uint64 roleid = 1;
	repeated GoalAwardsInfo infolist = 2;
}

message HellDropInfo{
	optional uint32 id = 1;
	optional uint32 common = 2;
	optional uint32 count = 3;
	optional uint32 time = 4;
	optional uint32 worse = 5;
	optional uint32 worst = 6;
}

message HellDropInfoAll{
	repeated HellDropInfo all = 1;
	optional uint32 version = 2;
}

message PayConsume{
	optional uint32 lastconsumetime = 1;
	optional uint32 consumescore = 2;
	optional uint32 maxconsumelv = 3;
	optional uint32 thismonthcost = 4;
	repeated uint32 setid = 5;
	optional uint32 lastcheckdowntime = 6;
	repeated uint32 activateid = 7;
}

message OutLookConsumePre{
	optional uint32 score = 1;
	repeated uint32 setid = 2;
}

message PayScoreData{
	optional uint32 score = 1;
}

message SetPreShowArg{
	repeated uint32 showid = 1;
}

message SetPreShowRes{
	optional ErrorCode result = 1;
}

message CompeteDragonInfo2DB{
	optional int32 updateDay = 1;
	optional uint32 throughCount = 2;
	optional uint32 getRewardCount = 3;
}

message GlobalCompeteDragonInfo{
	optional uint32 updateTime = 1;
	optional uint32 curLevelSealType = 2;
	optional uint32 curExpID = 3;
}

message CompeteDragonSceneInfo{
	optional uint32 usetime = 1;
	repeated uint64 roles = 2;
	optional uint32 passtime = 3;
}

message NpcLikeItem{
	optional uint32 itemid = 1;
	optional uint32 itemcount = 2;
	optional uint32 addexp = 3;
	optional NpcFlItemType type = 4;
}

message TurnOverWeeklyTaskItemArg{
	optional uint32 index = 1;
	repeated uint64 itemuid = 2;
}

message TurnOverWeeklyTaskItemRes{
	optional ErrorCode result = 1;
}

message TaskDonateG2MArg{
	optional uint32 type = 1;
	optional uint64 roleid = 2;
	optional uint32 index = 3;
	optional uint32 itemtype = 4;
	optional uint32 itemquality = 5;
	optional uint32 itemid = 6;
	optional uint32 rpcid = 7;
	optional uint32 level = 8;
	optional uint32 quality = 9;
	optional uint32 taskid = 10;
	optional uint32 itemcount = 11;
	optional PeriodTaskType tasktype = 12;
}

message TaskDonateG2MRes{
	optional ErrorCode result = 1;
	optional uint32 ask_uid = 2;
}

message NpcFlArg{
	optional NpcFlReqType reqtype = 1;
	optional NpcLikeItem likeitem = 2;
	optional uint32 npcid = 3;
	optional ItemBrief role2npc = 4;
	optional ItemBrief npc2role = 5;
	optional uint32 uniteid = 6;
	optional uint32 level = 7;
}

message NpcFlRes{
	optional ErrorCode errorcode = 1;
	repeated NpcFeelingOneNpc npclist = 2;
	repeated NpcFeelingUnite unitelist = 3;
	optional uint32 giveleftcount = 4;
	optional uint32 buyleftcount = 5;
	optional uint32 buycost = 6;
	repeated NpcFlNpc2Role npcfavorrole = 7;
	repeated NpcFeelingOneNpc changenpclist = 8;
	repeated NpcFeelingUnite changeunitelist = 9;
	optional ItemBrief role2npc = 10;
	optional ItemBrief npc2role = 11;
	optional uint32 npcflleveltop = 12;
}

message NpcFlArgM2G{
	optional NpcFlArg c2mArg = 1;
	optional uint64 roleid = 2;
	optional uint32 delayid = 3;
	optional double topavgexp = 4;
}

message NpcFlResM2G{
	optional NpcFlRes c2mRes = 1;
	optional NpcFlRoleExp roleexp = 2;
	optional NpcFlNpc2Role npc2role = 3;
}

message NpcFlRoleExp{
	optional uint64 roleid = 1;
	optional uint32 exp = 2;
}

message NpcFlNpc2Role{
	optional uint32 npcid = 1;
	optional NpcFlRoleExp role = 2;
	optional string rolename = 3;
}

message NpcFlGlobal{
	repeated NpcFlRoleExp roles = 1;
	repeated NpcFlNpc2Role npc2role = 2;
	optional uint32 lastdayuptime = 3;
	optional uint32 lastweekuptime = 4;
	repeated NpcFlRoleExp lastday_roles = 5;
	repeated NpcFlNpc2Role lastweek_npc2role = 6;
}

message TaskHelpInfo{
	optional uint64 roleid = 1;
	optional string rolename = 2;
	optional uint32 itemid = 3;
	optional uint32 itemcount = 4;
	optional uint32 time = 5;
}

message NpcFlReturn{
	optional uint32 dropid = 1;
	optional uint32 gtime = 2;
	optional uint32 mailconfid = 3;
}

message ItemRecord{
	optional uint32 itemID = 1;
	optional uint32 itemCount = 2;
	optional bool isreceive = 3;
}

message LuckyActivity{
	repeated ItemRecord itemrecord = 1;
	optional uint32 state = 2;
	optional bool ispay = 3;
}

message GetLuckyActivityInfoArg{
}

message GetLuckyActivityInfoRes{
	optional ErrorCode errorcode = 1;
	repeated ItemRecord itemrecord = 2;
	optional uint32 currencytype = 3;
	optional uint32 price = 4;
	optional bool ispay = 5;
}

message BuyDrawReq{
}

message BuyDrawRes{
	optional ErrorCode errorcode = 1;
}

message LotteryDrawReq{
}

message LotteryDrawRes{
	optional ErrorCode errorcode = 1;
	repeated ItemRecord itemrecord = 2;
	optional uint32 price = 3;
	optional uint32 index = 4;
	optional uint32 currencytype = 5;
}

message NpcFlPara{
	optional NpcFlGlobal globaldata = 1;
}

message BattleFailInfo{
	repeated uint64 roleids = 1;
}

message GoalAwardsServerTeam_G2M{
	optional uint64 roleid = 1;
	repeated uint64 teamidlist = 2;
	optional uint32 gkid = 3;
	optional uint32 goaltype = 4;
}

message BMRankListArg{
	repeated uint64 roleids = 1;
	repeated uint64 svrid = 2;
	optional uint32 sceneid = 3;
}

message BMRankListRes{
	repeated uint64 roleid = 1;
	repeated uint32 rank = 2;
}

message GetDailyTaskRefreshInfoArg{
}

message GetDailyTaskRefreshInfoRes{
	optional ErrorCode result = 1;
	optional uint32 luck = 2;
	optional uint32 refresh_num = 3;
	optional uint32 extra_refresh_num = 4;
	optional uint32 today_buy_num = 5;
	repeated DailyTaskRefreshRoleInfo friendinfo = 6;
}

message DailyTaskRefreshRoleInfo{
	optional uint64 roleid = 1;
	optional string name = 2;
	optional RoleType profession = 3;
	optional uint32 luck = 4;
	optional uint32 refresh_num = 5;
	optional bool already_ask = 6;
	optional bool already_refused = 7;
	optional bool already_helped = 8;
	optional uint32 score = 9;
	optional uint32 time = 10;
	optional bool is_online = 11;
}

message GetDailyTaskAskHelpArg{
}

message GetDailyTaskAskHelpRes{
	optional ErrorCode result = 1;
	optional uint32 help_num = 2;
	repeated DailyTaskRefreshRoleInfo askinfos = 3;
	optional uint32 luck = 4;
}

message GetDailyTaskRefreshRecordArg{
}

message GetDailyTaskRefreshRecordRes{
	optional ErrorCode result = 1;
	repeated DailyTaskRefreshInfo records = 2;
}

message DailyTaskRefreshInfo{
	optional uint64 roleid = 1;
	optional string name = 2;
	optional uint32 score = 3;
	optional bool isnew = 4;
	optional uint32 time = 5;
	optional uint32 old_score = 6;
}

message DailyTaskRefreshOperArg{
	optional DailyRefreshOperType type = 1;
	optional uint64 roleid = 2;
}

message DailyTaskRefreshOperRes{
	optional ErrorCode result = 1;
	optional uint32 score = 2;
	optional uint32 oldscore = 3;
}

message SurviveRecord{
	optional uint32 lastweekuptime = 1;
	optional uint32 point = 2;
	optional uint32 topcount = 3;
	optional bool givereward = 4;
}

message DailyTaskRefreshM2GArg{
	optional uint32 type = 1;
	optional uint32 rpcid = 2;
	optional uint32 count = 3;
	optional uint32 luck = 4;
}

message DailyTaskRefreshM2GRes{
	optional ErrorCode result = 1;
}

message DailyTaskRefreshG2MArg{
	optional uint32 type = 1;
	optional uint64 roleid = 2;
	optional uint32 score = 3;
}

message DailyTaskRefreshG2MRes{
	optional ErrorCode result = 1;
}

message SurviveGlobal{
	optional uint32 lastweekuptime = 1;
}

message DailyTaskEventNtf{
	optional DailyTaskIconType type = 1;
}

message SurviveRankData{
	optional uint64 roleid = 1;
	optional string rolename = 2;
	optional uint32 serverid = 3;
	optional uint32 point = 4;
}

message RoleTaskSaveData{
	optional bool can_refresh = 1;
	optional uint32 cur_score = 2;
	optional uint32 luck = 3;
	optional uint32 daily_refresh_count = 4;
	optional uint32 extra_daily_refresh_count = 5;
	optional uint32 daily_buy_count = 6;
	optional uint32 daily_help_count = 7;
	repeated uint64 asked_roleid = 8;
	repeated DailyTaskRefreshRoleInfo be_ask_help_info = 9;
	repeated DailyTaskRefreshInfo refresh_record = 10;
}

message UpdateRoleTaskDataArg{
	optional DBOperType type = 1;
	optional uint64 roleid = 2;
	optional RoleTaskSaveData data = 3;
}

message UpdateRoleTaskDataRes{
	optional ErrorCode result = 1;
}

message SurviveRoleFightData{
	optional uint64 roleid = 1;
	optional uint32 myrank = 2;
	optional uint32 allrank = 3;
	optional uint32 livetime = 4;
	optional uint32 killcount = 5;
	optional string killedby = 6;
	optional int32 addpoint = 7;
	optional SurviveFightEndType endtype = 8;
}

message SurviveFightSyn{
	optional SurviveFightStage stage = 1;
	optional uint32 lefttime = 2;
	optional uint32 starttime = 3;
	optional uint32 liverolecount = 4;
}

message SurviveReqArg{
}

message SurviveReqRes{
	optional ErrorCode errorcode = 1;
	optional bool givereward = 2;
	optional uint32 curtopcount = 3;
	optional uint32 needtopcount = 4;
	optional uint32 point = 5;
}

message SurviveSynPointArg{
	repeated SurviveRankData roles = 1;
}

message SurviveSynPointRes{
}

message DoodadItemSkill{
	optional uint32 index = 1;
	optional uint32 itemid = 2;
	optional uint32 count = 3;
}

message DoodadItemAllSkill{
	repeated DoodadItemSkill skills = 1;
}

message EmptyData{
}

message UpdateFreeflowHintInfo{
	optional uint32 hint_time = 1;
}

message SurviveResultPara{
	optional SurviveRoleFightData result = 1;
}

message SurviveKillPara{
	optional string killername = 1;
	optional string deadname = 2;
}

message DragonGuildRoleActicityData{
	optional uint64 roleId = 1;
	optional uint32 activity = 2;
}

message GoalAwardsValue{
	optional uint32 gkid = 1;
	optional double gkvalue = 2;
}

message ConsumeRebateBrief{
	optional uint32 days = 1;
	optional uint32 rate = 2;
}

message ConsumeRebateNtfData{
	optional uint32 startdate = 1;
	optional uint32 enddate = 2;
	optional uint32 rebate = 3;
}

message PayConsumeRebate{
	optional uint32 consumenum = 1;
	optional uint32 lastconsumetime = 2;
	optional uint32 rate = 3;
}

message PeerBoxArg{
	optional uint32 index = 1;
}

message PeerBoxRes{
	optional ErrorCode errorcode = 1;
	optional ItemBrief item = 2;
	optional uint32 type = 3;
}

message QueryBoxsArg{
}

message QueryBoxsRes{
	optional ErrorCode errorcode = 1;
	optional uint32 timeleft = 2;
	repeated BoxInfos boxinfos = 3;
}

message BoxInfos{
	repeated ItemBrief items = 1;
	optional uint32 index = 2;
	optional uint64 roleid = 3;
	repeated uint32 type = 4;
}

message SkyCityRankData{
	optional uint64 roleid = 1;
	optional string rolename = 2;
	optional uint32 floor = 3;
	optional uint32 killer = 4;
	optional uint32 job = 5;
	optional double fight = 6;
}

message MulActivityIconSys{
	optional uint32 id = 1;
}

message ActivatePreShowArg{
	optional uint32 id = 1;
}

message ActivatePreShowRes{
	optional ErrorCode result = 1;
}

message FashionSynthesisInfoArg{
	optional uint32 fashion_id = 1;
}

message FashionSynthesisInfoRes{
	optional uint32 fashion_id = 1;
	optional uint32 add_succes_rate = 2;
	optional ErrorCode result = 3;
}

message FashionIBShopBuyArg{
	repeated ItemBrief item = 1;
}

message FashionIBShopBuyRes{
	optional ErrorCode result = 1;
}

message WordNotify{
	optional string hint = 1;
}

message BigMeleePoint{
	optional uint32 point = 1;
	optional uint32 posxz = 2;
}

message GuildPartySummonSpiritArg{
}

message GuildPartySummonSpiritRes{
	optional ErrorCode result = 1;
}

message BigMeleePointOutLook{
	optional uint64 roleid = 1;
	optional uint32 point = 2;
}

message TaskRefreshNtf{
	optional uint32 score = 1;
	optional uint32 remain_refresh_count = 2;
}

message KickAccountJkydMsg{
	optional string msg = 1;
	optional KickType kt = 2;
}

message KickAccountJkydG2M{
	optional uint64 roleid = 1;
	optional KickType kt = 2;
	optional PunishData odata = 3;
}

message GetDailyTaskG2MArg{
	optional uint32 rpcid = 1;
}

message GetDailyTaskG2MRes{
	optional uint32 remain_refresh_count = 1;
	optional uint32 luck = 2;
}

message QaBase{
	optional uint32 type = 1;
	optional uint32 time = 2;
	optional uint32 count = 3;
}

message QaBaseList{
	optional QaBase one = 1;
	optional QaBase multi = 2;
	optional QaBase guild = 3;
}

message GuildCastFeats{
	optional uint64 roleid = 1;
	optional uint32 feats = 2;
}

message ChooseSpecialEffectsArg{
	optional uint32 special_effects_id = 1;
}

message ChooseSpecialEffectsRes{
	optional ErrorCode result = 1;
}

message TeamCrossChangeSceneExtra{
	optional int32 type = 1;
	repeated TeamSynMember members = 2;
}

message EnterLeisureSceneArg{
	optional int32 index = 1;
}

message EnterLeisureSceneRes{
	optional ErrorCode errorcode = 1;
}

message ServerCrossTeamData{
	optional int32 weeknextexpid = 1;
	optional GlobalDragonInfo globaldragoninfo = 2;
}

message BackFlowData{
	optional uint32 worldlevel = 1;
	optional uint32 point = 2;
	repeated uint32 alreadyGet = 3;
	repeated string payGiftType = 4;
	repeated uint32 payGiftCount = 5;
	optional uint32 lostDay = 6;
	optional BackFlowShopData shop = 7;
	optional uint32 lastSmallDragonFinishTime = 8;
	optional bool isFinishBackFlowScene = 9;
	optional uint32 lastNestFinishTime = 10;
	optional uint32 nestFinishCount = 11;
}

message BackFlowActivityOperationArg{
	optional BackFlowActOp type = 1;
	optional uint32 arg = 2;
}

message BackFlowActivityOperationRes{
	optional ErrorCode errorcode = 1;
	optional uint32 point = 2;
	repeated uint32 alreadyGet = 3;
	optional BackFlowShopData shop = 4;
	optional uint32 shopLeftTime = 5;
	optional uint32 activityLeftTime = 6;
	optional uint32 leftSmallDragonCount = 7;
	optional uint32 leftNestCount = 8;
}

message PayTotalNtfData{
	optional uint32 totalamt = 1;
}

message BackFlowShopGood{
	optional uint32 GoodID = 1;
	optional bool IsBuy = 2;
	optional uint32 LockTime = 3;
}

message BackFlowPreData{
	repeated bool isOnline = 1;
	optional uint32 lastUpdateTime = 2;
}

message GetNewZoneBenefitArg{
}

message GetNewZoneBenefitRes{
	optional ErrorCode result = 1;
	optional bool is_open = 2;
	optional bool has_select = 3;
	repeated ZoneRoleInfo roles = 4;
	optional uint64 select_roleid = 5;
	optional uint32 total_paycnt = 6;
}

message ZoneRoleInfo{
	optional uint32 serverid = 1;
	optional string servername = 2;
	optional uint64 roleid = 3;
	optional string rolename = 4;
	optional RoleType roleprofession = 5;
	optional uint32 rolelevel = 6;
	optional uint32 paycnt = 7;
	optional uint32 opentime = 8;
}

message GetNewZoneBenefitG2MArg{
	optional uint32 rpcid = 1;
	optional uint32 opertype = 2;
	optional uint64 selectroleid = 3;
}

message GetNewZoneBenefitG2MRes{
	optional ErrorCode result = 1;
	repeated ZoneRoleInfo roles = 2;
	optional uint64 select_roleid = 3;
	optional uint32 bind_pay = 4;
}

message GetZoneRoleInfoM2IArg{
	optional uint32 opertype = 1;
	optional uint32 rpcid = 2;
	optional string account = 3;
	optional uint32 except_serverid = 4;
	optional uint32 openservertime = 5;
	optional uint64 roleid = 6;
	optional uint32 serverid = 7;
	optional uint32 paycnt = 8;
}

message GetZoneRoleInfoM2IRes{
	optional ErrorCode result = 1;
	repeated ZoneRoleInfo roles = 2;
	optional uint64 bindroleid = 3;
	optional uint32 bind_pay = 4;
}

message GetZoneRoleInfoI2MArg{
	optional uint32 opertype = 1;
	optional string account = 2;
	optional uint32 serverid = 3;
	optional uint64 roleid = 4;
	optional uint32 paycnt = 5;
	optional uint32 rpcid = 6;
}

message GetZoneRoleInfoI2MRes{
	optional ErrorCode result = 1;
	repeated ZoneRoleInfo roles = 2;
}

message ReadAccountDataNewArg{
	optional uint32 opertype = 1;
	optional string account = 2;
	optional uint32 serverid = 3;
	optional uint32 rpcid = 4;
}

message ReadAccountDataNewRes{
	optional ErrorCode result = 1;
	repeated ZoneRoleInfo roles = 2;
}

message SelectChargeBackRoleArg{
	optional uint64 roleid = 1;
}

message SelectChargeBackRoleRes{
	optional ErrorCode result = 1;
}

message ReadMailFromDBArg{
	optional uint64 roleid = 1;
}

message ReadMailFromDBRes{
	repeated SMail mails = 1;
	optional ErrorCode result = 2;
}

message UpdateStageInfoNtf{
	optional StageInfo Stages = 1;
}

message PkRoleRankLog{
	optional uint32 serverid = 1;
	optional uint64 roleid = 2;
	optional string openid = 3;
	optional uint32 point = 4;
	optional uint32 profession = 5;
	optional uint32 pro_rank = 6;
	optional uint32 all_rank = 7;
}

message PkRoleRankLogPara{
	repeated PkRoleRankLog roles = 1;
}
