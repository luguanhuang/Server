// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: enum.proto

#ifndef PROTOBUF_enum_2eproto__INCLUDED
#define PROTOBUF_enum_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace KKSG {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_enum_2eproto();
void protobuf_AssignDesc_enum_2eproto();
void protobuf_ShutdownFile_enum_2eproto();


enum KickType {
  KICK_NORMAL = 0,
  KICK_RELOGIN = 1,
  KICK_GMFORBID = 2,
  KICK_SERVER_SHUTDOWN = 3,
  KICK_DEL_ROLE = 4,
  KICK_CHANGE_PROFESSION = 5,
  KICK_HG = 6
};
bool KickType_IsValid(int value);
const KickType KickType_MIN = KICK_NORMAL;
const KickType KickType_MAX = KICK_HG;
const int KickType_ARRAYSIZE = KickType_MAX + 1;

enum ErrorCode {
  ERR_SUCCESS = 0,
  ERR_UNKNOWN = 1,
  ERR_PASSWORD_ERROR = 2,
  ERR_RELOGIN = 3,
  ERR_ACCOUNT_NOT_EXIST = 4,
  ERR_NAME_EXIST = 5,
  ERR_INVALID_NAME = 6,
  ERR_STATE_ERROR = 7,
  ERR_PROFESSION_TYPE = 8,
  ERR_FAILED = 9,
  ERR_ACCOUNT_ROLE_FULL = 10,
  ERR_ACCOUNT_DATA_ERROR = 11,
  ERR_TIMEOUT = 12,
  ERR_SKILL_CONFIGERROR = 13,
  ERR_SKILL_LEVELREQ = 14,
  ERR_SKILL_ITEMREQ = 15,
  ERR_ACHIVE_NOTCOMPLETE = 16,
  ERR_ACHIVE_NOTCONFIG = 17,
  ERR_SKILL_POINT = 18,
  ERR_PROF_ERROR = 19,
  ERR_PROF_LEVELREQ = 20,
  ERR_PROF_LEVELREQ2 = 21,
  ERR_BIND_SKILL_OUTRANGE = 22,
  ERR_BIND_SKILL_NOT_LEARN = 23,
  ERR_BIND_SKILL_MISSSLOT = 24,
  ERR_ENHANCE_ERROR = 25,
  ERR_ENHANCE_LACKITEM = 26,
  ERR_ENHANCE_FAILED = 27,
  ERR_ENHANCE_SUCCEED = 28,
  ERR_ENHANCE_MAX = 29,
  ERR_ARENA_ERROR = 30,
  ERR_ARENA_COUNTLIMIT = 31,
  ERR_DECOMPOSE_FAILED = 32,
  ERR_DECOMPOSE_CANNOT = 33,
  ERR_DECOMPOSE_NOTFIND = 34,
  ERR_SCENE_LEVELREQ = 35,
  ERR_SCENE_NOFATIGUE = 36,
  ERR_SCENE_TODYCOUNTLIMIT = 37,
  ERR_SCENE_NEEDPREVCOMPLETE = 38,
  ERR_ITEM_NOTEXIST = 39,
  ERR_ITEM_LEVELLIMIT = 40,
  ERR_ITEM_CANNOTBEEQUIPED = 41,
  ERR_EMBLEM_NOEMPTYSLOT = 42,
  ERR_ITEM_NOT_ENOUGH = 43,
  ERR_EMBLEM_MAXLEVEL = 44,
  ERR_JADE_MAXLEVEL = 45,
  ERR_JADECOMPOSE_NOTFIND = 46,
  ERR_JADEATTACH_NOEMPTYSLOT = 47,
  ERR_JADE_COUNTNOTENOUGH = 48,
  ERR_CHECKIN_FULL = 49,
  ERR_CHECKIN_LACKDRAGONCOIN = 50,
  ERR_ACTIVITY_NOCHESTINDEX = 51,
  ERR_ACTIVITY_HASGETCHEST = 52,
  ERR_ACTIVITY_NOTENOUGHVALUE = 53,
  ERR_ACTIVITY_SPECIALCHESTCOUNTLIMIT = 54,
  ERR_ARENA_ADDCOUNTLACKCOIN = 55,
  ERR_JADE_OPENJADELACKCOIN = 56,
  ERR_JADE_NOEMPTYSLOT = 57,
  ERR_ITEM_NEED_DRAGONCOIN = 58,
  ERR_BUY_LIMIT = 59,
  ERR_SWEEP_NOT_THREE_STAR = 60,
  ERR_SHOP_ITEMNOTEXIST = 61,
  ERR_SHOP_LACKMONEY = 62,
  ERR_TEAM_ALREADY_INTEAM = 63,
  ERR_TEAM_NOT_EXIST = 64,
  ERR_TEAM_FULL = 65,
  ERR_TEAM_WRONG_PASSWORD = 66,
  ERR_SCENE_TIMELIMIT = 67,
  ERR_TEAM_EXPEDITIONID_NOT_EXIST = 68,
  ERR_TEAM_LEVEL_REQUARE = 69,
  ERR_SCENE_COOLDOWN = 70,
  ERR_SKILL_MAXLEVEL = 71,
  ERR_WORLDBOSS_DEAD = 72,
  ERR_REINFORCE_LEVELLIMIT = 73,
  ERR_REINFORCE_LACKMONEY = 74,
  ERR_ARENA_REWARDTAKEN = 75,
  ERR_SKILL_PROFESSION_ERROR = 76,
  ERR_SKILL_NEED_PRESKILL = 77,
  ERR_LOGIN_TIMEOUT = 78,
  ERR_LOGIN_NOSERVER = 79,
  ERR_SHOP_LEVELLIMIT = 80,
  ERR_SHOP_PPTLIMIT = 81,
  ERR_SHOP_COUNTLIMIT = 82,
  ERR_SHOP_DAILYCOUNTLIMIT = 83,
  ERR_CHAT_LEVELLIMIT = 84,
  ERR_CHAT_LENGTHLIMIT = 85,
  ERR_CHAT_TIMELIMIT = 86,
  ERR_FASHOIN_ALREADY_EXIST = 87,
  ERR_FASHION_NOT_EXIST = 88,
  ERR_FRIEND_MAX = 89,
  ERR_FRIEND_REPEATED = 90,
  ERR_FRIEND_NOTEXIST = 91,
  ERR_BLACK_INSELF = 92,
  ERR_BLACK_INOTHER = 93,
  ERR_BLACK_NOTEXIST = 94,
  ERR_LOGIN_VERIFY_FAILED = 95,
  ERR_GUILD_NOT_EXIST = 96,
  ERR_GUILD_NAME_EXIST = 97,
  ERR_GUILD_NOT_IN_GUILD = 98,
  ERR_GUILD_ALREADY_IN_GUILD = 99,
  ERR_GUILD_NO_PERMISSION = 100,
  ERR_CHAPTERCHEST_ALREADY_FETCHED = 101,
  ERR_CHAPTERCHEST_NEEDSTAR = 102,
  ERR_SESSION_KICKOFF = 103,
  ERR_ALIVE_TIMEOUT = 104,
  ERR_GS_CLOSED = 105,
  ERR_FASHIONCOMPOSE_LEVEL_REQ = 106,
  ERR_GUILD_FULL = 107,
  ERR_GUILD_PPT_REQ = 108,
  ERR_GUILD_WAITAPPROVAL = 109,
  ERR_GUILD_MEMBER_NOT_EXIST = 110,
  ERR_FLOWER_SELF = 111,
  ERR_FLOWER_COUNTLIMIT = 112,
  ERR_FLOWER_ROLELIMIT = 113,
  ERR_FLOWER_COSTLIMIT = 114,
  ERR_GUILDCARD_ALLCOUNTLIMIT = 115,
  ERR_GUILDCARD_COUNTLIMIT = 116,
  ERR_GUILDCARD_CHANGELIMIT = 117,
  ERR_GUILDCHECKIN_LIMIT = 118,
  ERR_GUILDCHECKIN_MONEY = 119,
  ERR_GUILDCHECKIN_TAKEN = 120,
  ERR_GUILDCHECKIN_BOXLIMIT = 121,
  ERR_SCENE_NEED_PRESCENE = 122,
  ERR_GUILDBONUS_NOTEXIST = 123,
  ERR_GUILDBONUS_ALREADYGET = 124,
  ERR_GUILDBONUS_EXCEED = 125,
  ERR_GUILD_OPENLIMIT = 126,
  ERR_SHOP_OPENLIMIT = 127,
  ERR_GUILDCHECKIN_ALLCOUNT = 128,
  ERR_TEAM_EXPEDITION_DAYCOUNT = 129,
  ERR_TEAM_GUILD_DAYCOUNT = 130,
  ERR_TEAM_NEST_DAYCOUNT = 131,
  ERR_GUILD_LEVEL_REQ = 132,
  ERR_TEAM_NOT_OPENTIME = 133,
  ERR_TEAM_NEED_ATLEAST_2_MEMBER = 134,
  ERR_TEAM_ONLY_LEADER_CAN_KICK = 135,
  ERR_TEAM_MEMBER_NOT_EXIST = 136,
  ERR_SKILL_GUILD_CONTRIBUTE = 137,
  ERR_REWARD_TAKEN = 138,
  ERR_REWARD_LIMIT = 139,
  ERR_REWARD_NOTEXIST = 140,
  ERR_GUILD_VICE_FULL = 141,
  ERR_GUILD_OFFICER_FULL = 142,
  ERR_GUILD_ELITE_FULL = 143,
  ERR_TEAM_MEMBER_NOT_ONLINE = 144,
  ERR_TEAM_DISAGREE_BATTLE = 145,
  ERR_TEAM_ONLY_LEADER_CAN_STARTBATTLE = 146,
  ERR_TEAM_MATCHING = 147,
  ERR_ROLE_NOT_ONLINE = 148,
  ERR_TEAM_ONLY_LEADER_CAN_DO = 149,
  ERR_LACKCOIN = 150,
  ERR_LACKDIAMOND = 151,
  ERR_SMELTING_INVALID = 152,
  ERR_SMELTING_TRANSINVALID = 153,
  ERR_GUILD_NAME_TOO_SHORT = 154,
  ERR_GUILD_NAME_TOO_LONG = 155,
  ERR_TEAM_NOT_IN_HALL = 156,
  ERR_TEAM_IN_BATTLE = 157,
  ERR_TEAM_VOTE = 158,
  ERR_TEAM_STATE_ERROR = 159,
  ERR_TEAM_INVITE_ROLE_IS_IN_BATTLE = 160,
  ERR_ITEM_COOLDOWN = 161,
  ERR_LOGIN_FORBID = 162,
  ERR_LOGIN_MAXNUM = 163,
  ERR_SCENE_NEED_PRETASK = 164,
  ERR_NAME_HAS_INVALID_CHAR = 165,
  ERR_SMELTING_LACKMONEY = 166,
  ERR_OTHER_GAOJIGU_NOTOPEN = 167,
  ERR_FISHING_NUMNOTENOUGH = 168,
  ERR_FISHING_ALREADYSEAT = 169,
  ERR_FISHING_SEATNOTEMPTY = 170,
  ERR_SLOTATTR_NOEQUIP = 171,
  ERR_SLOTATTR_MONEYLIMIT = 172,
  ERR_SLOTATTR_LEVELLIMIT = 173,
  ERR_PK_NOMATCH = 174,
  ERR_ITEM_WRONG_PROFESSION = 175,
  ERR_SKILL_NOT_MATCH = 176,
  ERR_TSHOW_LEVEL_NOTENOUGH = 177,
  ERR_TRANSFER_LACKMONEY = 178,
  ERR_AUCT_HAVEBIDDING = 179,
  ERR_AUCT_ITEMOUTSALE = 180,
  ERR_AUCT_PRICECHAGE = 181,
  ERR_AUCT_SURPASSSELF = 182,
  ERR_AUCT_POINTLESS = 183,
  ERR_AUCT_DRAGONCOINLESS = 184,
  ERR_AUCT_BUYSELF = 185,
  ERR_ALREADY_IN_CAMP = 186,
  ERR_NOT_IN_CAMP = 187,
  ERR_AUCT_ONSALEMAX = 188,
  ERR_AUCT_COMMONERR = 189,
  ERR_AUCT_ITEMSALED = 190,
  ERR_SCENE_NOT_IN_CONFIG = 191,
  ERR_GAOJIGU_MODEL_DUPLICATE_FASHIONID = 192,
  ERR_TEAMBUY_COUNT_MAX = 193,
  ERR_TEAMBUY_DIAMOND_LESS = 194,
  ERR_ADDFRIEND_DUMMYROLE = 195,
  ERR_VERSION_FAILED = 196,
  ERR_EXPBACK_ALREADYGET = 197,
  ERR_PK_OPENTIME = 198,
  ERR_ITEM_NEED_DIAMOND = 199,
  ERR_WORD_FORBID = 200,
  ERR_TEAM_TOWER_DAYCOUNT = 201,
  ERR_AUCTGOLDLESS = 202,
  ERR_ILLEGAL_CODE = 203,
  ERR_GUILD_CHECKINBONUS_TIMEERROR = 204,
  ERR_GUILD_CHECKINBONUS_ASKTOOMUCH = 205,
  ERR_TEAM_NOJOININBATTLE = 206,
  ERR_REGISTER_NUM_LIMIT = 207,
  ERR_FRIEND_MAXOTHER = 208,
  ERR_FRIEND_SENDLIMIT = 209,
  ERR_FRIEND_TAKENLIMIT = 210,
  ERR_ROLE_NOTEXIST = 211,
  ERR_RANDOMFRIEND_CD = 212,
  ERR_ENHANCE_TRANSLEVEL = 213,
  ERR_ENHANCE_TRANSPOS = 214,
  ERR_GUILD_LVL_LIMIT = 215,
  ERR_FRIEND_HASSEND = 216,
  ERR_GUILD_APPLYFULL = 217,
  ERR_BLACK_CHAT = 218,
  ERR_PVP_ROLE_INBATTLE = 219,
  ERR_FRIEND_SELF = 220,
  ERR_BLACK_MAX = 221,
  ERR_EMBLEM_NOIDENTIFY = 222,
  ERR_EMBLEM_NOTHIRDSLOT = 223,
  ERR_EMBLEM_CANTIDENTIFY = 224,
  GUILD_SKILL_STUDY_LEVEL_LIMIT = 225,
  GUILD_SKILL_GUILD_LEVEL_LIMIT = 226,
  ERR_GUILD_EXP_LIMIT = 227,
  ERR_REVIVE_MAXNUM = 228,
  ERR_QA_OVER_NAME_TIME = 229,
  ERR_QA_IN_OTHER_TYPE = 230,
  ERR_JADE_MINEQUIPLEVEL = 231,
  ERR_SWEEP_POWERPOINT_LESS = 232,
  ERR_SWEEP_TICKET_LESS = 233,
  ERR_ACCOUNT_INVALID = 234,
  ERR_JADE_WRONGTYPE = 235,
  ERR_SHOP_TIMELIMIT = 236,
  ERR_SHOP_VIPLIMIT = 237,
  ERR_SHOP_ARENALIMIT = 238,
  ERR_SHOP_PKLIMIT = 239,
  ERR_SHOP_GUILDLIMIT = 240,
  ERR_AUDIO_NOT_EXIST = 241,
  ERR_SHOP_INVALID = 242,
  ERR_WATCH_LIVEISOVER = 243,
  ERR_WATCH_LIVEISFULL = 244,
  ERR_TOWER_INSWEEP = 245,
  ERR_TOWER_FLOOR_NOTENOUGH = 246,
  ERR_DRAGON_TICKET_NOTENOUGH = 247,
  ERR_WATCH_WAIT = 248,
  ERR_OP_EXP_NOT_OPEN = 249,
  ERR_TEAM_GODDESS_DAYCOUNT = 250,
  ERR_TEAM_SEAL_TYPE = 251,
  ERR_DRAGON_PROGRESS_INVALID = 252,
  ERR_TEAMBUY_DRAGONCOIN_LESS = 253,
  ERR_JADE_REPLACE = 254,
  ERR_PVP_TEAM_MATCH = 255,
  ERR_GS_UNREADY = 256,
  ERR_INVALID_REQUEST = 257,
  ERR_PET_NOT_EXIST = 258,
  ERR_PE_CAN_NOT_RELEASE = 259,
  ERR_PETSYS_NOT_OPEN = 260,
  ERR_PET_SEAT_NOT_ENOUGH = 261,
  ERR_ACCOUNT_QUEUING = 262,
  ERR_TITLE_MAX = 263,
  ERR_TITLE_LACKITEM = 264,
  ERR_TITLE_PPTLIMIT = 265,
  ERR_BLACK_REPEATED = 266,
  ERR_BLACK_SELF = 267,
  ERR_TEAM_LEADER_NOTHELPER = 268,
  ERR_PET_IS_FULL = 269,
  ERR_IBSHOP_LACKGOODS = 270,
  ERR_IBSHOP_LIMITCOUNT = 271,
  ERR_IBSHOP_LACKDIAMOND = 272,
  ERR_IBSHOP_LACKDRAGON = 273,
  ERR_CHAT_PUNISH = 274,
  ERR_LOCKED_ROLE = 275,
  ERR_IBSHOP_ERRPARAM = 276,
  ERR_IBSHOP_BUYLV = 277,
  ERR_SPRITE_NOTFIND = 278,
  ERR_SPRITE_LEVELMAX = 279,
  ERR_SPRITE_EVOLUTION_LEVELMAX = 280,
  ERR_SPRITE_EVOLUTION_LEVELLIMIT = 281,
  ERR_SPRITE_EVOLUTION_LACKOFCOST = 282,
  ERR_SPRITE_AWAKE_LACKOFCOST = 283,
  ERR_SPRITE_LEVELUP_LACKOFCOST = 284,
  ERR_SPRITE_ALREADY_INFIGHT = 285,
  ERR_SPRITE_INFIGHT_FULL = 286,
  ERR_SPRITE_ALREADY_OUTFIGHT = 287,
  ERR_REVIVE_ITEMLIMIT = 288,
  ERR_REVIVE_MONEYLIMIT = 289,
  ERR_ENHANCE_NO_EQUIP_CAN_TRANSFORM = 290,
  ERR_IBSHOP_VIPLEVEL = 291,
  ERR_IBSHOP_OPENGROUP = 292,
  ERR_SPRITE_INFIGHT_SAMETYPE = 293,
  ERR_SMELT_MINLEVEL = 294,
  ERR_JADE_GOLDNOTENOUGH = 295,
  ATLAS_CARD_NOT_ENOUGH = 296,
  ERR_AUCT_ITEM_LESS = 297,
  ERR_AUCT_ITEM_LOCK = 298,
  ERR_AUCT_PRICE_NOTCHANGE = 299,
  ERR_LEVELSEAL_PROP_NOT_ENGOUTH = 300,
  ERR_AUCT_AUTOREFRESH_TIME = 301,
  ERR_ATLAS_NOT_BREAK = 302,
  ERR_LOGIN_NOT_IN_WHITE_LIST = 303,
  ERR_TEAM_NOT_PASS = 304,
  ERR_QA_ALEADY_IN_ROOM = 500,
  ERR_QA_NO_DATA = 501,
  ERR_QA_LEVEL_NOT_ENOUGH = 502,
  ERR_QA_NOT_IN_TIME = 503,
  ERR_QA_NO_GUILD = 504,
  ERR_QA_NO_COUNT = 505,
  ERR_TASK_NOT_ACCEPT = 510,
  ERR_TASK_ALREADY_TAKE = 511,
  ERR_TASK_NOT_FOUND = 512,
  ERR_TASK_NOT_FINISH = 513,
  ERR_TASK_NO_TABLE = 514,
  ERR_GUILD_LADDER_NOT_OPEN = 515,
  ERR_GARDEN_NOTEXIST_FARMLAND = 516,
  ERR_GARDEN_NOHARVESTSTATE = 517,
  ERR_GARDEN_STEALEDTIMES_EXCEED = 518,
  ERR_GARDEN_NOTEXIST_SEEDID = 519,
  ERR_GARDEN_NOTEXIST_SPRITE = 520,
  ERR_SKYCITY_NOT_OPEN = 521,
  ERR_GMF_UP_INCOOL = 522,
  ERR_GMF_UP_FULL = 523,
  ERR_QA_NO_GUILD_ROOM = 524,
  ERR_TEAM_ALREADY_INOTHERTEAM = 525,
  ERR_TEAM_IDIP = 526,
  ERR_COMMENDWATCH_COUNTLIMIT = 527,
  ERR_CARDMATCH_BEGINFAILED = 528,
  ERR_CARDMATCH_NOBEGIN = 529,
  ERR_CARDMATCH_ENDSOON = 530,
  ERR_CARDMATCH_CHANGELIMIT = 531,
  ERR_SKILL_PREPOINTLIMIT = 532,
  ERR_SPACTIVITY_TASK_NOT_COMPLETE = 533,
  ERR_SPACTIVITY_TASK_GET = 534,
  ERR_SPACTIVITY_NOPRIZE = 535,
  ERR_SPACTIVITY_NOTPRIZETIME = 536,
  ERR_SPACTIVITY_NOTENOUGH_MONEY = 537,
  ERR_SPACTIVITY_PRIZE_GET = 538,
  ERR_GARDEN_PLANT_CD = 539,
  ERR_GARDEN_COOKING_EXCEED = 540,
  ERR_GARDEN_COOKINGLEVEL_LOW = 541,
  ERR_GARDEN_PLANT_CUL_ERR = 542,
  ERR_GARDEN_ERR_SEED = 543,
  ERR_GARDEN_NOSEED = 544,
  ERR_GARDEN_NOALLOW = 545,
  ERR_GMF_NOPOWER_KICK_LEADER = 546,
  ERR_SPRITE_ALREADY_ISLEADER = 547,
  ERR_SPRITE_AWAKE_ROLE_LEVELLIMIT = 548,
  ERR_SPRITE_EVOLUTION_ROLE_LEVELLIMIT = 549,
  ERR_GUILD_ALREADY_BIND = 550,
  ERR_GUILD_NOT_BIND = 551,
  ERR_ALREADY_IN_QQGROUP = 552,
  ERR_INSPIRE_COOLDOWN = 553,
  ERR_SKYCITY_IN_TEAM = 554,
  ERR_SKYCITY_TEAM_OUTTIME = 555,
  ERR_GMF_DOWN_FIGHTING = 556,
  ERR_GMF_DOWN_HAVEFAILED = 557,
  ERR_JADE_SAME_TYPE = 558,
  ERR_CHAT_BLACK_INSELF = 559,
  ERR_CHAT_BLACK_INOTHER = 560,
  ERR_GARDEN_QUESTS_NOENOUGH = 561,
  ERR_GARDEN_NOTINGARDEN = 562,
  ERR_GARDEN_FOODBOOK_ACTIVED = 563,
  ERR_ROLE_LOGOUT = 564,
  ERR_TEAM_INV_LOGOUT = 565,
  ERR_SKYCITY_LV = 566,
  ERR_RESWAR_TEAM = 567,
  ERR_RESWAR_ACTIVITY = 568,
  ERR_RESWAR_GROUP = 569,
  ERR_RESWAR_STATE = 570,
  ERR_RESWAR_CD = 571,
  ERR_BAG_FULL = 572,
  ERR_BAG_FULL_TAKEOFF_EQUIP = 573,
  ERR_BAG_FULL_TAKEOFF_FASHION = 574,
  ERR_BAG_FULL_TAKEOFF_EMBLEM = 575,
  ERR_BAG_FULL_TAKEOFF_JADE = 576,
  ERR_BAG_FULL_GIVE_MAIL_REWARD = 577,
  ERR_AUCT_PRICE_CHANGE = 578,
  ERR_GMF_UPBATTLE_REPEAT = 579,
  ERR_PANDORA_LACKOF_FIRE = 580,
  ERR_AUCT_AUCTOVER = 581,
  ERR_GOLDCLICK_LIMIT = 582,
  ERR_DRAGONCOIN_LIMIT = 583,
  ERR_NOTGUILD = 584,
  ERR_SCENE_NOT_PET = 585,
  ERR_GUILDBONUS_ALLGET = 586,
  ERR_GUILDBUFF_GUILD = 587,
  ERR_GUILDBUFF_POS = 588,
  ERR_GUILDBUFF_CD = 589,
  ERR_GUILDBUFF_ITEM = 590,
  ERR_RESWAR_LEADER = 591,
  ERR_RESWAR_LACKPLAYER = 592,
  ERR_TEAM_INV_IN_FAMILY = 593,
  ERR_TASK_NO_ASK_HELPNUM = 594,
  ERR_TASK_CANNOT_HELP = 595,
  ERR_TASK_ALREADY_FINISH = 596,
  ERR_TASK_ALREADY_ASKED = 597,
  ERR_GARDEN_NOEXIST_FOODID = 598,
  ERR_GARDEN_FOOD_NOALLOW = 599,
  ERR_TASK_NO_ASKINFO = 600,
  ERR_TASK_ASKITEM_REFRESH = 601,
  ERR_ANTI_CHEAT_DETECTED = 305,
  ERR_MS_UNREADY = 306,
  ERR_PET_EXP_EQUAL = 602,
  ERR_TASK_CANNT_HELPSELF = 603,
  CanNotDelInGuildArena = 604,
  ERR_RESWAR_TEAMFIGHTING = 605,
  ERR_TASK_CANNOT_GIVEUP = 606,
  ERR_GUILD_INHERIT_NOT_EXIT = 607,
  ERR_GUILD_INHERIT_GAP = 608,
  ERR_GUILD_INHERIT_LVL = 609,
  ERR_GUILD_INHERIT_TIMES = 610,
  ERR_GUILD_INHERIT_MAP_WRONG = 611,
  ERR_TEAMCOST_DIAMOND = 612,
  ERR_TEAMCOST_DRAGON = 613,
  ERR_TEAM_PPTLIMIT = 614,
  ERR_GUILD_INHERIT_CD_TIME = 615,
  ERR_MS_UNNORMAL = 616,
  ERR_TEAMCOST_NUMLIMIT = 617,
  ERR_STATE_CANTCHANGE = 618,
  ERR_TEAM_MEMCOUNT_OVER = 619,
  ERR_GUILD_INHERIT_CAN_NOT = 620,
  ERR_SYS_NOTOPEN = 621,
  ERR_NAME_ALLNUM = 622,
  ERR_NAME_TOO_LONG = 623,
  ERR_NAME_TOO_SHORT = 624,
  ERR_GUILD_INHERIT_OTHER_TIMES = 625,
  ERR_NEED_FIRST_PROMOTE = 626,
  ERR_FM_NOANCHOR = 627,
  ERR_CAN_NOT_USE_PET_SKILL_BOOK = 628,
  ERR_ENCHANT_MINLEVEL = 629,
  ERR_ENCHANT_LACKITEM = 631,
  ERR_ENCHANT_WRONGPOS = 632,
  ERR_PARTNER_NUM_INVALID = 650,
  ERR_PARTNER_FDEGREE_NOT_ENOUGH = 651,
  ERR_PARTNER_NOT_IN_MAIN_HALL = 652,
  ERR_PARTNER_NOT_ENOUGH_DRAGON = 653,
  ERR_PARTNER_CD_NOT_OK = 654,
  ERR_HORSE_ACTIVITY = 655,
  ERR_TEAM_WEEK_NEST_EXP = 656,
  ERR_PARTNER_CHEST_TAKED = 657,
  ERR_PARTNER_NO_PARTNER = 658,
  ERR_PARTNER_LN_NOT_ENOUGH = 659,
  ERR_PARTNER_ALREADY_HAS = 660,
  ERR_PARTNER_ALREADY_APPLY_LEAVE = 661,
  ERR_PARTNER_NOT_APPLY_LEAVE = 662,
  ERR_INVFIGHT_ROLE_LOGOUT = 663,
  ERR_INVFIGHT_ME_LEVEL = 664,
  ERR_INVFIGHT_ME_SCENE = 665,
  ERR_INVFIGHT_OTHER_LEVEL = 666,
  ERR_INVFIGHT_OTHER_SCENE = 667,
  ERR_INVFIGHT_INV_REPEAT = 668,
  ERR_INVFIGHT_INV_COUNT_MAX = 669,
  ERR_INVFIGHT_INV_TIME_OVER = 670,
  ERR_INVFIGHT_INV_DELAY = 671,
  ERR_DOODAD_FULL = 672,
  ERR_INVFIGHT_INV_TO_COUNT_MAX = 673,
  ERR_PARTNER_ITEM_NOT_FOUND = 674,
  ERR_PARTNER_OTHER_BUYING = 675,
  ERR_PARTNER_SHOP_NO_COUNT = 676,
  ERR_FRIEND_IS_PARTNER = 677,
  ERR_PANDORA_LACKOF_HEART = 678,
  ERR_SELF_HAS_ALLIANCE = 679,
  ERR_OTHER_HAS_ALLIANCE = 680,
  ERR_AUDIOTXT = 681,
  ERR_MENTOR_ASKMAXTODAY = 682,
  ERR_MENTOR_REFRESHTOOFAST = 683,
  ERR_MENTOR_OTHER_ONLINE = 684,
  ERR_PARTNER_LEVEL_NOT_ENOUGH = 685,
  ERR_GCASTLE_NOT_IN_ACT = 686,
  ERR_GCASTLE_NOT_IN_FIGHT = 687,
  ERR_GCASTLE_ROLE_FULL = 688,
  ERR_CARDMATCH_SIGNUP_LIMIT = 689,
  ERR_GUILDAUCT_PUBLIC_TIME = 690,
  ERR_FASHIONCOMPOSE_TIMELIMIT = 691,
  ERR_FASHIONCOMPOSE_QUALITY = 692,
  ERR_FASHIONCOMPOSE_FAILED = 693,
  ERR_FASHIONCOMPOSE_POS = 694,
  ERR_RESWAR_LEAVETEAM = 695,
  ERR_RECONNECT_FAIL = 696,
  ERR_CANTCHOOSEHERO = 697,
  ERR_HERO_INVALID = 698,
  ERR_TEAM_SERVER_OPEN_TIME = 699,
  ERR_AUDIO_CHAT = 700,
  ERR_HERO_LACKMONEY = 701,
  ERR_HEROBATTLE_CANTGETPRIZE = 702,
  ERR_HEROBATTLE_ALREADYGET = 703,
  ERR_CAN_NOT_DEL_IN_GUILD_TERRITOYR = 704,
  ERR_HORSE_TEAM = 705,
  ERR_GCASTLE_ROLE_LEVEL = 706,
  ERR_CAN_INGORE = 707,
  ERR_LEAGUE_NOT_IN_TEAM = 708,
  ERR_LEAGUE_ALREADY_HAS_TEAM = 709,
  ERR_LEAGUE_TEAM_ROLE_NUM_INVALID = 710,
  ERR_LEAGUE_HAS_NO_TEAM = 711,
  ERR_LEAGUE_TEAM_NOT_EXIST = 712,
  ERR_GARDEN_STEAL_LIMIT = 713,
  ERR_LEAGUE_TEAM_IN_MATCH = 714,
  ERR_LEAGUE_TEAM_NOT_IN_MATCH = 715,
  ERR_SKILL_NEED_EXPRESKILL = 716,
  ERR_EQUIP_CANTFORGE = 717,
  ERR_EQUIP_FORGE_LACK_ITEM = 718,
  ERR_EQUIP_FORGE_LACK_STONE = 719,
  ERR_LEAGUE_ROLE_ALREADY_UP = 720,
  ERR_LEAGUE_ROLE_FIGHTING = 721,
  ERR_LEAGUE_ROLE_ALREADY_BATTLE = 722,
  ERR_REQUEST_REPEAT = 723,
  ERR_EQUIP_FORGE_FAILED = 724,
  ERR_NOMAIL_GETREWARD = 725,
  ERR_MIDAS_FAILED = 726,
  ERR_LEAGUE_TEAM_IN_BATTLE = 727,
  ERR_ENCHANT_NOTHAVE = 728,
  ERR_ENCHANT_ALREADYHAVE = 729,
  ERR_ENCHANT_TRANSFER_LEVEL_LIMIT = 730,
  ERR_FM_NOINAUDIO = 731,
  ERR_FM_NOINROOM = 732,
  ERR_CHANGEPRO_LEVEL = 733,
  ERR_CHANGEPRO_TIME = 734,
  ERR_CHANGEPRO_COUNT = 735,
  ERR_CHANGEPRO_INVALID = 736,
  ERR_CHANGEPRO_SAMEPRO = 737,
  ERR_CHANGEPRO_ITEMLIMIT = 738,
  ERR_SMELT_MAXVALUE = 739,
  ERR_SPRITE_AWAKE_MAX = 740,
  ERR_CHANGEPRO_KICK = 741,
  ERR_LEAGUE_NOT_IN_MATCH_TIME = 742,
  ERR_LEAGUE_TEAM_NOT_IN_BATTLE = 743,
  ERR_SPRITE_TRAIN_MAX = 744,
  ERR_SPRITE_TRAIN_CHOOSEMAX = 745,
  ERR_SPRITE_TRAIN_LACKITEM = 746,
  ERR_SPRITE_NOTTRAIN = 747,
  ERR_SPRITE_RESETTRAIN_LACKITEM = 748,
  ERR_LEAGUE_ALREADY_FIGHTED = 749,
  ERR_LEAGUE_NOT_IN_APPLY_TIME = 750,
  ERR_HORSE_INTEAM = 751,
  ERR_LEAGUE_INV_NOT_IN_TEAM = 752,
  ERR_LEAGUE_INV_ALREADY_HAS_TEAM = 753,
  ERR_SPRITE_TRAIN_NOT_ENOUGH = 754,
  ERR_DECLAREWAR_OUT_TIME = 756,
  ERR_LEAGUE_TEAM_CANNOT_CROSS = 757,
  ERR_DECLARATION_TOO_LONG = 758,
  ERR_CROSS_ZONE_UNUSABLE = 759,
  ERR_NOT_DEL_GUILD_IN_TERR = 760,
  ERR_GCASTLE_FIGHT_END = 761,
  ERR_CAREER_PVP_NOTOPEN = 762,
  ERR_APOLLO_CDN = 763,
  ERR_LEAGUE_HAS_MEMBER_NOT_TEAM = 764,
  ERR_POK_MATCH_ENDSOON = 765,
  ERR_QUESTCAREER_NOT_ONLINE = 766,
  ERR_MIDAS_BALANCE_NOTENOUTH = 767,
  ERR_HAS_JOIN_OTHER_GUILD_BOSS = 768,
  ERR_AUTH_TOKEN_INVALID = 769,
  ERR_TEAM_TICKET_LESS = 770,
  ERR_TEAM_USE_TICKET_COUNT_LESS = 771,
  ERR_TEAM_TICKET_CONFIG = 772,
  ERR_TEAM_TICKET_SEAL = 773,
  ERR_INVALID_IBBUY = 774,
  ERR_CROSS_IBBUY = 775,
  ERR_GUILD_NAME_NULL = 776,
  ERR_GUILD_LOCK_NAME = 777,
  ERR_ARGENTA_DAILY_GET = 778,
  ERR_WORLDBOSSGUILD_COUNTLIMIT = 779,
  ERR_WORLDBOSSGUILD_UNMATCH = 780,
  ERR_HERO_EXPERIENCE_HAVE = 781,
  ERR_PLATSHARE_FAILED = 782,
  ERR_HERO_ALREADY_CHOSEN = 783,
  ERR_SKY_NOT_TEAM_MEMBER = 784,
  ERR_SKY_ALREADY_HAS_TEAM = 785,
  ERR_SKY_HAS_NO_TEAM = 786,
  ERR_SKY_INV_NOT_TEAM_MEMBER = 787,
  ERR_SKY_TEAM_IN_MATCH = 788,
  ERR_SKY_INV_ALREADY_HAS_TEAM = 789,
  ERR_SKY_TEAM_ROLE_NUM_INVALID = 790,
  ERR_SKY_TEAM_IN_BATTLE = 791,
  ERR_SKY_HAS_NOT_TEAM_MEMBER = 792,
  ERR_MENTOR_COMPLETE_OTHER_OFFLINE_NEED_DAYS = 793,
  ERR_MENTOR_COMPLETE_IN_RELATION_NEED_DAYS = 794,
  ERR_TRANSFERR_OTHER_ROLES_LEAVE = 795,
  ERR_PLAT_BANACC = 796,
  ERR_RESWAR_DIFF_GUILD = 797,
  ERR_SKY_ALREADY_FIGHTED = 798,
  ERR_SKY_TEAM_NO_DAILY_NUM = 799,
  ERR_IBGIFT_NOT_ENOUCH = 800,
  ERR_IBGIFT_DAY_MAXBUYCOUNT = 801,
  ERR_IBGIFT_FRIEND = 802,
  ERR_ALREADY_BUYAILEEN = 803,
  ERR_GUILDACMPPATY_NOTOPEN = 804,
  ERR_GUILDACMPPATY_ERRSTAGE = 805,
  ERR_GUILDACMPPATY_DISTANCE = 806,
  ERR_MENTOR_ALREADY_INRELATION = 807,
  ERR_GUILDACMPPATY_SPRITE_ONTEXIST = 808,
  ERR_BAG_FULL_CANT_COMPOSE = 809,
  ERR_BAG_FULL_TAKEOFF_ARTIFACT = 810,
  ERR_GIFTIB_NOTGOODS = 811,
  ERR_ARTIFACT_COMPOSE_LEVELNOTEQUAL = 812,
  ERR_ARTIFACT_COMPOSE_QUALITYNOTEQUAL = 813,
  ERR_ARTIFACT_COMPOSE_NUMBER = 814,
  ERR_ARTIFACT_COMPOSE_CANTCOMPOSE = 815,
  ERR_CUSTOMBATTLE_INVALIDREQUEST = 816,
  ERR_CUSTOMBATTLE_WORLDNOTOPEN = 817,
  ERR_CUSTOMBATTLE_HASJOIN = 818,
  ERR_CUSTOMBATTLE_NOTJOIN = 819,
  ERR_CUSTOMBATTLE_CREATFAILED = 820,
  ERR_CUSTOMBATTLE_LEVELLIMIT = 821,
  ERR_CUSTOMBATTLE_ROELNOTEXIST = 822,
  ERR_CUSTOMBATTLE_CREATECONFINVALID = 823,
  ERR_CUSTOMBATTLE_JOINNOTRELATED = 824,
  ERR_CUSTOMBATTLE_JOINNOTINREADYTIME = 825,
  ERR_CUSTOMBATTLE_JOINFULL = 826,
  ERR_CUSTOMBATTLE_JOININVALIDPASSWORD = 827,
  ERR_CUSTOMBATTLE_JOINFAILED = 828,
  ERR_CUSTOMBATTLE_NOTCREATER = 829,
  ERR_CUSTOMBATTLE_BATTLENOTFIND = 830,
  ERR_CUSTOMBATTLE_MATCHFAILED = 831,
  ERR_IBGIFT_MAX_COUNT = 832,
  ERR_ENCHANT_NOTHAVEATTRID = 833,
  ERR_EXTRA_EMBLEM_SLOT_FULL = 834,
  ERR_EXTRA_EMBLEM_SLOT_LEVEL = 835,
  ERR_IBGIFT_OVERMAXUNRECV = 836,
  ERR_TEAM_CANNOT_FORNOW = 837,
  ERR_ALREADY_REPORTED = 838,
  ERR_CUSTOMBATTLE_REWARDCD = 839,
  ERR_CUSTOMBATTLE_REWARDCANGET = 840,
  ERR_FASHION_ITEM_NOT_ENOUGH = 841,
  ERR_GUILDPARTY_TRADIING = 842,
  ERR_SPACTIVITY_NOTOPEN = 843,
  ERR_BAGEXPAND_LESSITEM = 844,
  ERR_BAGEXPAND_MAXCOUNT = 845,
  ERR_SHOP_WEEKCOUNTLIMIT = 846,
  ERR_GUILDBONUS_MAXNUM = 847,
  ERR_SELF_GIFT_SELF = 848,
  ERR_IBSHOP_BUSY = 849,
  ERR_ABYSS_LEVEL = 850,
  ERR_GUILDCAMP_SELF_NOTIN = 851,
  ERR_GUILDCAMP_OTHER_NOTIN = 852,
  ERR_SMELTCOUNT_ZERO = 853,
  ERR_CUSTOMBATTLE_REWARDHASGET = 854,
  ERR_CUSTOMBATTLE_PASSWORDINVALID = 855,
  ERR_CUSTOMBATTLE_CREATORLEAVE = 856,
  ERR_GUILDCAMP_SPRITE_NOTEXIST = 857,
  ERR_TEAM_INV_TIMEOUT = 858,
  ERR_FORGE_NOREPLACE = 859,
  ERR_CUSTOMBATTLE_NAMEMAX = 860,
  ERR_CUSTOMBATTLE_NAMEMIN = 861,
  ERR_CUSTOMBATTLE_NAMEINVALID = 862,
  ERR_REPORT_FORBID = 863,
  ERR_TEAM_COST_CANCEL = 864,
  ERR_TEAM_COST_WIN = 865,
  ERR_CUSTOM_NOTOPEN = 866,
  ERR_CUSTOM_GMLIMIT = 867,
  ERR_MILITARY_TRIGGER_CHECK = 868,
  ERR_MENTOR_INHERIT_ING = 869,
  ERR_MOBA_UPGRADENUM_EMPTY = 870,
  ERR_FASHION_ERROR_COLOR = 871,
  ERR_FASHION_COLOR_UNLOOK = 872,
  ERR_FASHION_NO_HAIR = 873,
  ERR_FASHION_COLOR_LOOK = 874,
  ERR_MOBA_SIGNAL_TOOFAST = 875,
  ERR_NOT_BESPEAK = 876,
  ERR_PAIRPET_OUTRANGE = 877,
  ERR_PAIRPET_INVITEINVALID = 878,
  ERR_ROLE_IN_OTHER_SERVER = 879,
  ERR_MOBA_CANTMATCH = 880,
  ERR_PAIRPET_INVITEREPEAT = 881,
  ERR_PAIRPET_SCENEINVALID = 882,
  ERR_PAIRPET_SELF = 883,
  ERR_PAIRPET_OTHER = 884,
  ERR_PAIRPET_OTHERNOTIN = 885,
  ERR_MENTOR_OTHER_APPLY_BREAK = 886,
  ERR_MENTOR_ALREADY_COMPLETE_MENTOR = 887,
  ERR_MENTOR_OTHER_ALREADY_APPLY_INHERIT = 888,
  ERR_MENTOR_CUR_STATUS_CANNOT_BREAK = 889,
  ERR_CUSTOM_SAMEMATCH = 890,
  ERR_CUSTOM_NOMATCHING = 891,
  ERR_MENTOR_CUR_STATUS_CANNOT_APPLYSTUDENT = 892,
  ERR_MENTOR_CUR_STATUS_CANNOT_APPLYMASTER = 893,
  ERR_TEAM_DIAMOND_COST_LIMIT = 894,
  ERR_ACT_NOT_OPEN = 895,
  ERR_MOBA_MOBMAXLEVEL = 896,
  ERR_ACTIVITY = 897,
  ERR_NOCONDITION = 898,
  ERR_SERVER_UNNORMAL = 899,
  ERR_CUSTOMBATTLE_BOUNTYMODE_NOTOPEN = 900,
  ERR_GROUPCHAT_FULLGROUP = 901,
  ERR_GROUPCHAT_ROLENOCOUNT = 902,
  ERR_GROUPCHAT_LEADERNOCOUNT = 903,
  ERR_GROUPCHAT_GROUPFULLMEMBERS = 904,
  ERR_UNUSE1 = 905,
  ERR_HAVE_GOT_AWARD = 906,
  ERR_ANCIENTPOWER_LESSPOINT = 907,
  ERR_ANCIENTPOWER_DEAD = 908,
  ERR_JADE_DRAGONNOTENOUGH = 909,
  ERR_WEDDING_NOT_EXISTS = 910,
  ERR_WEDDING_ALREADY_INVITE = 911,
  ERR_WEDDING_NOT_INVITE = 912,
  ERR_WEDDING_NOT_APPLY = 913,
  ERR_MARRIAGE_LEVEL_NOTENOUGH = 914,
  ERR_MARRIAGE_NEED_TWO_NOTMARRY = 915,
  ERR_MARRIAGE_DISTANCE_TOOFAR = 916,
  ERR_WEDDING_OPER_CD = 917,
  ERR_WEDDING_ALREADY_VOWS = 918,
  ERR_WEDDING_HP_NOT_ENOUGH = 919,
  ERR_WEDDING_NOT_OWNER = 920,
  ERR_MARRIAGE_NOTINMARRIAGE = 921,
  ERR_MARRIAGE_ALREADY_APPLYDIVORCE = 922,
  ERR_MARRIAGE_NOT_DIVORCESTATUS = 923,
  ERR_MARRIAGE_ONLY_APPLIER_CANCLEDIVORCE = 924,
  ERR_FRIEND_DEGREE_NOTENOUGH = 925,
  ERR_WEDDING_ALREADY_HOLDED = 926,
  ERR_WEDDING_ALREADY_TAKECAR = 927,
  ERR_INVALID_PAYROLE = 928,
  ERR_WEDDING_IS_HOLDING = 929,
  ERR_WEDDING_NOT_RUNNING = 930,
  ERR_LIVENESS_NOT_ENOUGH = 931,
  ERR_CHEST_TAKED = 932,
  ERR_WEDDING_ALREADY_APPLY = 933,
  ERR_GROUPCHAT_FULLGROUP_OTHER = 934,
  ERR_GROUPCHAT_TIMEOUT = 935,
  ERR_GROUPCHAT_NO_MANAGER = 936,
  ERR_ITEM_NOT_ENOUGH_COMMON = 937,
  ERR_WEDDINGCAR_CANT_IN_PET = 938,
  ERR_WEDDINGCAR_OTHER_RUNNING = 939,
  ERR_ARTIFACT_CANTRECAST = 940,
  ERR_ARTIFACT_CANTFUSE = 941,
  ERR_ARTIFACT_FUSEFAILED = 942,
  ERR_ARTIFACT_FUSE_CONDITION = 943,
  ERR_ARTIFACT_CANTINSCRIPTION = 944,
  ERR_WEDDING_ALREADY_REFUSE = 945,
  ERR_WEDDING_NEED_TWO_MARRIAGE = 946,
  ERR_SPRITE_NOTREBIRTH = 947,
  ERR_TEAM_FASTMATCH_BUFF = 948,
  ERR_TEAM_SERVER_NOT_MATCH = 949,
  ERR_DAILY_WEDDY_CANDY_OVERMAX = 950,
  ERR_MARRIAGE_NEED_TEAM = 951,
  ERR_BACKFLOW_BUYEND = 952,
  ERR_NEED_MARRIAGE_TEAM = 953,
  ERR_DOENTERSCENE_FAILED = 954,
  ERR_WEDDING_INVITE_OVERMAX = 955,
  ERR_ARTIFACT_INSCRIPTION_LEVEL = 956,
  ERR_TRANS_PASSIVE = 957,
  ERR_TRANS_NONE = 958,
  ERR_TRANS_OTHERNOTEXIST = 959,
  ERR_TRANS_ITEMNOTENOUGH = 960,
  ERR_TRANS_STATE_FAILED = 961,
  ERR_TRANS_SCENE_INVALID = 962,
  ERR_GARDEN_EXPELSPRITE_MAX = 963,
  ERR_OP_ROLE_LEAVE = 964,
  ERR_BATTLEFIELD_NOT_OPEN = 965,
  ERR_BATTLEFIELD_LEVEL = 966,
  ERR_TASK_NO_REFRESH_COUNT = 967,
  ERR_CANT_FUSE = 968,
  ERR_FUSE_MAX = 969,
  ERR_TASK_NOT_TASK_ITEM = 970,
  ERR_COMPETEDRAGON_WRONG_DNID = 971,
  ERR_CANNOT_PICK_THIS_ITEM = 972,
  ERR_NPCFL_NEED_REFRESH = 973,
  ERR_NPCFL_NPC_LEVEL_MAX = 974,
  ERR_NPCFL_ITEM_LESS = 975,
  ERR_NPCFL_EXP_LESS = 976,
  ERR_NPCFL_UNITE_LEVEL_LESS = 977,
  ERR_NPCFL_GIVE_GIFT_COUNT_LESS = 978,
  ERR_NPCFL_BUY_GG_COUNT_LESS = 979,
  ERR_NPCFL_DRAGON_COIN_LESS = 980,
  ERR_DAILY_TASK_NO_REFRESH_COUNT = 981,
  ERR_DAILY_TASK_CANNT_REFRESH = 982,
  ERR_DAILY_TASK_NO_BUY_COUNT = 983,
  ERR_DAILY_TASK_QUALITY_MAX = 984,
  ERR_DG_ALREADY_IN_DG = 985,
  ERR_DG_DGNAME_EXIST = 986,
  ERR_DG_DGUILD_NOT_EXIST = 987,
  ERR_DG_FULL = 988,
  ERR_DG_PPT_REQ = 989,
  ERR_DG_WAITAPPROVAL = 990,
  ERR_DG_NOT_IN_GUILD = 991,
  ERR_DG_NO_PERMISSION = 992,
  ERR_DG_LOCK_NAME = 993,
  ERR_DG_APPLY_FULL = 994,
  ERR_DG_IN_CD = 995,
  ERR_DG_ITEM_NOT_FOUND = 996,
  ERR_DG_OTHER_BUYING = 997,
  ERR_DG_SHOP_NO_COUNT = 998,
  ERR_DG_NOT_IN_SAME = 999,
  ERR_DG_POSITION_FULL = 1000,
  ERR_DAILY_TASK_OTHER_NO_HELPCOUNT = 1001,
  ERR_UNOPEN_FUNCTION = 1002,
  ERR_QUERYBOX_TIMELEFT = 1003,
  ERR_GUILDPARTY_ENDING = 1004,
  ERR_GUILDPARTY_HAVESUMMON = 1005,
  ERR_KINGBACK_REWARD_COUNT_LIMIT = 1006,
  ERR_DG_NOT_IN_APPROVAL = 1007,
  ERR_GUILDPARTY_SUMMONING = 1008,
  ERR_HG_FORBID = 1009,
  ERR_FASHION_NOEXIST_EFFECTS = 1010,
  ERR_BACKFLOW_ALREADYGET = 1011,
  ERR_BACKFLOW_LESSPOINT = 1012,
  ERR_TEAM_CROSS_TEAM_CHANGE_EXP = 1013,
  ERR_TEAM_CHANGE_EXP_TO_CROSS = 1014,
  ERR_INVALID_STATE = 1015,
  ERR_CHANGE_SAMESCENE = 1016,
  ERR_BACKFLOWSHOP_LESSFRESHCOUNT = 1017,
  ERR_BACKFLOWSHOP_NOTHAVEGOOD = 1018,
  ERR_BACKFLOWSHOP_LACKDIAMOND = 1019,
  ERR_BACKFLOWSHOP_LACKDRAGONCOIN = 1020,
  ERR_BACKFLOWSHOP_ALREADYBUY = 1021,
  ERR_BACKFLOWSHOP_SHOPCLOSE = 1022,
  ERR_ALREADY_CHARGE_BACK = 1023,
  ERR_FUSE_EXPMAX = 1024,
  ERR_FUSE_BREAKLACKEXP = 1025
};
bool ErrorCode_IsValid(int value);
const ErrorCode ErrorCode_MIN = ERR_SUCCESS;
const ErrorCode ErrorCode_MAX = ERR_FUSE_BREAKLACKEXP;
const int ErrorCode_ARRAYSIZE = ErrorCode_MAX + 1;

enum RoleType {
  Role_INVALID = 0,
  Role_Warrior = 1,
  Role_Archer = 2,
  Role_Sorceress = 3,
  Role_Cleric = 4,
  Role_Academic = 5,
  Role_Swordsman = 11,
  Role_Mercenary = 21,
  Role_Sharpshooter = 12,
  Role_Acrobat = 22,
  Role_Elementalist = 13,
  Role_Mystic = 23,
  Role_Paladin = 14,
  Role_Priest = 24,
  Role_Engineer = 15,
  Role_Alchemist = 25,
  Role_Gladiator = 111,
  Role_Moonlord = 211,
  Role_Destroyer = 121,
  Role_Barbarian = 221,
  Role_Sniper = 112,
  Role_Artillery = 212,
  Role_Tempest = 122,
  Role_Windwalker = 222,
  Role_Saleana = 113,
  Role_Elestra = 213,
  Role_Smasher = 123,
  Role_Majesty = 223,
  Role_Guardian = 114,
  Role_Crusader = 214,
  Role_Saint = 124,
  Role_Inquistior = 224,
  Role_Shootingstar = 115,
  Role_Gearmaster = 215,
  Role_Adept = 125,
  Role_Physician = 225,
  Role_Assassin = 6,
  Role_Shinobi = 16,
  Role_Taoist = 26,
  Role_Reaper = 116,
  Role_Raven = 216,
  Role_LightBringer = 126,
  Role_AbyssWalker = 226,
  Role_Kali = 7,
  Role_Screamer = 17,
  Role_Dancer = 27,
  Role_SoulEater = 117,
  Role_DarkSummoner = 217,
  Role_SpiritDancer = 127,
  Role_BladeDancer = 227
};
bool RoleType_IsValid(int value);
const RoleType RoleType_MIN = Role_INVALID;
const RoleType RoleType_MAX = Role_BladeDancer;
const int RoleType_ARRAYSIZE = RoleType_MAX + 1;

enum SceneType {
  SCENE_HALL = 1,
  SCENE_BATTLE = 2,
  SCENE_NEST = 3,
  SCENE_ARENA = 5,
  SCENE_WORLDBOSS = 7,
  SCENE_BOSSRUSH = 9,
  SCENE_GUILD_HALL = 10,
  SCENE_GUILD_BOSS = 11,
  SCENE_PK = 12,
  SCENE_ABYSSS = 13,
  SCENE_FAMILYGARDEN = 15,
  SCENE_TOWER = 16,
  SCENE_PVP = 17,
  SCENE_DRAGON = 18,
  SCENE_GMF = 19,
  SCENE_GODDESS = 20,
  SCENE_DRAGON_EXP = 21,
  SCENE_RISK = 22,
  SCENE_ENDLESSABYSS = 23,
  SKYCITY_WAITING = 24,
  SKYCITY_FIGHTING = 25,
  SCENE_PROF_TRIALS = 26,
  SCENE_GPR = 27,
  SCENE_RESWAR_PVP = 28,
  SCENE_RESWAR_PVE = 29,
  SCENE_GUILD_CAMP = 30,
  SCENE_AIRSHIP = 31,
  SCENE_WEEK_NEST = 32,
  SCENE_VS_CHALLENGE = 33,
  SCENE_HORSE = 34,
  SCENE_HORSE_RACE = 35,
  SCENE_HEROBATTLE = 36,
  SCENE_INVFIGHT = 37,
  SCENE_CASTLE_WAIT = 38,
  SCENE_CASTLE_FIGHT = 39,
  SCENE_LEAGUE_BATTLE = 40,
  SCENE_ACTIVITY_ONE = 41,
  SCENE_ACTIVITY_TWO = 42,
  SCENE_ACTIVITY_THREE = 43,
  SCENE_ABYSS_PARTY = 44,
  SCENE_CUSTOMPK = 45,
  SCENE_PKTWO = 46,
  SCENE_MOBA = 47,
  SCENE_WEEKEND4V4_MONSTERFIGHT = 48,
  SCENE_WEEKEND4V4_GHOSTACTION = 49,
  SCENE_WEEKEND4V4_LIVECHALLENGE = 50,
  SCENE_WEEKEND4V4_CRAZYBOMB = 51,
  SCENE_WEEKEND4V4_HORSERACING = 52,
  SCENE_CUSTOMPKTWO = 53,
  SCENE_WEEKEND4V4_DUCK = 54,
  SCENE_BIGMELEE_READY = 60,
  SCENE_BIGMELEE_FIGHT = 61,
  SCENE_CALLBACK = 62,
  SCENE_WEDDING = 63,
  SCENE_BIOHELL = 64,
  SCENE_DUCK = 65,
  SCENE_COUPLE = 66,
  SCENE_BATTLEFIELD_READY = 67,
  SCENE_BATTLEFIELD_FIGHT = 68,
  SCENE_COMPETEDRAGON = 69,
  SCENE_SURVIVE = 70,
  SCENE_LEISURE = 71,
  SCENE_LOGIN = 100
};
bool SceneType_IsValid(int value);
const SceneType SceneType_MIN = SCENE_HALL;
const SceneType SceneType_MAX = SCENE_LOGIN;
const int SceneType_ARRAYSIZE = SceneType_MAX + 1;

enum TableDef {
  AccountTable = 1,
  RoleTable = 2
};
bool TableDef_IsValid(int value);
const TableDef TableDef_MIN = AccountTable;
const TableDef TableDef_MAX = RoleTable;
const int TableDef_ARRAYSIZE = TableDef_MAX + 1;

enum EntitySpecies {
  Species_Boss = 1,
  Species_Opposer = 2,
  Species_Puppet = 3,
  Species_Npc = 7,
  Species_Role = 10,
  Species_Empty = 8,
  Species_Dummy = 9,
  Species_Substance = 5,
  Species_Affiliate = 11,
  Species_Elite = 6
};
bool EntitySpecies_IsValid(int value);
const EntitySpecies EntitySpecies_MIN = Species_Boss;
const EntitySpecies EntitySpecies_MAX = Species_Affiliate;
const int EntitySpecies_ARRAYSIZE = EntitySpecies_MAX + 1;

enum BattleChestRewardType {
  GOLD_CHEST = 1,
  SILVER_CHEST = 2,
  COPPER_CHEST = 3,
  WOOD_CHEST = 4
};
bool BattleChestRewardType_IsValid(int value);
const BattleChestRewardType BattleChestRewardType_MIN = GOLD_CHEST;
const BattleChestRewardType BattleChestRewardType_MAX = WOOD_CHEST;
const int BattleChestRewardType_ARRAYSIZE = BattleChestRewardType_MAX + 1;

enum TaskOPEnum {
  TAKE_TASK = 1,
  FINISH_TASK = 2
};
bool TaskOPEnum_IsValid(int value);
const TaskOPEnum TaskOPEnum_MIN = TAKE_TASK;
const TaskOPEnum TaskOPEnum_MAX = FINISH_TASK;
const int TaskOPEnum_ARRAYSIZE = TaskOPEnum_MAX + 1;

enum ResetType {
  RESET_SKILL = 0,
  RESET_PROFESSION = 1,
  RESET_GUILD_SKILL = 2
};
bool ResetType_IsValid(int value);
const ResetType ResetType_MIN = RESET_SKILL;
const ResetType ResetType_MAX = RESET_GUILD_SKILL;
const int ResetType_ARRAYSIZE = ResetType_MAX + 1;

enum LotteryType {
  Sprite_Draw_One = 1,
  Sprite_Draw_Ten = 2,
  Sprite_Draw_One_Free = 3,
  Sprite_GoldDraw_One = 4,
  Sprite_GoldDraw_Ten = 5,
  Sprite_GoldDraw_One_Free = 6
};
bool LotteryType_IsValid(int value);
const LotteryType LotteryType_MIN = Sprite_Draw_One;
const LotteryType LotteryType_MAX = Sprite_GoldDraw_One_Free;
const int LotteryType_ARRAYSIZE = LotteryType_MAX + 1;

enum EntityCategory {
  Category_Role = 0,
  Category_Enemy = 1,
  Category_Neutral = 2,
  Category_DummyRole = 3,
  Category_Others = 4
};
bool EntityCategory_IsValid(int value);
const EntityCategory EntityCategory_MIN = Category_Role;
const EntityCategory EntityCategory_MAX = Category_Others;
const int EntityCategory_ARRAYSIZE = EntityCategory_MAX + 1;

enum RankeType {
  RealTimeArenaRank = 0,
  ArenaRank = 1,
  WorldBossGuildRank = 2,
  WorldBossDamageRank = 3,
  PowerPointRank = 4,
  LevelRank = 5,
  FlowerRank = 6,
  GuildBossRank = 7,
  GuildBossRoleRank = 8,
  PkRealTimeRank = 9,
  PkRank = 10,
  FashionPowerPointRank = 11,
  TShowVoteCountRank = 12,
  TowerRank = 13,
  FlowerYesterdayRank = 14,
  FlowerTotalRank = 15,
  FirstPassRank = 16,
  DEProgressRank = 17,
  SpritePowerPointRank = 18,
  PetPowerPointRank = 19,
  FlowerThisWeekRank = 20,
  NestWeekRank = 21,
  LeagueTeamRank = 22,
  CrossLeagueRank = 23,
  HeroBattleRank = 24,
  MilitaryRank = 25,
  LastWeek_PkRank = 26,
  LastWeek_NestWeekRank = 27,
  LastWeek_HeroBattleRank = 28,
  LastWeek_LeagueTeamRank = 29,
  SkyCraftRank = 30,
  PkRank2v2 = 31,
  FlowerActivityRank = 32,
  BigMeleeRank = 33,
  BioHelllRank = 34,
  CompeteDragonRank = 35,
  SurviveRank = 36,
  SkyCityRank = 37,
  WorldBossGuildRoleRank = 38
};
bool RankeType_IsValid(int value);
const RankeType RankeType_MIN = RealTimeArenaRank;
const RankeType RankeType_MAX = WorldBossGuildRoleRank;
const int RankeType_ARRAYSIZE = RankeType_MAX + 1;

enum MythShopOP {
  MythShopQuery = 1,
  MythShopBuy = 2,
  MythShopRefresh = 3
};
bool MythShopOP_IsValid(int value);
const MythShopOP MythShopOP_MIN = MythShopQuery;
const MythShopOP MythShopOP_MAX = MythShopRefresh;
const int MythShopOP_ARRAYSIZE = MythShopOP_MAX + 1;

enum SystemRewardType {
  RewardDinner = 1,
  RewardSupper = 2,
  RewardArena = 3,
  RewardWorldBoss = 4,
  RewardChargeFirst = 5,
  RewardGuildBoss = 6,
  RewardGuildBossRole = 7,
  RewardPk = 8,
  RewardVip = 101,
  RewardMonthCard = 102,
  RewardMakeUp = 103,
  RewardArenaUp = 104,
  RewardGM = 105,
  RewardDegree = 106,
  RewardFashionPowerRank = 107
};
bool SystemRewardType_IsValid(int value);
const SystemRewardType SystemRewardType_MIN = RewardDinner;
const SystemRewardType SystemRewardType_MAX = RewardFashionPowerRank;
const int SystemRewardType_ARRAYSIZE = SystemRewardType_MAX + 1;

enum TeamState {
  TEAM_WAITING = 0,
  TEAM_IN_BATTLE = 1,
  TEAM_VOTE = 2,
  TEAM_MATCH = 3
};
bool TeamState_IsValid(int value);
const TeamState TeamState_MIN = TEAM_WAITING;
const TeamState TeamState_MAX = TEAM_MATCH;
const int TeamState_ARRAYSIZE = TeamState_MAX + 1;

enum TeamOperate {
  TEAM_CREATE = 1,
  TEAM_JOIN = 2,
  TEAM_LEAVE = 3,
  TEAM_TOGGLE_READY = 4,
  TEAM_QUERYCOUNT = 5,
  TEAM_KICK = 6,
  TEAM_START_BATTLE = 7,
  TEAM_START_BATTLE_AGREE = 8,
  TEAM_START_BATTLE_DISAGREE = 9,
  TEAM_CHANGE_EPXTEAMID = 10,
  TEAM_START_BATTLE_REMOVE_DISAGREE_MEMBER = 11,
  TEAM_INVITE = 12,
  TEAM_START_MATCH = 13,
  TEAM_STOP_MATCH = 14,
  TEAM_GET_FULL_DATA = 15,
  TEAM_DOWN_MATCH = 16,
  TEAM_BE_HELPER = 17,
  TEAM_QUIT_HELPER = 18,
  TEAM_PPTLIMIT = 19,
  TEAM_COSTTYPE = 20,
  TEAM_CHANGE_PASSWORD = 21,
  TEAM_TRAHS_LEADER = 22,
  TEAM_BATTLE_CONTINUE = 23,
  TEAM_USE_TICKET = 24,
  TEAM_MEMBER_TYPE = 25
};
bool TeamOperate_IsValid(int value);
const TeamOperate TeamOperate_MIN = TEAM_CREATE;
const TeamOperate TeamOperate_MAX = TEAM_MEMBER_TYPE;
const int TeamOperate_ARRAYSIZE = TeamOperate_MAX + 1;

enum ExpTeamMemberState {
  EXPTEAM_IDLE = 0,
  EXPTEAM_READY = 1,
  EXPTEAM_DISAGREE = 2,
  EXPTEAM_FINISH = 3
};
bool ExpTeamMemberState_IsValid(int value);
const ExpTeamMemberState ExpTeamMemberState_MIN = EXPTEAM_IDLE;
const ExpTeamMemberState ExpTeamMemberState_MAX = EXPTEAM_FINISH;
const int ExpTeamMemberState_ARRAYSIZE = ExpTeamMemberState_MAX + 1;

enum UnitAppearanceField {
  UNIT_BASIC = 15,
  UNIT_ATTR = 32,
  UNIT_FASHION = 64,
  UNIT_EQUIP = 128,
  UNIT_SKILL = 256,
  UNIT_EMBLEM = 512,
  UNIT_VIPLEVEL = 1024,
  UNIT_TIMELOGIN = 2048,
  UNIT_GUILD = 16384,
  UNIT_TITLE = 524288,
  UNIT_SPRITELEADER = 8388608,
  UNIT_SPRITE = 16777216,
  UNIT_PETS = 33554432,
  UNIT_ARTIFACT = 32768
};
bool UnitAppearanceField_IsValid(int value);
const UnitAppearanceField UnitAppearanceField_MIN = UNIT_BASIC;
const UnitAppearanceField UnitAppearanceField_MAX = UNIT_PETS;
const int UnitAppearanceField_ARRAYSIZE = UnitAppearanceField_MAX + 1;

enum ChatChannel {
  WorldChannel = 1,
  GuildChannel = 2,
  PrivateChannel = 3,
  SystemChannel = 4,
  LampShortChannel = 5,
  LampLongChannel = 6,
  TeamChannel = 7,
  CampChannel = 8,
  SpectateChannel = 9,
  CurrentChannel = 10,
  PartnerChannel = 11,
  AudioChannel = 12,
  BattleChannel = 13,
  GroupChatChannel = 14
};
bool ChatChannel_IsValid(int value);
const ChatChannel ChatChannel_MIN = WorldChannel;
const ChatChannel ChatChannel_MAX = GroupChatChannel;
const int ChatChannel_ARRAYSIZE = ChatChannel_MAX + 1;

enum LoginType {
  LOGIN_PASSWORD = 0,
  LOGIN_SNDA_PF = 1,
  LOGIN_QQ_PF = 2,
  LGOIN_WECHAT_PF = 3,
  LOGIN_IOS_GUEST = 4,
  LOGIN_IOS_AUDIT = 5
};
bool LoginType_IsValid(int value);
const LoginType LoginType_MIN = LOGIN_PASSWORD;
const LoginType LoginType_MAX = LOGIN_IOS_AUDIT;
const int LoginType_ARRAYSIZE = LoginType_MAX + 1;

enum FashionNTFType {
  ADD_FASHION = 1,
  UPGRADE_FASHION = 2,
  WEAR_FASHION = 3,
  DELBODY_FASHION = 4,
  DELBAG_FASHION = 5
};
bool FashionNTFType_IsValid(int value);
const FashionNTFType FashionNTFType_MIN = ADD_FASHION;
const FashionNTFType FashionNTFType_MAX = DELBAG_FASHION;
const int FashionNTFType_ARRAYSIZE = FashionNTFType_MAX + 1;

enum GuildSortType {
  GuildSortByLevel = 1,
  GuildSortByMemberCount = 2,
  GuildSortByName = 3,
  GuildSortByExp = 4,
  GuildSortByPrestige = 5
};
bool GuildSortType_IsValid(int value);
const GuildSortType GuildSortType_MIN = GuildSortByLevel;
const GuildSortType GuildSortType_MAX = GuildSortByPrestige;
const int GuildSortType_ARRAYSIZE = GuildSortType_MAX + 1;

enum GuildMemberFlag {
  SEND_FATIGUE = 1,
  RECV_FATIGUE = 2,
  RECVED_FATIGUE = 4,
  ONLINE = 8
};
bool GuildMemberFlag_IsValid(int value);
const GuildMemberFlag GuildMemberFlag_MIN = SEND_FATIGUE;
const GuildMemberFlag GuildMemberFlag_MAX = ONLINE;
const int GuildMemberFlag_ARRAYSIZE = GuildMemberFlag_MAX + 1;

enum GuildLogType {
  GLog_Member = 1,
  GLog_CheckIn = 2,
  GLog_RedBonus = 3
};
bool GuildLogType_IsValid(int value);
const GuildLogType GuildLogType_MIN = GLog_Member;
const GuildLogType GuildLogType_MAX = GLog_RedBonus;
const int GuildLogType_ARRAYSIZE = GuildLogType_MAX + 1;

enum GuildLogEnum {
  GUILDLOG_MEMBER_START = 0,
  GuildLog_Join = 1,
  GuildLog_Leave = 2,
  GuildLog_ChangePosition = 3,
  GUILDLOG_MEMBER_END = 4,
  GUILDLOG_CHECKIN_START = 5,
  GUILDLOG_CHECKIN_END = 6,
  GUILDLOG_REDBONUS_START = 7,
  GUILDLOG_REDBONUS_END = 8,
  GuildLog_BossDps = 9
};
bool GuildLogEnum_IsValid(int value);
const GuildLogEnum GuildLogEnum_MIN = GUILDLOG_MEMBER_START;
const GuildLogEnum GuildLogEnum_MAX = GuildLog_BossDps;
const int GuildLogEnum_ARRAYSIZE = GuildLogEnum_MAX + 1;

enum GuildBonusType {
  GBONUS_LEVELUP = 1,
  GBONUS_CARDREWARD = 2,
  GBONUS_KILLDRAGON = 3,
  GBONUS_GUILDGOBLIN = 4,
  GBONUS_GUILDGOBLIN_LEVELUP = 5,
  GBONUS_CHECKIN = 6,
  GBONUS_TIANTIRANK = 7,
  GBONUS_KILLSTAGEDRAGON = 8,
  GBONUS_CHARGETIMES = 9,
  GBONUS_VIPLEVEL = 10,
  GBONUS_DRAWLOTTERY_TEN = 11,
  GBONUS_TITLE = 12,
  GBONUS_STRENGTHEN = 13,
  GBONUS_TOWER = 14,
  GBONUS_TIMEBONUS = 15,
  GBONUS_CHARGEPRIVILEGE = 16,
  GBONUS_PURCHASEFUND = 17,
  GBONUS_DRAGONJADEL_ALLLEVEL = 18,
  GBONUS_SKYARENA_FLOOR = 19,
  GBONUS_HORSE_QUALITY = 20,
  GBONUS_DRAGONNEST_SCENE = 21,
  GBONUS_GMF_RANK = 22,
  GBONUS_BOSSRUSH = 23,
  GBONUS_BUYIBSHOP = 24,
  GBONUS_MAYHEMRANK = 25,
  GBONUS_USETHREESUIT = 26,
  GBONUS_USEITEM = 27,
  GBONUS_MAX = 28
};
bool GuildBonusType_IsValid(int value);
const GuildBonusType GuildBonusType_MIN = GBONUS_LEVELUP;
const GuildBonusType GuildBonusType_MAX = GBONUS_MAX;
const int GuildBonusType_ARRAYSIZE = GuildBonusType_MAX + 1;

enum BoxType {
  BOX_TYPE_NONE = 0,
  BOX_TYPE_GOLD = 3,
  BOX_TYPE_SILVER = 2,
  BOX_TYPE_COPPER = 1,
  BOX_TYPE_DIAMOND = 4
};
bool BoxType_IsValid(int value);
const BoxType BoxType_MIN = BOX_TYPE_NONE;
const BoxType BoxType_MAX = BOX_TYPE_DIAMOND;
const int BoxType_ARRAYSIZE = BoxType_MAX + 1;

enum FightGroupType {
  FightEnemy = 0,
  FightRole = 1,
  FightNeutral = 2,
  FightHostility = 3,
  FightDummy = 10
};
bool FightGroupType_IsValid(int value);
const FightGroupType FightGroupType_MIN = FightEnemy;
const FightGroupType FightGroupType_MAX = FightDummy;
const int FightGroupType_ARRAYSIZE = FightGroupType_MAX + 1;

enum XQTEState {
  QTE_None = 0,
  QTE_HitBackPresent = 1,
  QTE_HitBackStraight = 2,
  QTE_HitBackGetUp = 3,
  QTE_HitFlyPresent = 4,
  QTE_HitFlyLand = 5,
  QTE_HitFlyBounce = 6,
  QTE_HitFlyStraight = 7,
  QTE_HitFlyGetUp = 8,
  QTE_HitRollPresent = 9,
  QTE_HitRollStraight = 10,
  QTE_HitRollGetUp = 11,
  QTE_HitFreeze = 12
};
bool XQTEState_IsValid(int value);
const XQTEState XQTEState_MIN = QTE_None;
const XQTEState XQTEState_MAX = QTE_HitFreeze;
const int XQTEState_ARRAYSIZE = XQTEState_MAX + 1;

enum SceneFinishState {
  SCENE_FINISH_NONE = 0,
  SCENE_FINISH_START = 1,
  SCENE_FINISH_PICK_ITEM = 2,
  SCENE_FINISH_SHOWRESULT = 3,
  SCENE_FINISH_DRAW_BOX = 4,
  SCENE_FINISH_END = 5
};
bool SceneFinishState_IsValid(int value);
const SceneFinishState SceneFinishState_MIN = SCENE_FINISH_NONE;
const SceneFinishState SceneFinishState_MAX = SCENE_FINISH_END;
const int SceneFinishState_ARRAYSIZE = SceneFinishState_MAX + 1;

enum FishingState {
  LEAVE = 1,
  SITDOWN = 2,
  CAST = 3,
  WAIT = 4,
  PULL = 5
};
bool FishingState_IsValid(int value);
const FishingState FishingState_MIN = LEAVE;
const FishingState FishingState_MAX = PULL;
const int FishingState_ARRAYSIZE = FishingState_MAX + 1;

enum AuctionSortType {
  AUCTIONSORT_QUALITY_LESS = 1,
  AUCTIONSORT_QUALITY_GREATER = 2,
  AUCTIONSORT_LEVLE_LESS = 3,
  AUCTIONSORT_LEVEL_GREATER = 4,
  AUCTIONSORT_LEFTTIME_LESS = 5,
  AUCTIONSORT_LEFTTIME_GREATER = 6,
  AUCTIONSORT_BUYNOW_LESS = 7,
  AUCTIONSORT_BUYNOW_GREATER = 8,
  AUCTIONSORT_BIDDING_LESS = 9,
  AUCITONSORT_BIDDING_GREATER = 10,
  AUCTIONSORT_PERPRICE_LESS = 11,
  AUCTIONSORT_PERPRICE_GREATER = 12
};
bool AuctionSortType_IsValid(int value);
const AuctionSortType AuctionSortType_MIN = AUCTIONSORT_QUALITY_LESS;
const AuctionSortType AuctionSortType_MAX = AUCTIONSORT_PERPRICE_GREATER;
const int AuctionSortType_ARRAYSIZE = AuctionSortType_MAX + 1;

enum AuctionAccountType {
  AUCTACCOUNT_SALE_FAIL = 1,
  AUCTACCOUNT_SALE_SUCCESS = 2,
  AUCTACCOUNT_BUY_FAIL = 3,
  AUCTACCOUNT_BUY_SUCCESS = 4
};
bool AuctionAccountType_IsValid(int value);
const AuctionAccountType AuctionAccountType_MIN = AUCTACCOUNT_SALE_FAIL;
const AuctionAccountType AuctionAccountType_MAX = AUCTACCOUNT_BUY_SUCCESS;
const int AuctionAccountType_ARRAYSIZE = AuctionAccountType_MAX + 1;

enum PetOP {
  PetFellow = 1,
  PetFight = 2,
  PetFeed = 3,
  PetTouch = 4,
  PetBorn = 5,
  PetUpdate = 6,
  PetRelease = 7,
  ExpandSeat = 8,
  PetExpTransfer = 9,
  useskillbook = 10,
  SetPetPairRide = 11,
  QueryPetPairRideInvite = 12,
  OffPetPairRide = 13,
  IgnorePetPairRideInvite = 14
};
bool PetOP_IsValid(int value);
const PetOP PetOP_MIN = PetFellow;
const PetOP PetOP_MAX = IgnorePetPairRideInvite;
const int PetOP_ARRAYSIZE = PetOP_MAX + 1;

enum CampID {
  CAMP_DRAGON = 1,
  CAMP_KNIGHT = 2,
  CAMP_ADVENTURER = 3
};
bool CampID_IsValid(int value);
const CampID CampID_MIN = CAMP_DRAGON;
const CampID CampID_MAX = CAMP_ADVENTURER;
const int CampID_ARRAYSIZE = CampID_MAX + 1;

enum FortType {
  FORTTYPE_MAX = 1
};
bool FortType_IsValid(int value);
const FortType FortType_MIN = FORTTYPE_MAX;
const FortType FortType_MAX = FORTTYPE_MAX;
const int FortType_ARRAYSIZE = FortType_MAX + 1;

enum FortStatus {
  FORTSTATUS_MAX = 1
};
bool FortStatus_IsValid(int value);
const FortStatus FortStatus_MIN = FORTSTATUS_MAX;
const FortStatus FortStatus_MAX = FORTSTATUS_MAX;
const int FortStatus_ARRAYSIZE = FortStatus_MAX + 1;

enum AuctDBDataOperate {
  AUCTDBDATA_INSERT = 1,
  AUCTDBDATA_UPDATE = 2,
  AUCTDBDATA_DELETE = 3
};
bool AuctDBDataOperate_IsValid(int value);
const AuctDBDataOperate AuctDBDataOperate_MIN = AUCTDBDATA_INSERT;
const AuctDBDataOperate AuctDBDataOperate_MAX = AUCTDBDATA_DELETE;
const int AuctDBDataOperate_ARRAYSIZE = AuctDBDataOperate_MAX + 1;

enum CampTaskType {
  CAMPTASK_ITEM = 1,
  CAMPTASK_SCENE = 2,
  CAMPTASK_PATROL = 3,
  CAMPTASK_SPY = 4
};
bool CampTaskType_IsValid(int value);
const CampTaskType CampTaskType_MIN = CAMPTASK_ITEM;
const CampTaskType CampTaskType_MAX = CAMPTASK_SPY;
const int CampTaskType_ARRAYSIZE = CampTaskType_MAX + 1;

enum CampTaskStatus {
  CAMPTASK_GET = 1,
  CAMPTASK_VIEW = 2,
  CAMPTASK_FINISH = 3,
  CAMPTASK_REWARD = 4
};
bool CampTaskStatus_IsValid(int value);
const CampTaskStatus CampTaskStatus_MIN = CAMPTASK_GET;
const CampTaskStatus CampTaskStatus_MAX = CAMPTASK_REWARD;
const int CampTaskStatus_ARRAYSIZE = CampTaskStatus_MAX + 1;

enum AbyssFlameStage {
  ABYSS_NONE_FLAME = 1,
  ABYSS_ON_FLAME = 2,
  ABYSS_WIN_FLAME = 3
};
bool AbyssFlameStage_IsValid(int value);
const AbyssFlameStage AbyssFlameStage_MIN = ABYSS_NONE_FLAME;
const AbyssFlameStage AbyssFlameStage_MAX = ABYSS_WIN_FLAME;
const int AbyssFlameStage_ARRAYSIZE = AbyssFlameStage_MAX + 1;

enum ExpBackType {
  EXPBACK_ABYSSS = 1,
  EXPBACK_NEST = 2,
  EXPBACK_CAMPTASK = 3
};
bool ExpBackType_IsValid(int value);
const ExpBackType ExpBackType_MIN = EXPBACK_ABYSSS;
const ExpBackType ExpBackType_MAX = EXPBACK_CAMPTASK;
const int ExpBackType_ARRAYSIZE = ExpBackType_MAX + 1;

enum LogDBType {
  LOG_DB_NORMAL = 0,
  LOG_DB_TENCENT = 1
};
bool LogDBType_IsValid(int value);
const LogDBType LogDBType_MIN = LOG_DB_NORMAL;
const LogDBType LogDBType_MAX = LOG_DB_TENCENT;
const int LogDBType_ARRAYSIZE = LogDBType_MAX + 1;

enum buyextype {
  DIAMONE_BUY_DRAGONCOIN = 1,
  DIAMONE_BUY_GOLD = 2,
  DRAGONCOIN_BUY_GOLD = 3,
  DRAGON_BUY_FATIGUE = 4,
  DIAMOND_BUY_FATIGUE = 5,
  DRAGONCOIN_BUY_BLUEBIRD = 6,
  DIAMOND_EXCHANGE_DRAGONCOIN = 7
};
bool buyextype_IsValid(int value);
const buyextype buyextype_MIN = DIAMONE_BUY_DRAGONCOIN;
const buyextype buyextype_MAX = DIAMOND_EXCHANGE_DRAGONCOIN;
const int buyextype_ARRAYSIZE = buyextype_MAX + 1;

enum DesignationType {
  DESIGNATION_TYPE_COMMON = 1,
  DESIGNATION_TYPE_RAID = 2,
  DESIGNATION_TYPE_NEST = 3,
  DESIGNATION_TYPE_BATTLE = 4,
  DESIGNATION_TYPE_ACTIVITY = 5
};
bool DesignationType_IsValid(int value);
const DesignationType DesignationType_MIN = DESIGNATION_TYPE_COMMON;
const DesignationType DesignationType_MAX = DESIGNATION_TYPE_ACTIVITY;
const int DesignationType_ARRAYSIZE = DesignationType_MAX + 1;

enum AchieveType {
  ACHIEVE_TYPE_COMMON = 1,
  ACHIEVE_TYPE_RAID = 2,
  ACHIEVE_TYPE_NEST = 3,
  ACHIEVE_TYPE_BATTLE = 4,
  ACHIEVE_TYPE_ACTIVITY = 5
};
bool AchieveType_IsValid(int value);
const AchieveType AchieveType_MIN = ACHIEVE_TYPE_COMMON;
const AchieveType AchieveType_MAX = ACHIEVE_TYPE_ACTIVITY;
const int AchieveType_ARRAYSIZE = AchieveType_MAX + 1;

enum RewardStatus {
  REWARD_STATUS_CANNOT = 0,
  REWARD_STATUS_CAN = 1,
  REWARD_STATUS_GOT = 2
};
bool RewardStatus_IsValid(int value);
const RewardStatus RewardStatus_MIN = REWARD_STATUS_CANNOT;
const RewardStatus RewardStatus_MAX = REWARD_STATUS_GOT;
const int RewardStatus_ARRAYSIZE = RewardStatus_MAX + 1;

enum LevelSealButtonType {
  BUTTON_STATUS_NONE = 0,
  BUTTON_STATUS_LOCKED = 1,
  BUTTON_STATUS_UNLOCKED = 2
};
bool LevelSealButtonType_IsValid(int value);
const LevelSealButtonType LevelSealButtonType_MIN = BUTTON_STATUS_NONE;
const LevelSealButtonType LevelSealButtonType_MAX = BUTTON_STATUS_UNLOCKED;
const int LevelSealButtonType_ARRAYSIZE = LevelSealButtonType_MAX + 1;

enum PlatType {
  PLAT_IOS = 0,
  PLAT_ANDROID = 1
};
bool PlatType_IsValid(int value);
const PlatType PlatType_MIN = PLAT_IOS;
const PlatType PlatType_MAX = PLAT_ANDROID;
const int PlatType_ARRAYSIZE = PlatType_MAX + 1;

enum GameAppType {
  GAME_APP_WECHAT = 1,
  GAME_APP_QQ = 2
};
bool GameAppType_IsValid(int value);
const GameAppType GameAppType_MIN = GAME_APP_WECHAT;
const GameAppType GameAppType_MAX = GAME_APP_QQ;
const int GameAppType_ARRAYSIZE = GameAppType_MAX + 1;

enum LoginRewardState {
  LOGINRS_CANNOT = 1,
  LOGINRS_HAVEHOT = 2,
  LOGINRS_HAVE = 3
};
bool LoginRewardState_IsValid(int value);
const LoginRewardState LoginRewardState_MIN = LOGINRS_CANNOT;
const LoginRewardState LoginRewardState_MAX = LOGINRS_HAVE;
const int LoginRewardState_ARRAYSIZE = LoginRewardState_MAX + 1;

enum PvpReqType {
  PVP_REQ_IN_MATCH = 1,
  PVP_REQ_OUT_MATCH = 2,
  PVP_REQ_BASE_DATA = 3,
  PVP_REQ_HISTORY_REC = 4,
  PVP_REQ_GET_WEEKREWARD = 5
};
bool PvpReqType_IsValid(int value);
const PvpReqType PvpReqType_MIN = PVP_REQ_IN_MATCH;
const PvpReqType PvpReqType_MAX = PVP_REQ_GET_WEEKREWARD;
const int PvpReqType_ARRAYSIZE = PvpReqType_MAX + 1;

enum FriendOpType {
  Friend_AgreeApply = 1,
  Friend_IgnoreApply = 2,
  Friend_FriendAll = 3,
  Friend_ApplyAll = 4,
  Friend_FriendAdd = 5,
  Friend_FriendDelete = 6,
  Friend_ApplyAdd = 7,
  Friend_ApplyDelete = 8,
  Friend_ReveiveGift = 9,
  Friend_SendGift = 10,
  Friend_TakeGift = 11,
  Friend_GiftInfo = 12
};
bool FriendOpType_IsValid(int value);
const FriendOpType FriendOpType_MIN = Friend_AgreeApply;
const FriendOpType FriendOpType_MAX = Friend_GiftInfo;
const int FriendOpType_ARRAYSIZE = FriendOpType_MAX + 1;

enum FriendGiftSend {
  FriendGift_SendNone = 0,
  FriendGift_Sended = 1
};
bool FriendGiftSend_IsValid(int value);
const FriendGiftSend FriendGiftSend_MIN = FriendGift_SendNone;
const FriendGiftSend FriendGiftSend_MAX = FriendGift_Sended;
const int FriendGiftSend_ARRAYSIZE = FriendGiftSend_MAX + 1;

enum FriendGiftReceive {
  FriendGift_ReceiveNone = 0,
  FriendGift_Received = 1,
  FriendGift_ReceiveTaken = 2
};
bool FriendGiftReceive_IsValid(int value);
const FriendGiftReceive FriendGiftReceive_MIN = FriendGift_ReceiveNone;
const FriendGiftReceive FriendGiftReceive_MAX = FriendGift_ReceiveTaken;
const int FriendGiftReceive_ARRAYSIZE = FriendGiftReceive_MAX + 1;

enum EnterSceneType {
  ENTER_SCENE_SELECT_ROLE = 1,
  ENTER_SCENE_SWITCH = 2
};
bool EnterSceneType_IsValid(int value);
const EnterSceneType EnterSceneType_MIN = ENTER_SCENE_SELECT_ROLE;
const EnterSceneType EnterSceneType_MAX = ENTER_SCENE_SWITCH;
const int EnterSceneType_ARRAYSIZE = EnterSceneType_MAX + 1;

enum RoleDataReadType {
  ROLE_DATA_READ_SELECT_ROLE = 1,
  ROLE_DATA_READ_IDIP = 2
};
bool RoleDataReadType_IsValid(int value);
const RoleDataReadType RoleDataReadType_MIN = ROLE_DATA_READ_SELECT_ROLE;
const RoleDataReadType RoleDataReadType_MAX = ROLE_DATA_READ_IDIP;
const int RoleDataReadType_ARRAYSIZE = RoleDataReadType_MAX + 1;

enum LeaveSceneType {
  LEAVE_SCENE_LOGOUT = 1,
  LEAVE_SCENE_SWITCH = 2
};
bool LeaveSceneType_IsValid(int value);
const LeaveSceneType LeaveSceneType_MIN = LEAVE_SCENE_LOGOUT;
const LeaveSceneType LeaveSceneType_MAX = LEAVE_SCENE_SWITCH;
const int LeaveSceneType_ARRAYSIZE = LeaveSceneType_MAX + 1;

enum InvHReqType {
  INVH_REQ_UNF_LIST = 1,
  INVH_UNF_IGNORE_ALL = 2,
  INVH_REFUSE_FORNOW = 3
};
bool InvHReqType_IsValid(int value);
const InvHReqType InvHReqType_MIN = INVH_REQ_UNF_LIST;
const InvHReqType InvHReqType_MAX = INVH_REFUSE_FORNOW;
const int InvHReqType_ARRAYSIZE = InvHReqType_MAX + 1;

enum MulActivityTimeState {
  MULACTIVITY_BEfOREOPEN = 1,
  MULACTIVITY_RUNNING = 2,
  MULACTIVITY_END = 3,
  MULACTIVITY_UNOPEN_TODAY = 4
};
bool MulActivityTimeState_IsValid(int value);
const MulActivityTimeState MulActivityTimeState_MIN = MULACTIVITY_BEfOREOPEN;
const MulActivityTimeState MulActivityTimeState_MAX = MULACTIVITY_UNOPEN_TODAY;
const int MulActivityTimeState_ARRAYSIZE = MulActivityTimeState_MAX + 1;

enum XSkillSlot {
  Normal_Attack = 0,
  Dash_Attack = 1,
  Skill_1_Attack = 2,
  Skill_2_Attack = 3,
  Skill_3_Attack = 4,
  Skill_4_Attack = 5,
  Skill_5_Attack = 6,
  Skill_1_Buff = 7,
  Skill_2_Buff = 8,
  Ultra_Attack = 9,
  Attack_Max = 10
};
bool XSkillSlot_IsValid(int value);
const XSkillSlot XSkillSlot_MIN = Normal_Attack;
const XSkillSlot XSkillSlot_MAX = Attack_Max;
const int XSkillSlot_ARRAYSIZE = XSkillSlot_MAX + 1;

enum LiveType {
  LIVE_RECOMMEND = 1,
  LIVE_PVP = 2,
  LIVE_NEST = 3,
  LIVE_PROTECTCAPTAIN = 4,
  LIVE_GUILDBATTLE = 5,
  LIVE_DRAGON = 6,
  LIVE_FRIEND = 7,
  LIVE_GUILD = 8,
  LIVE_FRIENDANDGUILD = 9,
  LIVE_HEROBATTLE = 10,
  LIVE_LEAGUEBATTLE = 11,
  LIVE_PVP2 = 12,
  LIVE_CUSTOMPK = 13,
  LIVE_MAX = 14
};
bool LiveType_IsValid(int value);
const LiveType LiveType_MIN = LIVE_RECOMMEND;
const LiveType LiveType_MAX = LIVE_MAX;
const int LiveType_ARRAYSIZE = LiveType_MAX + 1;

enum BossRushReqStatus {
  BOSSRUSH_RESULT_WIN = 1,
  BOSSRUSH_RESULT_FAILED = 2,
  BOSSRUSH_REQ_BASEDATA = 3,
  BOSSRUSH_REQ_REFRESH = 4,
  BOSSRUSH_REQ_APPEARANCE = 5,
  BOSSRUSH_REQ_LEFTCOUNT = 6,
  BOSSRUSH_REQ_CONTINUE = 7
};
bool BossRushReqStatus_IsValid(int value);
const BossRushReqStatus BossRushReqStatus_MIN = BOSSRUSH_RESULT_WIN;
const BossRushReqStatus BossRushReqStatus_MAX = BOSSRUSH_REQ_CONTINUE;
const int BossRushReqStatus_ARRAYSIZE = BossRushReqStatus_MAX + 1;

enum StopMatchReason {
  STOPMATCH_NONE = 1,
  STOPMATCH_LEAVESCENE = 2,
  STOPMATCH_ENTER_TIANTI = 3,
  STOPMATCH_ENTER_BOWEIDUIZ = 4
};
bool StopMatchReason_IsValid(int value);
const StopMatchReason StopMatchReason_MIN = STOPMATCH_NONE;
const StopMatchReason StopMatchReason_MAX = STOPMATCH_ENTER_BOWEIDUIZ;
const int StopMatchReason_ARRAYSIZE = StopMatchReason_MAX + 1;

enum GuildMatchFightState {
  GUILD_MF_NONE = 1,
  GUILD_MF_WAITING = 2,
  GUILD_MF_REFUSE = 3,
  GUILD_MF_LEAVE = 4,
  GUILD_MF_FIGHTING = 5,
  GUILD_MF_FAILED = 6,
  GUILD_MF_WIN = 7,
  GUILD_MF_ERR = 100
};
bool GuildMatchFightState_IsValid(int value);
const GuildMatchFightState GuildMatchFightState_MIN = GUILD_MF_NONE;
const GuildMatchFightState GuildMatchFightState_MAX = GUILD_MF_ERR;
const int GuildMatchFightState_ARRAYSIZE = GuildMatchFightState_MAX + 1;

enum TeamInvRoleState {
  TIRS_IN_OTHER_TEAM = 1,
  TIRS_IN_MY_TEAM = 2,
  TIRS_IN_BATTLE = 3,
  TIRS_NORMAL = 4,
  TIRS_NOT_OPEN = 5,
  TIRS_COUNT_LESS = 6,
  TIRS_FATIGUE_LESS = 7
};
bool TeamInvRoleState_IsValid(int value);
const TeamInvRoleState TeamInvRoleState_MIN = TIRS_IN_OTHER_TEAM;
const TeamInvRoleState TeamInvRoleState_MAX = TIRS_FATIGUE_LESS;
const int TeamInvRoleState_ARRAYSIZE = TeamInvRoleState_MAX + 1;

enum ReadAccountDataType {
  READ_ACCOUNT_DATA_LOGIN = 1,
  READ_ACCOUNT_DATA_RETURN_SELECT_ROLE = 2,
  READ_ACCOUNT_DATA_IDIP = 3
};
bool ReadAccountDataType_IsValid(int value);
const ReadAccountDataType ReadAccountDataType_MIN = READ_ACCOUNT_DATA_LOGIN;
const ReadAccountDataType ReadAccountDataType_MAX = READ_ACCOUNT_DATA_IDIP;
const int ReadAccountDataType_ARRAYSIZE = ReadAccountDataType_MAX + 1;

enum LogoutType {
  LOGOUT_ACCOUNT_NORMAL = 1,
  LOGOUT_RELOGIN_KICK_ACCOUNT = 2,
  LOGOUT_IDIP_KICK_ACCOUNT = 3,
  LOGOUT_RETURN_SELECT_ROLE = 4,
  LOGOUT_CHANGEPROFESSION = 5
};
bool LogoutType_IsValid(int value);
const LogoutType LogoutType_MIN = LOGOUT_ACCOUNT_NORMAL;
const LogoutType LogoutType_MAX = LOGOUT_CHANGEPROFESSION;
const int LogoutType_ARRAYSIZE = LogoutType_MAX + 1;

enum MailOpType {
  MAIL_OP_ADD = 1,
  MAIL_OP_UPDATE = 2,
  MAIL_OP_DELETE = 3,
  MAIL_OP_DELETE_ALL = 4
};
bool MailOpType_IsValid(int value);
const MailOpType MailOpType_MIN = MAIL_OP_ADD;
const MailOpType MailOpType_MAX = MAIL_OP_DELETE_ALL;
const int MailOpType_ARRAYSIZE = MailOpType_MAX + 1;

enum WorldBossState {
  WorldBoss_BeginPre = 0,
  WorldBoss_Begin = 1,
  WorldBoss_Going = 2,
  WorldBoss_WaitEnd = 3,
  WorldBoss_End = 4
};
bool WorldBossState_IsValid(int value);
const WorldBossState WorldBossState_MIN = WorldBoss_BeginPre;
const WorldBossState WorldBossState_MAX = WorldBoss_End;
const int WorldBossState_ARRAYSIZE = WorldBossState_MAX + 1;

enum GuildArenaState {
  GUILD_ARENA_NOT_BEGIN = 1,
  GUILD_ARENA_BEGIN = 2,
  GUILD_ARENA_BATTLE_ONE = 3,
  GUILD_ARENA_BATTLE_TWO = 4,
  GUILD_ARENA_BATTLE_FINAL = 5,
  GUILD_ARENA_END = 6
};
bool GuildArenaState_IsValid(int value);
const GuildArenaState GuildArenaState_MIN = GUILD_ARENA_NOT_BEGIN;
const GuildArenaState GuildArenaState_MAX = GUILD_ARENA_END;
const int GuildArenaState_ARRAYSIZE = GuildArenaState_MAX + 1;

enum GMFFailReason {
  GMF_FAIL_NONE = 0,
  GMF_FAIL_DIE = 1,
  GMF_FAIL_TIMEOVER = 2,
  GMF_FAIL_QUIT = 3,
  GMF_FAIL_REFRESE = 4
};
bool GMFFailReason_IsValid(int value);
const GMFFailReason GMFFailReason_MIN = GMF_FAIL_NONE;
const GMFFailReason GMFFailReason_MAX = GMF_FAIL_REFRESE;
const int GMFFailReason_ARRAYSIZE = GMFFailReason_MAX + 1;

enum PVP_ONEGAMEEND_REASON {
  PVP_OGE_LEADER_DIE = 1,
  PVP_OGE_LEADER_QUIT = 2,
  PVP_OGE_TIMELIMIT = 3,
  PVP_OGE_ROLE_QUIT = 4
};
bool PVP_ONEGAMEEND_REASON_IsValid(int value);
const PVP_ONEGAMEEND_REASON PVP_ONEGAMEEND_REASON_MIN = PVP_OGE_LEADER_DIE;
const PVP_ONEGAMEEND_REASON PVP_ONEGAMEEND_REASON_MAX = PVP_OGE_ROLE_QUIT;
const int PVP_ONEGAMEEND_REASON_ARRAYSIZE = PVP_ONEGAMEEND_REASON_MAX + 1;

enum SynsMsType {
  SynsGuild = 1,
  SynsTeam = 2
};
bool SynsMsType_IsValid(int value);
const SynsMsType SynsMsType_MIN = SynsGuild;
const SynsMsType SynsMsType_MAX = SynsTeam;
const int SynsMsType_ARRAYSIZE = SynsMsType_MAX + 1;

enum SynsMsSubType {
  SynsCreate = 1,
  SynsDestory = 2,
  SynsAdd = 3,
  SynsDel = 4,
  SynsLead = 5,
  SynsLevel = 6,
  SynsIcon = 7,
  SynAddExp = 8,
  SynSetTime = 9
};
bool SynsMsSubType_IsValid(int value);
const SynsMsSubType SynsMsSubType_MIN = SynsCreate;
const SynsMsSubType SynsMsSubType_MAX = SynSetTime;
const int SynsMsSubType_ARRAYSIZE = SynsMsSubType_MAX + 1;

enum NoticeType {
  Notice_Role = 1,
  Notice_Team = 2,
  Notice_Guild = 3,
  Notice_World = 4,
  Notice_Partner = 5,
  Notice_Server = 6
};
bool NoticeType_IsValid(int value);
const NoticeType NoticeType_MIN = Notice_Role;
const NoticeType NoticeType_MAX = Notice_Server;
const int NoticeType_ARRAYSIZE = NoticeType_MAX + 1;

enum MSGiveItemType {
  MSItem_FriendGift = 1
};
bool MSGiveItemType_IsValid(int value);
const MSGiveItemType MSGiveItemType_MIN = MSItem_FriendGift;
const MSGiveItemType MSGiveItemType_MAX = MSItem_FriendGift;
const int MSGiveItemType_ARRAYSIZE = MSGiveItemType_MAX + 1;

enum RoleState {
  Logoff = 0,
  LoadScene = 1,
  InHall = 2,
  InBattle = 3
};
bool RoleState_IsValid(int value);
const RoleState RoleState_MIN = Logoff;
const RoleState RoleState_MAX = InBattle;
const int RoleState_ARRAYSIZE = RoleState_MAX + 1;

enum SyncTeamM2C {
  STM2C_CREATE_TEAM = 1,
  STM2C_ADD_MEMBER = 2,
  STM2C_DEL_MEMBER = 3,
  STM2C_ALL_DATA = 4,
  STM2C_TEAM_LIST = 5,
  STM2C_DESTROY = 6,
  STM2C_GETEXTRADATA = 7,
  STM2C_RESETCOST = 8,
  STM2C_TS_DISCONNECTED = 9
};
bool SyncTeamM2C_IsValid(int value);
const SyncTeamM2C SyncTeamM2C_MIN = STM2C_CREATE_TEAM;
const SyncTeamM2C SyncTeamM2C_MAX = STM2C_TS_DISCONNECTED;
const int SyncTeamM2C_ARRAYSIZE = SyncTeamM2C_MAX + 1;

enum PayCardType {
  WEEK_CARD = 1,
  MONTH_CARD = 2
};
bool PayCardType_IsValid(int value);
const PayCardType PayCardType_MIN = WEEK_CARD;
const PayCardType PayCardType_MAX = MONTH_CARD;
const int PayCardType_ARRAYSIZE = PayCardType_MAX + 1;

enum PayParamType {
  PAY_PARAM_NONE = 0,
  PAY_PARAM_LIST = 1,
  PAY_PARAM_AILEEN = 2,
  PAY_PARAM_CARD = 3,
  PAY_PARAM_FIRSTAWARD = 4,
  PAY_PARAM_GROWTH_FUND = 5,
  PAY_PARAM_MEMBER = 6
};
bool PayParamType_IsValid(int value);
const PayParamType PayParamType_MIN = PAY_PARAM_NONE;
const PayParamType PayParamType_MAX = PAY_PARAM_MEMBER;
const int PayParamType_ARRAYSIZE = PayParamType_MAX + 1;

enum PayButtonStatus {
  PAY_BUTTON_NONE = 0,
  PAY_BUTTON_OPEN = 1,
  PAY_BUTTON_CLICK = 2
};
bool PayButtonStatus_IsValid(int value);
const PayButtonStatus PayButtonStatus_MIN = PAY_BUTTON_NONE;
const PayButtonStatus PayButtonStatus_MAX = PAY_BUTTON_CLICK;
const int PayButtonStatus_ARRAYSIZE = PayButtonStatus_MAX + 1;

enum MSUseSumamryType {
  MSUS_GET = 1,
  MSUS_FREE = 2
};
bool MSUseSumamryType_IsValid(int value);
const MSUseSumamryType MSUseSumamryType_MIN = MSUS_GET;
const MSUseSumamryType MSUseSumamryType_MAX = MSUS_FREE;
const int MSUseSumamryType_ARRAYSIZE = MSUseSumamryType_MAX + 1;

enum TeamEventG2M {
  TEAM_EVENT_BUYCOUNT = 1
};
bool TeamEventG2M_IsValid(int value);
const TeamEventG2M TeamEventG2M_MIN = TEAM_EVENT_BUYCOUNT;
const TeamEventG2M TeamEventG2M_MAX = TEAM_EVENT_BUYCOUNT;
const int TeamEventG2M_ARRAYSIZE = TeamEventG2M_MAX + 1;

enum PkReqType {
  PKREQ_ADDPK = 1,
  PKREQ_REMOVEPK = 2,
  PKREQ_ALLINFO = 3,
  PKREQ_FETCHPOINTREWARD = 4
};
bool PkReqType_IsValid(int value);
const PkReqType PkReqType_MIN = PKREQ_ADDPK;
const PkReqType PkReqType_MAX = PKREQ_FETCHPOINTREWARD;
const int PkReqType_ARRAYSIZE = PkReqType_MAX + 1;

enum AuctionReqType {
  AUCTION_ONSALE = 1,
  AUCTION_OUTSALE = 2,
  AUCTION_BUYNOW = 3
};
bool AuctionReqType_IsValid(int value);
const AuctionReqType AuctionReqType_MIN = AUCTION_ONSALE;
const AuctionReqType AuctionReqType_MAX = AUCTION_BUYNOW;
const int AuctionReqType_ARRAYSIZE = AuctionReqType_MAX + 1;

enum PunishType {
  PUNISH_NONE = 0,
  PUNISH_USER_LOGIN = 1,
  PUNISH_USER_CHAT = 2,
  PUNISH_USER_TEMP = 3,
  PUNISH_USER_WORLDBOSS_RANK = 4,
  PUNISH_USER_ROLE_GUILDBOSS = 5,
  PUNISH_USER_PK_RANK = 6,
  PUNISH_USER_ARENA_RANK = 7,
  PUNISH_USER_TOWER = 8,
  PUNISH_USER_FLOWER_RANK = 9,
  PUNISH_USER_GUILD_RANK = 10,
  PUNISH_USER_GUILDBOSS_RANK = 11,
  PUNISH_USER_ZERO_PROFIT = 12,
  PUNISH_USER_DAILY_PLAY = 13,
  PUNISH_USER_MULTI_ACTIVITY = 14,
  PUNISH_USER_HG = 15
};
bool PunishType_IsValid(int value);
const PunishType PunishType_MIN = PUNISH_NONE;
const PunishType PunishType_MAX = PUNISH_USER_HG;
const int PunishType_ARRAYSIZE = PunishType_MAX + 1;

enum PunishDataType {
  PUNISH_DATA_UPATE = 1,
  PUNISH_DATA_DELETE = 2
};
bool PunishDataType_IsValid(int value);
const PunishDataType PunishDataType_MIN = PUNISH_DATA_UPATE;
const PunishDataType PunishDataType_MAX = PUNISH_DATA_DELETE;
const int PunishDataType_ARRAYSIZE = PunishDataType_MAX + 1;

enum ServerTag {
  SERVER_TAG_NORMAL = 1,
  SERVER_TAG_IOS_AUDIT = 2
};
bool ServerTag_IsValid(int value);
const ServerTag ServerTag_MIN = SERVER_TAG_NORMAL;
const ServerTag ServerTag_MAX = SERVER_TAG_IOS_AUDIT;
const int ServerTag_ARRAYSIZE = ServerTag_MAX + 1;

enum ItemFindBackType {
  TOWER = 1,
  NVSHENSHILIAN = 2,
  GUILDACTIVITY = 3,
  FATIGUE_RECOVER = 4,
  FATIGUE_GET = 5,
  FATIGUE_BUY = 6,
  DICE_BACK = 7,
  WUJINSHENYUAN_BACK = 8,
  DRAGONEXP_BACK = 9,
  QAMULTI_BACK = 10,
  GUILDCHECKIN_BACK = 11,
  GUILD_VOICE = 12,
  COMMERCETASK_BACK = 13,
  DayActiveBack = 14,
  NestBack = 15,
  FINDBACK_MAX = 16
};
bool ItemFindBackType_IsValid(int value);
const ItemFindBackType ItemFindBackType_MIN = TOWER;
const ItemFindBackType ItemFindBackType_MAX = FINDBACK_MAX;
const int ItemFindBackType_ARRAYSIZE = ItemFindBackType_MAX + 1;

enum OutLookType {
  OutLook_Fashion = 0,
  OutLook_Equip = 1
};
bool OutLookType_IsValid(int value);
const OutLookType OutLookType_MIN = OutLook_Fashion;
const OutLookType OutLookType_MAX = OutLook_Equip;
const int OutLookType_ARRAYSIZE = OutLookType_MAX + 1;

enum SpriteType {
  Sprite_Feed = 1,
  Sprite_Evolution = 2,
  Sprite_Awake = 3,
  Sprite_Awake_Retain = 4,
  Sprite_Awake_Replace = 5,
  Sprite_InFight = 6,
  Sprite_OutFight = 7,
  Sprite_Decompose = 8,
  Sprite_SwapLeader = 9,
  Sprite_QueryEvolutionPPT = 10,
  Sprite_Train = 11,
  Sprite_ResetTrain = 12,
  Sprite_Rebirth = 13
};
bool SpriteType_IsValid(int value);
const SpriteType SpriteType_MIN = Sprite_Feed;
const SpriteType SpriteType_MAX = Sprite_Rebirth;
const int SpriteType_ARRAYSIZE = SpriteType_MAX + 1;

enum RiskGridType {
  RISK_GRID_EMPTY = 1,
  RISK_GRID_NORMALREWARD = 2,
  RISK_GRID_REWARDBOX = 3,
  RISK_GRID_ADVENTURE = 4,
  RISK_GRID_DICE = 5,
  RISK_GRID_MAX = 6
};
bool RiskGridType_IsValid(int value);
const RiskGridType RiskGridType_MIN = RISK_GRID_EMPTY;
const RiskGridType RiskGridType_MAX = RISK_GRID_MAX;
const int RiskGridType_ARRAYSIZE = RiskGridType_MAX + 1;

enum RiskBoxState {
  RISK_BOX_LOCKED = 1,
  RISK_BOX_UNLOCKED = 2,
  RISK_BOX_CANGETREWARD = 3,
  RISK_BOX_GETREWARD = 4,
  RISK_BOX_DELETE = 5
};
bool RiskBoxState_IsValid(int value);
const RiskBoxState RiskBoxState_MIN = RISK_BOX_LOCKED;
const RiskBoxState RiskBoxState_MAX = RISK_BOX_DELETE;
const int RiskBoxState_ARRAYSIZE = RiskBoxState_MAX + 1;

enum DEProgressState {
  DEPS_FINISH = 1,
  DEPS_FIGHT = 2,
  DEPS_NOTOPEN = 3
};
bool DEProgressState_IsValid(int value);
const DEProgressState DEProgressState_MIN = DEPS_FINISH;
const DEProgressState DEProgressState_MAX = DEPS_NOTOPEN;
const int DEProgressState_ARRAYSIZE = DEProgressState_MAX + 1;

enum ReviveType {
  ReviveNone = 0,
  ReviveFree = 1,
  ReviveItem = 2,
  ReviveMoney = 3,
  ReviveSprite = 4,
  ReviveVIP = 5,
  ReviveMax = 6
};
bool ReviveType_IsValid(int value);
const ReviveType ReviveType_MIN = ReviveNone;
const ReviveType ReviveType_MAX = ReviveMax;
const int ReviveType_ARRAYSIZE = ReviveType_MAX + 1;

enum GuildOpType {
  STUDY_SKILL = 1,
  GUILD_DARE_INFO = 2
};
bool GuildOpType_IsValid(int value);
const GuildOpType GuildOpType_MIN = STUDY_SKILL;
const GuildOpType GuildOpType_MAX = GUILD_DARE_INFO;
const int GuildOpType_ARRAYSIZE = GuildOpType_MAX + 1;

enum AuctionAllReqType {
  ART_REQSALE = 1,
  ART_QUITSALE = 2,
  ART_RESALE = 3,
  ART_ALLITEMBRIEF = 4,
  ART_ITEMDATA = 5,
  ART_MYSALE = 6,
  ART_BUY = 7,
  ART_REFRESH_FREE = 8,
  ART_REFRESH_PAY = 9,
  ART_TRADE_PRICE = 10,
  ART_REFRESH_AUTO = 11
};
bool AuctionAllReqType_IsValid(int value);
const AuctionAllReqType AuctionAllReqType_MIN = ART_REQSALE;
const AuctionAllReqType AuctionAllReqType_MAX = ART_REFRESH_AUTO;
const int AuctionAllReqType_ARRAYSIZE = AuctionAllReqType_MAX + 1;

enum ItemEnum {
  Virtual_Max = 50
};
bool ItemEnum_IsValid(int value);
const ItemEnum ItemEnum_MIN = Virtual_Max;
const ItemEnum ItemEnum_MAX = Virtual_Max;
const int ItemEnum_ARRAYSIZE = ItemEnum_MAX + 1;

enum GuildCardOp {
  GuildCard_Query = 1,
  GuildCard_Start = 2,
  GuildCard_Change = 3,
  GuildCard_End = 4
};
bool GuildCardOp_IsValid(int value);
const GuildCardOp GuildCardOp_MIN = GuildCard_Query;
const GuildCardOp GuildCardOp_MAX = GuildCard_End;
const int GuildCardOp_ARRAYSIZE = GuildCardOp_MAX + 1;

enum PkResultType {
  PkResult_Win = 1,
  PkResult_Lose = 2,
  PkResult_Draw = 3
};
bool PkResultType_IsValid(int value);
const PkResultType PkResultType_MIN = PkResult_Win;
const PkResultType PkResultType_MAX = PkResult_Draw;
const int PkResultType_ARRAYSIZE = PkResultType_MAX + 1;

enum HallIconState {
  HICONS_BEGIN = 1,
  HICONS_END = 2
};
bool HallIconState_IsValid(int value);
const HallIconState HallIconState_MIN = HICONS_BEGIN;
const HallIconState HallIconState_MAX = HICONS_END;
const int HallIconState_ARRAYSIZE = HallIconState_MAX + 1;

enum TaskStatus {
  TaskStatus_CanTake = 1,
  TaskStatus_Taked = 2,
  TaskStatus_Finish = 3,
  TaskStatus_Over = 4
};
bool TaskStatus_IsValid(int value);
const TaskStatus TaskStatus_MIN = TaskStatus_CanTake;
const TaskStatus TaskStatus_MAX = TaskStatus_Over;
const int TaskStatus_ARRAYSIZE = TaskStatus_MAX + 1;

enum SkyCityTimeType {
  Waiting = 1,
  Race = 2,
  MidleEndInRest = 3,
  FirstWaiting = 4,
  SecondWaiting = 5,
  SC_NONE = 6
};
bool SkyCityTimeType_IsValid(int value);
const SkyCityTimeType SkyCityTimeType_MIN = Waiting;
const SkyCityTimeType SkyCityTimeType_MAX = SC_NONE;
const int SkyCityTimeType_ARRAYSIZE = SkyCityTimeType_MAX + 1;

enum GMFReadyType {
  GMF_READY_UP = 1,
  GMF_READY_DOWN = 2,
  GMF_READY_KICK = 3
};
bool GMFReadyType_IsValid(int value);
const GMFReadyType GMFReadyType_MIN = GMF_READY_UP;
const GMFReadyType GMFReadyType_MAX = GMF_READY_KICK;
const int GMFReadyType_ARRAYSIZE = GMFReadyType_MAX + 1;

enum CardMatchOp {
  CardMatch_Begin = 0,
  CardMatch_Add = 2,
  CardMatch_Del = 3,
  CardMatch_RoundBegin = 4,
  CardMatch_RoundChange = 5,
  CardMatch_RoundEnd = 6,
  CardMatch_End = 7,
  CardMatch_Query = 8,
  CardMatch_RoundWaiting = 9,
  CardMatch_SignUp = 10
};
bool CardMatchOp_IsValid(int value);
const CardMatchOp CardMatchOp_MIN = CardMatch_Begin;
const CardMatchOp CardMatchOp_MAX = CardMatch_SignUp;
const int CardMatchOp_ARRAYSIZE = CardMatchOp_MAX + 1;

enum CardMatchState {
  CardMatch_StateBegin = 0,
  CardMatch_StateWaiting = 1,
  CardMatch_StateRoundWaiting = 2,
  CardMatch_StateRoundBegin = 3,
  CardMatch_StateRounding = 4,
  CardMatch_StateRoundEnd = 5,
  CardMatch_StateEnd = 6,
  CardMatch_StateDummy = 7
};
bool CardMatchState_IsValid(int value);
const CardMatchState CardMatchState_MIN = CardMatch_StateBegin;
const CardMatchState CardMatchState_MAX = CardMatch_StateDummy;
const int CardMatchState_ARRAYSIZE = CardMatchState_MAX + 1;

enum GuildBindStatus {
  GBS_NotBind = 1,
  GBS_Owner = 2,
  GBS_Admin = 3,
  GBS_Member = 4,
  GBS_NotMember = 5
};
bool GuildBindStatus_IsValid(int value);
const GuildBindStatus GuildBindStatus_MIN = GBS_NotBind;
const GuildBindStatus GuildBindStatus_MAX = GBS_NotMember;
const int GuildBindStatus_ARRAYSIZE = GuildBindStatus_MAX + 1;

enum GmfBattleState {
  GMF_BS_NONE = 4,
  GMF_BS_WAIT = 1,
  GMF_BS_FIGHT = 2,
  GMF_BS_RESULT = 3
};
bool GmfBattleState_IsValid(int value);
const GmfBattleState GmfBattleState_MIN = GMF_BS_WAIT;
const GmfBattleState GmfBattleState_MAX = GMF_BS_NONE;
const int GmfBattleState_ARRAYSIZE = GmfBattleState_MAX + 1;

enum BroadCastType {
  BroadCastToAll = 1,
  BroadCastMax = 2
};
bool BroadCastType_IsValid(int value);
const BroadCastType BroadCastType_MIN = BroadCastToAll;
const BroadCastType BroadCastType_MAX = BroadCastMax;
const int BroadCastType_ARRAYSIZE = BroadCastType_MAX + 1;

enum ActOpenState {
  ActOpenState_NotOpen = 1,
  ActOpenState_Prepare = 2,
  ActOpenState_Running = 3,
  ActOpenState_Over = 4
};
bool ActOpenState_IsValid(int value);
const ActOpenState ActOpenState_MIN = ActOpenState_NotOpen;
const ActOpenState ActOpenState_MAX = ActOpenState_Over;
const int ActOpenState_ARRAYSIZE = ActOpenState_MAX + 1;

enum PlantGrowState {
  growDrought = 1,
  growPest = 2,
  growSluggish = 3,
  growCD = 4,
  growMature = 5,
  growCorrect = 6
};
bool PlantGrowState_IsValid(int value);
const PlantGrowState PlantGrowState_MIN = growDrought;
const PlantGrowState PlantGrowState_MAX = growCorrect;
const int PlantGrowState_ARRAYSIZE = PlantGrowState_MAX + 1;

enum GardenPlayEventType {
  PLANT = 1,
  PLANT_STAGE = 2,
  PLANT_STATE_CHANGE = 3,
  BANQUET = 4,
  BANQUET_STAGE = 5,
  PLANT_DELETE = 6,
  PLANT_SPRITE = 7,
  PLANT_MATURE = 8,
  FISH_FACE = 9,
  FISH_RESULT = 10,
  FISH_STOP = 11
};
bool GardenPlayEventType_IsValid(int value);
const GardenPlayEventType GardenPlayEventType_MIN = PLANT;
const GardenPlayEventType GardenPlayEventType_MAX = FISH_STOP;
const int GardenPlayEventType_ARRAYSIZE = GardenPlayEventType_MAX + 1;

enum GMF_FINAL_WIN_TYPE {
  GMF_FWY_NORMAL = 1,
  GMF_FWY_OPNONE = 2,
  GMF_FWY_RANK = 3
};
bool GMF_FINAL_WIN_TYPE_IsValid(int value);
const GMF_FINAL_WIN_TYPE GMF_FINAL_WIN_TYPE_MIN = GMF_FWY_NORMAL;
const GMF_FINAL_WIN_TYPE GMF_FINAL_WIN_TYPE_MAX = GMF_FWY_RANK;
const int GMF_FINAL_WIN_TYPE_ARRAYSIZE = GMF_FINAL_WIN_TYPE_MAX + 1;

enum RoleEventType {
  OnSendFriendGift = 1
};
bool RoleEventType_IsValid(int value);
const RoleEventType RoleEventType_MIN = OnSendFriendGift;
const RoleEventType RoleEventType_MAX = OnSendFriendGift;
const int RoleEventType_ARRAYSIZE = RoleEventType_MAX + 1;

enum WageRewardState {
  cannot = 1,
  rewarded = 2,
  notreward = 3
};
bool WageRewardState_IsValid(int value);
const WageRewardState WageRewardState_MIN = cannot;
const WageRewardState WageRewardState_MAX = notreward;
const int WageRewardState_ARRAYSIZE = WageRewardState_MAX + 1;

enum ItemUseOp {
  BagFind = 0,
  BodyFind = 1,
  FashionWear = 2,
  FashionOff = 3,
  Composite = 4,
  FashionSuitWear = 5,
  FashionSuitOff = 6,
  ItemBuffAdd = 7,
  FashionDisplayWear = 8,
  FashionDisplayOff = 9,
  FashionSuitDisplayWear = 10,
  FashionSuitDisplayOff = 11,
  ActivationFashion = 12,
  ActivationHairColor = 13,
  UseHairColor = 14
};
bool ItemUseOp_IsValid(int value);
const ItemUseOp ItemUseOp_MIN = BagFind;
const ItemUseOp ItemUseOp_MAX = UseHairColor;
const int ItemUseOp_ARRAYSIZE = ItemUseOp_MAX + 1;

enum ResWarTimeType {
  RealyTime = 1,
  RaceTime = 2,
  EndTime = 3,
  ResWarNone = 4
};
bool ResWarTimeType_IsValid(int value);
const ResWarTimeType ResWarTimeType_MIN = RealyTime;
const ResWarTimeType ResWarTimeType_MAX = ResWarNone;
const int ResWarTimeType_ARRAYSIZE = ResWarTimeType_MAX + 1;

enum ResWarResult {
  RESWAR_SUCESS = 1,
  RESWAR_FAIL = 2,
  RESWAR_FLAT = 3
};
bool ResWarResult_IsValid(int value);
const ResWarResult ResWarResult_MIN = RESWAR_SUCESS;
const ResWarResult ResWarResult_MAX = RESWAR_FLAT;
const int ResWarResult_ARRAYSIZE = ResWarResult_MAX + 1;

enum GuildAuctReqType {
  GART_ACT_TYPE = 1,
  GART_ITEM_TYPE = 2,
  GART_BUY_AUCT = 5,
  GART_BUY_NOW = 6,
  GART_AUCT_GUILD_HISTORY = 7,
  GART_AUCT_WORLD_HISTORY = 8
};
bool GuildAuctReqType_IsValid(int value);
const GuildAuctReqType GuildAuctReqType_MIN = GART_ACT_TYPE;
const GuildAuctReqType GuildAuctReqType_MAX = GART_AUCT_WORLD_HISTORY;
const int GuildAuctReqType_ARRAYSIZE = GuildAuctReqType_MAX + 1;

enum GardenQuestType {
  MYSELF = 1,
  FRIEND = 2,
  GUILD = 3
};
bool GardenQuestType_IsValid(int value);
const GardenQuestType GardenQuestType_MIN = MYSELF;
const GardenQuestType GardenQuestType_MAX = GUILD;
const int GardenQuestType_ARRAYSIZE = GardenQuestType_MAX + 1;

enum GuildArenaType {
  battleone = 1,
  battletwo = 2,
  battlethree = 3,
  battlefour = 4,
  battlefinal = 5,
  apply = 6,
  resttime = 0,
  notopen = 7
};
bool GuildArenaType_IsValid(int value);
const GuildArenaType GuildArenaType_MIN = resttime;
const GuildArenaType GuildArenaType_MAX = notopen;
const int GuildArenaType_ARRAYSIZE = GuildArenaType_MAX + 1;

enum StageRankCond {
  StageRankCond_Time = 1,
  StageRankCond_Hppercent = 2,
  StageRankCond_Found = 3,
  StageRankCond_Behit = 4,
  StageRankCond_NpcHp = 5,
  StageRankCond_Combo = 6,
  StageRankCond_KillEnemyScore = 7,
  StageRankCond_AliveTime = 8,
  StageRankCond_TotalKillEnemyScore = 9
};
bool StageRankCond_IsValid(int value);
const StageRankCond StageRankCond_MIN = StageRankCond_Time;
const StageRankCond StageRankCond_MAX = StageRankCond_TotalKillEnemyScore;
const int StageRankCond_ARRAYSIZE = StageRankCond_MAX + 1;

enum GuildAuctResultType {
  GA_RESULT_BUY_NOW = 1,
  GA_RESULT_BUY_AUCT = 2,
  GA_RESULT_TO_WORLD = 3
};
bool GuildAuctResultType_IsValid(int value);
const GuildAuctResultType GuildAuctResultType_MIN = GA_RESULT_BUY_NOW;
const GuildAuctResultType GuildAuctResultType_MAX = GA_RESULT_TO_WORLD;
const int GuildAuctResultType_ARRAYSIZE = GuildAuctResultType_MAX + 1;

enum IntegralState {
  integralready = 1,
  integralenterscene = 2,
  integralwatch = 3,
  integralend = 4
};
bool IntegralState_IsValid(int value);
const IntegralState IntegralState_MIN = integralready;
const IntegralState IntegralState_MAX = integralend;
const int IntegralState_ARRAYSIZE = IntegralState_MAX + 1;

enum ResWarState {
  ResWarExploreState = 1,
  ResWarCancelState = 2
};
bool ResWarState_IsValid(int value);
const ResWarState ResWarState_MIN = ResWarExploreState;
const ResWarState ResWarState_MAX = ResWarCancelState;
const int ResWarState_ARRAYSIZE = ResWarState_MAX + 1;

enum ServerFlag {
  ServerFlag_Maintain = 0,
  ServerFlag_New = 1,
  ServerFlag_Hot = 2,
  ServerFlag_Full = 3,
  ServerFlag_Recommend = 4,
  ServerFlag_Dummy = 5,
  ServerFlag_Smooth = 7
};
bool ServerFlag_IsValid(int value);
const ServerFlag ServerFlag_MIN = ServerFlag_Maintain;
const ServerFlag ServerFlag_MAX = ServerFlag_Smooth;
const int ServerFlag_ARRAYSIZE = ServerFlag_MAX + 1;

enum EnumServerState {
  ServerState_Maintain = 0,
  ServerState_Smooth = 1,
  ServerState_Hot = 2,
  ServerState_Full = 3,
  ServerState_Recommend = 4,
  ServerState_Auto = 5
};
bool EnumServerState_IsValid(int value);
const EnumServerState EnumServerState_MIN = ServerState_Maintain;
const EnumServerState EnumServerState_MAX = ServerState_Auto;
const int EnumServerState_ARRAYSIZE = EnumServerState_MAX + 1;

enum OutLookStateType {
  OutLook_Normal = 0,
  OutLook_Sit = 1,
  OutLook_Dance = 2,
  OutLook_RidePet = 3,
  OutLook_Inherit = 4,
  OutLook_Fish = 5,
  OutLook_RidePetCopilot = 6,
  OutLook_Trans = 7
};
bool OutLookStateType_IsValid(int value);
const OutLookStateType OutLookStateType_MIN = OutLook_Normal;
const OutLookStateType OutLookStateType_MAX = OutLook_Trans;
const int OutLookStateType_ARRAYSIZE = OutLookStateType_MAX + 1;

enum FunctionId {
  FunctionId_QQVip = 0,
  FunctionId_IOSCheck = 1,
  FunctionId_StartPrivilege = 2
};
bool FunctionId_IsValid(int value);
const FunctionId FunctionId_MIN = FunctionId_QQVip;
const FunctionId FunctionId_MAX = FunctionId_StartPrivilege;
const int FunctionId_ARRAYSIZE = FunctionId_MAX + 1;

enum LeaveTeamType {
  LTT_BY_SELF = 0,
  LTT_KICK = 1,
  LTT_DEL_ROBOT = 2,
  LTT_MS_CRASH = 3,
  LLT_LEADER_TIMEOVER = 4
};
bool LeaveTeamType_IsValid(int value);
const LeaveTeamType LeaveTeamType_MIN = LTT_BY_SELF;
const LeaveTeamType LeaveTeamType_MAX = LLT_LEADER_TIMEOVER;
const int LeaveTeamType_ARRAYSIZE = LeaveTeamType_MAX + 1;

enum StartUpType {
  StartUp_Normal = 1,
  StartUp_QQ = 2,
  StartUp_WX = 3
};
bool StartUpType_IsValid(int value);
const StartUpType StartUpType_MIN = StartUp_Normal;
const StartUpType StartUpType_MAX = StartUp_WX;
const int StartUpType_ARRAYSIZE = StartUpType_MAX + 1;

enum AntiAddictionReportType {
  ReportTypeSingle = 1,
  ReportTypeTotal = 2
};
bool AntiAddictionReportType_IsValid(int value);
const AntiAddictionReportType AntiAddictionReportType_MIN = ReportTypeSingle;
const AntiAddictionReportType AntiAddictionReportType_MAX = ReportTypeTotal;
const int AntiAddictionReportType_ARRAYSIZE = AntiAddictionReportType_MAX + 1;

enum DBOperType {
  DBOper_Insert = 1,
  DBOper_Update = 2,
  DBOper_Del = 3,
  DBOper_DelAll = 4,
  DBOper_ReplaceId = 5
};
bool DBOperType_IsValid(int value);
const DBOperType DBOperType_MIN = DBOper_Insert;
const DBOperType DBOperType_MAX = DBOper_ReplaceId;
const int DBOperType_ARRAYSIZE = DBOperType_MAX + 1;

enum MentorApplyStatus {
  MentorApplyMaster = 1,
  MentorApplyStudent = 2,
  MentorApplyHas = 3,
  MentorApplyStatusMax = 4
};
bool MentorApplyStatus_IsValid(int value);
const MentorApplyStatus MentorApplyStatus_MIN = MentorApplyMaster;
const MentorApplyStatus MentorApplyStatus_MAX = MentorApplyStatusMax;
const int MentorApplyStatus_ARRAYSIZE = MentorApplyStatus_MAX + 1;

enum MentorRelationStatus {
  MentorRelationIn = 1,
  MentorRelationComplete = 2,
  MentorRelationBreakApply = 3,
  MentorRelationBreak = 4,
  MentorRelationMax = 5
};
bool MentorRelationStatus_IsValid(int value);
const MentorRelationStatus MentorRelationStatus_MIN = MentorRelationIn;
const MentorRelationStatus MentorRelationStatus_MAX = MentorRelationMax;
const int MentorRelationStatus_ARRAYSIZE = MentorRelationStatus_MAX + 1;

enum MentorMsgApplyType {
  MentorMsgApplyMaster = 1,
  MentorMsgApplyStudent = 2,
  MentorMsgApplyInherit = 3,
  MentorMsgApplyReportTask = 4,
  MentorMsgApplyBreak = 5,
  MentorMsgApplyMax = 6
};
bool MentorMsgApplyType_IsValid(int value);
const MentorMsgApplyType MentorMsgApplyType_MIN = MentorMsgApplyMaster;
const MentorMsgApplyType MentorMsgApplyType_MAX = MentorMsgApplyMax;
const int MentorMsgApplyType_ARRAYSIZE = MentorMsgApplyType_MAX + 1;

enum MentorRelationOpType {
  MentorRelationOp_ApplyMaster = 1,
  MentorRelationOp_ApplyStudent = 2,
  MentorRelationOp_Inherit = 3,
  MentorRelationOp_ReportTask = 4,
  MentorRelationOp_ReportAllTask = 5,
  MentorRelationOp_Break = 6,
  MentorRelationOp_BreakCancel = 7,
  MentorRelationOp_NormalComplete = 8,
  MentorRelationOp_ForceComplete = 9,
  MentorRelationOp_Max = 10
};
bool MentorRelationOpType_IsValid(int value);
const MentorRelationOpType MentorRelationOpType_MIN = MentorRelationOp_ApplyMaster;
const MentorRelationOpType MentorRelationOpType_MAX = MentorRelationOp_Max;
const int MentorRelationOpType_ARRAYSIZE = MentorRelationOpType_MAX + 1;

enum EMentorRelationPosition {
  EMentorPosMaster = 1,
  EMentorPosStudent = 2,
  EMentorPosMax = 3
};
bool EMentorRelationPosition_IsValid(int value);
const EMentorRelationPosition EMentorRelationPosition_MIN = EMentorPosMaster;
const EMentorRelationPosition EMentorRelationPosition_MAX = EMentorPosMax;
const int EMentorRelationPosition_ARRAYSIZE = EMentorRelationPosition_MAX + 1;

enum EMentorTaskStatus {
  EMentorTask_UnComplete = 1,
  EMentorTask_CanReport = 2,
  EMentorTask_AlreadyReport = 3,
  EMentorTask_ConfirmReport = 4,
  EMentorTask_CompleteBefore = 5,
  EMentorTask_Max = 6
};
bool EMentorTaskStatus_IsValid(int value);
const EMentorTaskStatus EMentorTaskStatus_MIN = EMentorTask_UnComplete;
const EMentorTaskStatus EMentorTaskStatus_MAX = EMentorTask_Max;
const int EMentorTaskStatus_ARRAYSIZE = EMentorTaskStatus_MAX + 1;

enum EMentorMsgOpType {
  EMentorMsgOp_Get = 1,
  EMentorMsgOpType_Clear = 2,
  EMentorMsgOpType_Agree = 3,
  EMentorMsgOpType_Reject = 4,
  EMentorMsgOpType_Max = 5
};
bool EMentorMsgOpType_IsValid(int value);
const EMentorMsgOpType EMentorMsgOpType_MIN = EMentorMsgOp_Get;
const EMentorMsgOpType EMentorMsgOpType_MAX = EMentorMsgOpType_Max;
const int EMentorMsgOpType_ARRAYSIZE = EMentorMsgOpType_MAX + 1;

enum PartnerUpdateType {
  PUType_Normal = 1,
  PUType_Leave = 2,
  PUType_Dissolve = 3,
  PUType_Shop = 4
};
bool PartnerUpdateType_IsValid(int value);
const PartnerUpdateType PartnerUpdateType_MIN = PUType_Normal;
const PartnerUpdateType PartnerUpdateType_MAX = PUType_Shop;
const int PartnerUpdateType_ARRAYSIZE = PartnerUpdateType_MAX + 1;

enum PartnerOperType {
  POT_Normal = 1,
  POT_Liveness = 2,
  POT_Leave = 3,
  POT_ApplyLeave = 4,
  POT_CancelLeave = 5,
  POT_Dissolve = 6
};
bool PartnerOperType_IsValid(int value);
const PartnerOperType PartnerOperType_MIN = POT_Normal;
const PartnerOperType PartnerOperType_MAX = POT_Dissolve;
const int PartnerOperType_ARRAYSIZE = PartnerOperType_MAX + 1;

enum InvFightReqType {
  IFRT_INV_ONE = 1,
  IFRT_REFUSH_ONE = 2,
  IFRT_IGNORE_ALL = 3,
  IFRT_REQ_LIST = 4,
  IFRT_ACCEPT_ONE = 5
};
bool InvFightReqType_IsValid(int value);
const InvFightReqType InvFightReqType_MIN = IFRT_INV_ONE;
const InvFightReqType InvFightReqType_MAX = IFRT_ACCEPT_ONE;
const int InvFightReqType_ARRAYSIZE = InvFightReqType_MAX + 1;

enum InvFightNotifyType {
  IFNT_REFUSE_ME = 1,
  IFNT_INVITE_ME = 2
};
bool InvFightNotifyType_IsValid(int value);
const InvFightNotifyType InvFightNotifyType_MIN = IFNT_REFUSE_ME;
const InvFightNotifyType InvFightNotifyType_MAX = IFNT_INVITE_ME;
const int InvFightNotifyType_ARRAYSIZE = InvFightNotifyType_MAX + 1;

enum GCFReqType {
  GCF_JOIN_READY_SCENE = 1,
  GCF_FIGHT_REPORT = 2,
  GCF_FIGHT_RESULT = 3,
  GCF_JOIN_FIGHT_SCENE = 4
};
bool GCFReqType_IsValid(int value);
const GCFReqType GCFReqType_MIN = GCF_JOIN_READY_SCENE;
const GCFReqType GCFReqType_MAX = GCF_JOIN_FIGHT_SCENE;
const int GCFReqType_ARRAYSIZE = GCFReqType_MAX + 1;

enum GCFJvDianType {
  GCF_JUDIAN_UP = 1,
  GCF_JUDIAN_MID = 2,
  GCF_JUDIAN_DOWN = 3
};
bool GCFJvDianType_IsValid(int value);
const GCFJvDianType GCFJvDianType_MIN = GCF_JUDIAN_UP;
const GCFJvDianType GCFJvDianType_MAX = GCF_JUDIAN_DOWN;
const int GCFJvDianType_ARRAYSIZE = GCFJvDianType_MAX + 1;

enum GCFZhanLingType {
  GCFZL_BEGIN = 1,
  GCFZL_BREAK = 2,
  GCFZL_END = 3
};
bool GCFZhanLingType_IsValid(int value);
const GCFZhanLingType GCFZhanLingType_MIN = GCFZL_BEGIN;
const GCFZhanLingType GCFZhanLingType_MAX = GCFZL_END;
const int GCFZhanLingType_ARRAYSIZE = GCFZhanLingType_MAX + 1;

enum GCFsynType {
  GCF_SYN_KILL = 1,
  GCF_SYN_LEAVE_BATTLE = 2,
  GCF_SYN_OCCUPY = 3,
  GCF_SYN_MUL_POINT = 4,
  GCF_SYN_FIGHT_END = 5,
  GCF_SYN_BACK_TO_READY = 6
};
bool GCFsynType_IsValid(int value);
const GCFsynType GCFsynType_MIN = GCF_SYN_KILL;
const GCFsynType GCFsynType_MAX = GCF_SYN_BACK_TO_READY;
const int GCFsynType_ARRAYSIZE = GCFsynType_MAX + 1;

enum GUILDTERRTYPE {
  TERR_NOT_OPEN = 1,
  ALLIANCE = 2,
  TERR_WARING = 3,
  TERR_END = 4,
  WAITING = 5
};
bool GUILDTERRTYPE_IsValid(int value);
const GUILDTERRTYPE GUILDTERRTYPE_MIN = TERR_NOT_OPEN;
const GUILDTERRTYPE GUILDTERRTYPE_MAX = WAITING;
const int GUILDTERRTYPE_ARRAYSIZE = GUILDTERRTYPE_MAX + 1;

enum GCFG2CSynType {
  GCF_G2C_SYN_KILL_ONE = 1,
  GCF_G2C_SYN_MUL_POINT = 2,
  GCF_G2C_SYN_OCCUPY = 3,
  GCF_G2C_SYN_KILL_COUNT = 4
};
bool GCFG2CSynType_IsValid(int value);
const GCFG2CSynType GCFG2CSynType_MIN = GCF_G2C_SYN_KILL_ONE;
const GCFG2CSynType GCFG2CSynType_MAX = GCF_G2C_SYN_KILL_COUNT;
const int GCFG2CSynType_ARRAYSIZE = GCFG2CSynType_MAX + 1;

enum UnitSpecialState {
  Unit_Puppet = 1,
  Unit_Invisible = 2
};
bool UnitSpecialState_IsValid(int value);
const UnitSpecialState UnitSpecialState_MIN = Unit_Puppet;
const UnitSpecialState UnitSpecialState_MAX = Unit_Invisible;
const int UnitSpecialState_ARRAYSIZE = UnitSpecialState_MAX + 1;

enum PayAccessDataType {
  PayAccess_SaveAmt = 1,
  PayAccess_Other = 2,
  PayAccess_Send = 3,
  PayAccess_Consume = 4,
  PayAccess_ALL = 5
};
bool PayAccessDataType_IsValid(int value);
const PayAccessDataType PayAccessDataType_MIN = PayAccess_SaveAmt;
const PayAccessDataType PayAccessDataType_MAX = PayAccess_ALL;
const int PayAccessDataType_ARRAYSIZE = PayAccessDataType_MAX + 1;

enum BroadCastG2RType {
  BroadCastG2RType_MS = 1,
  BroadCastG2RType_NS = 2,
  BroadCastG2RType_DB = 3
};
bool BroadCastG2RType_IsValid(int value);
const BroadCastG2RType BroadCastG2RType_MIN = BroadCastG2RType_MS;
const BroadCastG2RType BroadCastG2RType_MAX = BroadCastG2RType_DB;
const int BroadCastG2RType_ARRAYSIZE = BroadCastG2RType_MAX + 1;

enum HeroBattleOver {
  HeroBattleOver_Win = 1,
  HeroBattleOver_Lose = 2,
  HeroBattleOver_Draw = 3
};
bool HeroBattleOver_IsValid(int value);
const HeroBattleOver HeroBattleOver_MIN = HeroBattleOver_Win;
const HeroBattleOver HeroBattleOver_MAX = HeroBattleOver_Draw;
const int HeroBattleOver_ARRAYSIZE = HeroBattleOver_MAX + 1;

enum LeagueBattleTimeState {
  LBTS_BeforeOpen = 1,
  LBTS_Apply = 2,
  LBTS_Idle = 3,
  LBTS_PointRace = 4,
  LBTS_Elimination = 5,
  LBTS_CrossIdle = 6,
  LBTS_CrossPointRace = 7,
  LBTS_CrossElimination = 8,
  LBTS_SeasonEnd = 9
};
bool LeagueBattleTimeState_IsValid(int value);
const LeagueBattleTimeState LeagueBattleTimeState_MIN = LBTS_BeforeOpen;
const LeagueBattleTimeState LeagueBattleTimeState_MAX = LBTS_SeasonEnd;
const int LeagueBattleTimeState_ARRAYSIZE = LeagueBattleTimeState_MAX + 1;

enum LeagueBattleReqType {
  LBReqType_Match = 1,
  LBReqType_CancelMatch = 2
};
bool LeagueBattleReqType_IsValid(int value);
const LeagueBattleReqType LeagueBattleReqType_MIN = LBReqType_Match;
const LeagueBattleReqType LeagueBattleReqType_MAX = LBReqType_CancelMatch;
const int LeagueBattleReqType_ARRAYSIZE = LeagueBattleReqType_MAX + 1;

enum LeagueTeamState {
  LeagueTeamState_Idle = 1,
  LeagueTeamState_Match = 2,
  LeagueTeamState_Battle = 3
};
bool LeagueTeamState_IsValid(int value);
const LeagueTeamState LeagueTeamState_MIN = LeagueTeamState_Idle;
const LeagueTeamState LeagueTeamState_MAX = LeagueTeamState_Battle;
const int LeagueTeamState_ARRAYSIZE = LeagueTeamState_MAX + 1;

enum LeagueBattleRoleState {
  LBRoleState_None = 1,
  LBRoleState_Waiting = 2,
  LBRoleState_Leave = 3,
  LBRoleState_Fighting = 4,
  LBRoleState_Win = 5,
  LBRoleState_Failed = 6
};
bool LeagueBattleRoleState_IsValid(int value);
const LeagueBattleRoleState LeagueBattleRoleState_MIN = LBRoleState_None;
const LeagueBattleRoleState LeagueBattleRoleState_MAX = LBRoleState_Failed;
const int LeagueBattleRoleState_ARRAYSIZE = LeagueBattleRoleState_MAX + 1;

enum LeagueBattleReadyOper {
  LBReady_Up = 1,
  LBReady_Down = 2
};
bool LeagueBattleReadyOper_IsValid(int value);
const LeagueBattleReadyOper LeagueBattleReadyOper_MIN = LBReady_Up;
const LeagueBattleReadyOper LeagueBattleReadyOper_MAX = LBReady_Down;
const int LeagueBattleReadyOper_ARRAYSIZE = LeagueBattleReadyOper_MAX + 1;

enum LeagueBattleType {
  LeagueBattleType_RacePoint = 1,
  LeagueBattleType_Eliminate = 2,
  LeagueBattleType_CrossRacePoint = 3,
  LeagueBattleType_CrossEliminate = 4
};
bool LeagueBattleType_IsValid(int value);
const LeagueBattleType LeagueBattleType_MIN = LeagueBattleType_RacePoint;
const LeagueBattleType LeagueBattleType_MAX = LeagueBattleType_CrossEliminate;
const int LeagueBattleType_ARRAYSIZE = LeagueBattleType_MAX + 1;

enum SkillTypeEnum {
  Skill_None = 0,
  Skill_Normal = 1,
  Skill_Big = 2,
  Skill_UnUsed = 3,
  Skill_SceneBuff = 4,
  Skill_Help = 5,
  Skill_Buff = 6
};
bool SkillTypeEnum_IsValid(int value);
const SkillTypeEnum SkillTypeEnum_MIN = Skill_None;
const SkillTypeEnum SkillTypeEnum_MAX = Skill_Buff;
const int SkillTypeEnum_ARRAYSIZE = SkillTypeEnum_MAX + 1;

enum LeagueBattleFightState {
  LBFight_None = 1,
  LBFight_Wait = 2,
  LBFight_Fight = 3,
  LBFight_Result = 4
};
bool LeagueBattleFightState_IsValid(int value);
const LeagueBattleFightState LeagueBattleFightState_MIN = LBFight_None;
const LeagueBattleFightState LeagueBattleFightState_MAX = LBFight_Result;
const int LeagueBattleFightState_ARRAYSIZE = LeagueBattleFightState_MAX + 1;

enum LBEleRoomState {
  LBEleRoomState_Idle = 1,
  LBEleRoomState_Fighting = 2,
  LBEleRoomState_Finish = 3
};
bool LBEleRoomState_IsValid(int value);
const LBEleRoomState LBEleRoomState_MIN = LBEleRoomState_Idle;
const LBEleRoomState LBEleRoomState_MAX = LBEleRoomState_Finish;
const int LBEleRoomState_ARRAYSIZE = LBEleRoomState_MAX + 1;

enum GuildQAType {
  NO_GUILD = 0,
  BEFORE_OPEN = 1,
  IN_TIME_NOT_OPEN = 2,
  IN_TIME_OPENING = 3,
  AFTER_OPEN = 4,
  NOT_OPEN_DAY = 5
};
bool GuildQAType_IsValid(int value);
const GuildQAType GuildQAType_MIN = NO_GUILD;
const GuildQAType GuildQAType_MAX = NOT_OPEN_DAY;
const int GuildQAType_ARRAYSIZE = GuildQAType_MAX + 1;

enum CommentType {
  COMMENT_NEST = 1,
  COMMENT_DRAGON = 2,
  COMMENT_LADDER = 3,
  COMMENT_ATLAS = 4,
  COMMENT_PANDORA = 5,
  COMMENT_SPRITE = 6
};
bool CommentType_IsValid(int value);
const CommentType CommentType_MIN = COMMENT_NEST;
const CommentType CommentType_MAX = COMMENT_SPRITE;
const int CommentType_ARRAYSIZE = CommentType_MAX + 1;

enum PersonalCarrerReqType {
  PCRT_HOME_PAGE = 1,
  PCRT_PVP_PKINFO = 2,
  PCRT_TROPHY = 3
};
bool PersonalCarrerReqType_IsValid(int value);
const PersonalCarrerReqType PersonalCarrerReqType_MIN = PCRT_HOME_PAGE;
const PersonalCarrerReqType PersonalCarrerReqType_MAX = PCRT_TROPHY;
const int PersonalCarrerReqType_ARRAYSIZE = PersonalCarrerReqType_MAX + 1;

enum CarrerDataType {
  CARRER_DATA_LEVEL = 1,
  CARRER_DATA_NEST = 2,
  CARRER_DATA_DRAGON = 3,
  CARRER_DATA_CREATEROLE = 4
};
bool CarrerDataType_IsValid(int value);
const CarrerDataType CarrerDataType_MIN = CARRER_DATA_LEVEL;
const CarrerDataType CarrerDataType_MAX = CARRER_DATA_CREATEROLE;
const int CarrerDataType_ARRAYSIZE = CarrerDataType_MAX + 1;

enum MatchToWorldType {
  MTWT_ADD = 1,
  MTWT_DEL = 2,
  MTWT_MATCH_INWORLD = 3
};
bool MatchToWorldType_IsValid(int value);
const MatchToWorldType MatchToWorldType_MIN = MTWT_ADD;
const MatchToWorldType MatchToWorldType_MAX = MTWT_MATCH_INWORLD;
const int MatchToWorldType_ARRAYSIZE = MatchToWorldType_MAX + 1;

enum MentorTaskType {
  MentorTask_JoinGuild = 1,
  MentorTask_Jade = 2,
  MentorTask_Title = 3,
  MentorTask_Pandora = 4,
  MentorTask_StageTypeCount = 5,
  MentorTask_GuildCheckIn = 6,
  MentorTask_GuildAuctBenefit = 7,
  MentorTask_RiskStage = 8,
  MentorTask_ProtectCaptain = 9,
  MentorTask_TianTi = 10,
  MentorTask_Emblem = 11,
  MentorTask_DailyActive = 12,
  MentorTask_WorldBossCount = 13,
  MentorTask_BossRush = 14,
  MentorTask_StageStar = 15,
  MentorTask_SkyFloor = 16,
  MentorTask_TowerFloor = 17,
  MentorTask_WorldBossRank = 18,
  MentorTask_GuildBossCount = 19,
  MentorTask_DailyTask = 20,
  MentorTask_SkyCount = 21,
  MentorTask_AllEquipStengthen = 22,
  MentorTask_GuildTianTiCount = 23,
  MentorTask_MentorIntimacy = 24,
  MentorTask_IBShopBuy = 25,
  MentorTask_BuyPrivilege = 26,
  MentorTask_BuyFund = 27,
  MentorTask_BuyGift = 28,
  MentorTask_AllEquipQuality = 29,
  MentorTask_AuctBuy = 30,
  MentorTask_AuctSale = 31
};
bool MentorTaskType_IsValid(int value);
const MentorTaskType MentorTaskType_MIN = MentorTask_JoinGuild;
const MentorTaskType MentorTaskType_MAX = MentorTask_AuctSale;
const int MentorTaskType_ARRAYSIZE = MentorTaskType_MAX + 1;

enum KKVsRoleState {
  KK_VS_ROLE_UNLOAD = 1,
  KK_VS_ROLE_NORMAL = 2,
  KK_VS_ROLE_DIE = 3,
  KK_VS_ROLE_QUIT = 4
};
bool KKVsRoleState_IsValid(int value);
const KKVsRoleState KKVsRoleState_MIN = KK_VS_ROLE_UNLOAD;
const KKVsRoleState KKVsRoleState_MAX = KK_VS_ROLE_QUIT;
const int KKVsRoleState_ARRAYSIZE = KKVsRoleState_MAX + 1;

enum KMatchType {
  KMT_NONE = 0,
  KMT_EXP = 1,
  KMT_PVP = 2,
  KMT_HERO = 3,
  KMT_PK = 4,
  KMT_LEAGUE = 5,
  KMT_SKYCRAFT = 6,
  KMT_PKTWO = 7,
  KMT_MOBA = 8,
  KMT_WEEKEND_ACT = 9,
  KMT_CUSTOM_PKTWO = 10,
  KMT_SURVIVE = 11
};
bool KMatchType_IsValid(int value);
const KMatchType KMatchType_MIN = KMT_NONE;
const KMatchType KMatchType_MAX = KMT_SURVIVE;
const int KMatchType_ARRAYSIZE = KMatchType_MAX + 1;

enum GiftIbItemState {
  GiftIbWaitingReceipt = 1,
  GiftIbReply = 2
};
bool GiftIbItemState_IsValid(int value);
const GiftIbItemState GiftIbItemState_MIN = GiftIbWaitingReceipt;
const GiftIbItemState GiftIbItemState_MAX = GiftIbReply;
const int GiftIbItemState_ARRAYSIZE = GiftIbItemState_MAX + 1;

enum PayGiftIbStatus {
  PayGiftIbStatus_CreateBill = 1,
  PayGiftIbStatus_Fail = 2,
  PayGiftIbStatus_Success = 3,
  PayGiftIbStatus_SuccessNotAddItem = 4
};
bool PayGiftIbStatus_IsValid(int value);
const PayGiftIbStatus PayGiftIbStatus_MIN = PayGiftIbStatus_CreateBill;
const PayGiftIbStatus PayGiftIbStatus_MAX = PayGiftIbStatus_SuccessNotAddItem;
const int PayGiftIbStatus_ARRAYSIZE = PayGiftIbStatus_MAX + 1;

enum MysqlOpType {
  MYSQL_OP_ADD = 1,
  MYSQL_OP_UPDATE = 2,
  MYSQL_OP_DELETE = 3
};
bool MysqlOpType_IsValid(int value);
const MysqlOpType MysqlOpType_MIN = MYSQL_OP_ADD;
const MysqlOpType MysqlOpType_MAX = MYSQL_OP_DELETE;
const int MysqlOpType_ARRAYSIZE = MysqlOpType_MAX + 1;

enum ArenaStarType {
  AST_PK = 1,
  AST_HEROBATTLE = 2,
  AST_WEEKNEST = 3,
  AST_LEAGUE = 4
};
bool ArenaStarType_IsValid(int value);
const ArenaStarType ArenaStarType_MIN = AST_PK;
const ArenaStarType ArenaStarType_MAX = AST_LEAGUE;
const int ArenaStarType_ARRAYSIZE = ArenaStarType_MAX + 1;

enum ArenaStarReqType {
  ASRT_ROLEDATA = 1,
  ASRT_DIANZAN = 2
};
bool ArenaStarReqType_IsValid(int value);
const ArenaStarReqType ArenaStarReqType_MIN = ASRT_ROLEDATA;
const ArenaStarReqType ArenaStarReqType_MAX = ASRT_DIANZAN;
const int ArenaStarReqType_ARRAYSIZE = ArenaStarReqType_MAX + 1;

enum SkyTeamState {
  SkyTeamState_Idle = 1,
  SkyTeamState_Match = 2,
  SkyTeamState_Battle = 3
};
bool SkyTeamState_IsValid(int value);
const SkyTeamState SkyTeamState_MIN = SkyTeamState_Idle;
const SkyTeamState SkyTeamState_MAX = SkyTeamState_Battle;
const int SkyTeamState_ARRAYSIZE = SkyTeamState_MAX + 1;

enum SkyCraftMatchReqTpe {
  SCMR_Match = 1,
  SCMR_CancelMatch = 2
};
bool SkyCraftMatchReqTpe_IsValid(int value);
const SkyCraftMatchReqTpe SkyCraftMatchReqTpe_MIN = SCMR_Match;
const SkyCraftMatchReqTpe SkyCraftMatchReqTpe_MAX = SCMR_CancelMatch;
const int SkyCraftMatchReqTpe_ARRAYSIZE = SkyCraftMatchReqTpe_MAX + 1;

enum SkyCraftMatchNtfType {
  SCMN_Start = 1,
  SCMN_Stop = 2,
  SCMN_Timeout = 3
};
bool SkyCraftMatchNtfType_IsValid(int value);
const SkyCraftMatchNtfType SkyCraftMatchNtfType_MIN = SCMN_Start;
const SkyCraftMatchNtfType SkyCraftMatchNtfType_MAX = SCMN_Timeout;
const int SkyCraftMatchNtfType_ARRAYSIZE = SkyCraftMatchNtfType_MAX + 1;

enum SkyCraftType {
  SCT_RacePoint = 1,
  SCT_Eliminate = 2
};
bool SkyCraftType_IsValid(int value);
const SkyCraftType SkyCraftType_MIN = SCT_RacePoint;
const SkyCraftType SkyCraftType_MAX = SCT_Eliminate;
const int SkyCraftType_ARRAYSIZE = SkyCraftType_MAX + 1;

enum SCEliRoundType {
  SCEliRound_None = 0,
  SCEliRound_8to4 = 1,
  SCEliRound_4to2 = 2,
  SCEliRound_2to1 = 3
};
bool SCEliRoundType_IsValid(int value);
const SCEliRoundType SCEliRoundType_MIN = SCEliRound_None;
const SCEliRoundType SCEliRoundType_MAX = SCEliRound_2to1;
const int SCEliRoundType_ARRAYSIZE = SCEliRoundType_MAX + 1;

enum TeamMemberType {
  TMT_NORMAL = 1,
  TMT_HELPER = 2,
  TMT_USETICKET = 3
};
bool TeamMemberType_IsValid(int value);
const TeamMemberType TeamMemberType_MIN = TMT_NORMAL;
const TeamMemberType TeamMemberType_MAX = TMT_USETICKET;
const int TeamMemberType_ARRAYSIZE = TeamMemberType_MAX + 1;

enum WeekReportDataType {
  WeekReportData_GuildSign = 1,
  WeekReportData_WorldBoss = 2,
  WeekReportData_GuildRisk = 3,
  WeekReportData_GuildArena = 4,
  WeekReportData_GuildBoss = 5,
  WeekReportData_GuildTerryitory = 6
};
bool WeekReportDataType_IsValid(int value);
const WeekReportDataType WeekReportDataType_MIN = WeekReportData_GuildSign;
const WeekReportDataType WeekReportDataType_MAX = WeekReportData_GuildTerryitory;
const int WeekReportDataType_ARRAYSIZE = WeekReportDataType_MAX + 1;

enum LeagueEliType {
  LeagueEliType_None = 1,
  LeagueEliType_Self = 2,
  LeagueEliType_Cross = 3
};
bool LeagueEliType_IsValid(int value);
const LeagueEliType LeagueEliType_MIN = LeagueEliType_None;
const LeagueEliType LeagueEliType_MAX = LeagueEliType_Cross;
const int LeagueEliType_ARRAYSIZE = LeagueEliType_MAX + 1;

enum QueryResWarEnum {
  RESWAR_FLOWAWARD = 1,
  RESWAR_BATTLE = 2
};
bool QueryResWarEnum_IsValid(int value);
const QueryResWarEnum QueryResWarEnum_MIN = RESWAR_FLOWAWARD;
const QueryResWarEnum QueryResWarEnum_MAX = RESWAR_BATTLE;
const int QueryResWarEnum_ARRAYSIZE = QueryResWarEnum_MAX + 1;

enum CustomBattleOp {
  CustomBattle_Query = 1,
  CustomBattle_Create = 2,
  CustomBattle_Join = 3,
  CustomBattle_Match = 4,
  CustomBattle_Reward = 5,
  CustomBattle_ClearCD = 6,
  CustomBattle_QueryRandom = 7,
  CustomBattle_QueryOne = 8,
  CustomBattle_DoCreate = 9,
  CustomBattle_DoJoin = 10,
  CustomBattle_UnJoin = 11,
  CustomBattle_UnMatch = 12,
  CustomBattle_Modify = 13,
  CustomBattle_QuerySelf = 14,
  CustomBattle_StartNow = 15,
  CustomBattle_DoClearCD = 16,
  CustomBattle_Drop = 17,
  CustomBattle_Search = 18
};
bool CustomBattleOp_IsValid(int value);
const CustomBattleOp CustomBattleOp_MIN = CustomBattle_Query;
const CustomBattleOp CustomBattleOp_MAX = CustomBattle_Search;
const int CustomBattleOp_ARRAYSIZE = CustomBattleOp_MAX + 1;

enum CustomBattleScale {
  CustomBattle_Scale_Friend = 1,
  CustomBattle_Scale_Guild = 2,
  CustomBattle_Scale_Server = 3,
  CustomBattle_Scale_All = 4
};
bool CustomBattleScale_IsValid(int value);
const CustomBattleScale CustomBattleScale_MIN = CustomBattle_Scale_Friend;
const CustomBattleScale CustomBattleScale_MAX = CustomBattle_Scale_All;
const int CustomBattleScale_ARRAYSIZE = CustomBattleScale_MAX + 1;

enum CustomBattleType {
  CustomBattle_PK_Normal = 1,
  CustomBattle_PKTwo_Normal = 2
};
bool CustomBattleType_IsValid(int value);
const CustomBattleType CustomBattleType_MIN = CustomBattle_PK_Normal;
const CustomBattleType CustomBattleType_MAX = CustomBattle_PKTwo_Normal;
const int CustomBattleType_ARRAYSIZE = CustomBattleType_MAX + 1;

enum CustomBattleState {
  CustomBattle_Ready = 1,
  CustomBattle_Going = 2,
  CustomBattle_End = 3,
  CustomBattle_Destory = 4
};
bool CustomBattleState_IsValid(int value);
const CustomBattleState CustomBattleState_MIN = CustomBattle_Ready;
const CustomBattleState CustomBattleState_MAX = CustomBattle_Destory;
const int CustomBattleState_ARRAYSIZE = CustomBattleState_MAX + 1;

enum CustomBattleRoleState {
  CustomBattle_RoleState_Ready = 1,
  CustomBattle_RoleState_Join = 2,
  CustomBattle_RoleState_Reward = 3,
  Custombattle_RoleState_Taken = 4
};
bool CustomBattleRoleState_IsValid(int value);
const CustomBattleRoleState CustomBattleRoleState_MIN = CustomBattle_RoleState_Ready;
const CustomBattleRoleState CustomBattleRoleState_MAX = Custombattle_RoleState_Taken;
const int CustomBattleRoleState_ARRAYSIZE = CustomBattleRoleState_MAX + 1;

enum SaveHistIbGiftEnum {
  SaveIbGift_All = 1,
  SaveIbGift_Self = 2,
  SaveIbGift_Target = 3
};
bool SaveHistIbGiftEnum_IsValid(int value);
const SaveHistIbGiftEnum SaveHistIbGiftEnum_MIN = SaveIbGift_All;
const SaveHistIbGiftEnum SaveHistIbGiftEnum_MAX = SaveIbGift_Target;
const int SaveHistIbGiftEnum_ARRAYSIZE = SaveHistIbGiftEnum_MAX + 1;

enum GuildCampItemOperate {
  SWINGUPITEM = 1,
  SWINGDOWNITEM = 2,
  CANCEL = 3,
  CONFIRM = 4,
  AUDIOCHAT = 5,
  TEXTCHAT = 6
};
bool GuildCampItemOperate_IsValid(int value);
const GuildCampItemOperate GuildCampItemOperate_MIN = SWINGUPITEM;
const GuildCampItemOperate GuildCampItemOperate_MAX = TEXTCHAT;
const int GuildCampItemOperate_ARRAYSIZE = GuildCampItemOperate_MAX + 1;

enum GuildCampPartyTradeType {
  TRADE_INVITATION = 1,
  UPDATA_TRADE_STATUS = 2
};
bool GuildCampPartyTradeType_IsValid(int value);
const GuildCampPartyTradeType GuildCampPartyTradeType_MIN = TRADE_INVITATION;
const GuildCampPartyTradeType GuildCampPartyTradeType_MAX = UPDATA_TRADE_STATUS;
const int GuildCampPartyTradeType_ARRAYSIZE = GuildCampPartyTradeType_MAX + 1;

enum GiftIbShipStatus {
  GIFTIB_NOT_SHIPPED = 0,
  GIFTIB_BEING_SHIPPED = 1,
  GIFTIB_FINISH_SHIPPED = 2
};
bool GiftIbShipStatus_IsValid(int value);
const GiftIbShipStatus GiftIbShipStatus_MIN = GIFTIB_NOT_SHIPPED;
const GiftIbShipStatus GiftIbShipStatus_MAX = GIFTIB_FINISH_SHIPPED;
const int GiftIbShipStatus_ARRAYSIZE = GiftIbShipStatus_MAX + 1;

enum EmblemSlotType {
  EmblemSlotType_None = 0,
  EmblemSlotType_Attri = 1,
  EmblemSlotType_Skill = 2,
  EmblemSlotType_ExtraSkill = 3
};
bool EmblemSlotType_IsValid(int value);
const EmblemSlotType EmblemSlotType_MIN = EmblemSlotType_None;
const EmblemSlotType EmblemSlotType_MAX = EmblemSlotType_ExtraSkill;
const int EmblemSlotType_ARRAYSIZE = EmblemSlotType_MAX + 1;

enum KMatchOp {
  KMATCH_OP_START = 1,
  KMATCH_OP_STOP = 2
};
bool KMatchOp_IsValid(int value);
const KMatchOp KMatchOp_MIN = KMATCH_OP_START;
const KMatchOp KMatchOp_MAX = KMATCH_OP_STOP;
const int KMatchOp_ARRAYSIZE = KMatchOp_MAX + 1;

enum BagType {
  EquipBag = 1,
  EmblemBag = 2,
  ArtifactBag = 3,
  ItemBag = 4
};
bool BagType_IsValid(int value);
const BagType BagType_MIN = EquipBag;
const BagType BagType_MAX = ItemBag;
const int BagType_ARRAYSIZE = BagType_MAX + 1;

enum CustomBattleTag {
  CustomBattle_Tag_Friend = 1,
  CustomBattle_Tag_Guild = 2,
  CustomBattle_Tag_Cross = 3,
  CustomBattle_Tag_GM = 4
};
bool CustomBattleTag_IsValid(int value);
const CustomBattleTag CustomBattleTag_MIN = CustomBattle_Tag_Friend;
const CustomBattleTag CustomBattleTag_MAX = CustomBattle_Tag_GM;
const int CustomBattleTag_ARRAYSIZE = CustomBattleTag_MAX + 1;

enum PkNVNType {
  PK_1v1 = 1,
  PK_2v2 = 2
};
bool PkNVNType_IsValid(int value);
const PkNVNType PkNVNType_MIN = PK_1v1;
const PkNVNType PkNVNType_MAX = PK_2v2;
const int PkNVNType_ARRAYSIZE = PkNVNType_MAX + 1;

enum ForgeOpType {
  Forge_Equip = 1,
  Forge_Replace = 2,
  Forge_Retain = 3
};
bool ForgeOpType_IsValid(int value);
const ForgeOpType ForgeOpType_MIN = Forge_Equip;
const ForgeOpType ForgeOpType_MAX = Forge_Retain;
const int ForgeOpType_ARRAYSIZE = ForgeOpType_MAX + 1;

enum HeroKillUnitType {
  HeroKillUnit_Hero = 1,
  HeroKillUnit_Enemy = 2
};
bool HeroKillUnitType_IsValid(int value);
const HeroKillUnitType HeroKillUnitType_MIN = HeroKillUnit_Hero;
const HeroKillUnitType HeroKillUnitType_MAX = HeroKillUnit_Enemy;
const int HeroKillUnitType_ARRAYSIZE = HeroKillUnitType_MAX + 1;

enum MobaOp {
  MobaOp_LevelSkill = 1,
  MobaOp_Upgrade = 2
};
bool MobaOp_IsValid(int value);
const MobaOp MobaOp_MIN = MobaOp_LevelSkill;
const MobaOp MobaOp_MAX = MobaOp_Upgrade;
const int MobaOp_ARRAYSIZE = MobaOp_MAX + 1;

enum DHRState {
  DHR_CANNOT = 1,
  DHR_CAN_HAVEHOT = 2,
  DHR_CAN_HAVE = 3
};
bool DHRState_IsValid(int value);
const DHRState DHRState_MIN = DHR_CANNOT;
const DHRState DHRState_MAX = DHR_CAN_HAVE;
const int DHRState_ARRAYSIZE = DHRState_MAX + 1;

enum DHRReqOp {
  DHR_OP_LIST = 1,
  DHR_OP_FETCH_REWARD = 2,
  DHR_OP_WANT_BE_HELP = 3,
  DHR_OP_WANT_NOT_HELP = 4
};
bool DHRReqOp_IsValid(int value);
const DHRReqOp DHRReqOp_MIN = DHR_OP_LIST;
const DHRReqOp DHRReqOp_MAX = DHR_OP_WANT_NOT_HELP;
const int DHRReqOp_ARRAYSIZE = DHRReqOp_MAX + 1;

enum PetOtherOp {
  DoPetPairRide = 1,
  InvitePetPairRide = 2,
  AgreePetPairRide = 3
};
bool PetOtherOp_IsValid(int value);
const PetOtherOp PetOtherOp_MIN = DoPetPairRide;
const PetOtherOp PetOtherOp_MAX = AgreePetPairRide;
const int PetOtherOp_ARRAYSIZE = PetOtherOp_MAX + 1;

enum ArtifactComposeType {
  ArtifactCompose_Single = 1,
  ArtifactCompose_Multi = 2
};
bool ArtifactComposeType_IsValid(int value);
const ArtifactComposeType ArtifactComposeType_MIN = ArtifactCompose_Single;
const ArtifactComposeType ArtifactComposeType_MAX = ArtifactCompose_Multi;
const int ArtifactComposeType_ARRAYSIZE = ArtifactComposeType_MAX + 1;

enum WeddingState {
  WeddingState_Prepare = 1,
  WeddingState_Running = 2
};
bool WeddingState_IsValid(int value);
const WeddingState WeddingState_MIN = WeddingState_Prepare;
const WeddingState WeddingState_MAX = WeddingState_Running;
const int WeddingState_ARRAYSIZE = WeddingState_MAX + 1;

enum WeddingType {
  WeddingType_Normal = 1,
  WeddingType_Luxury = 2
};
bool WeddingType_IsValid(int value);
const WeddingType WeddingType_MIN = WeddingType_Normal;
const WeddingType WeddingType_MAX = WeddingType_Luxury;
const int WeddingType_ARRAYSIZE = WeddingType_MAX + 1;

enum MarriageOpType {
  MarriageOpType_MarryApply = 1,
  MarriageOpType_MarryAgree = 2,
  MarriageOpType_MarryRefuse = 3,
  MarriageOpType_Divorce = 4,
  MarriageOpType_DivorceCancel = 5,
  MarriageOpType_Max = 6
};
bool MarriageOpType_IsValid(int value);
const MarriageOpType MarriageOpType_MIN = MarriageOpType_MarryApply;
const MarriageOpType MarriageOpType_MAX = MarriageOpType_Max;
const int MarriageOpType_ARRAYSIZE = MarriageOpType_MAX + 1;

enum MarriageStatus {
  MarriageStatus_Null = 1,
  MarriageStatus_Marriaged = 2,
  MarriageStatus_WeddingHoldingNoCar = 3,
  MarriageStatus_WeddingHoldedNoCar = 4,
  MarriageStatus_WeddingCarNoWedding = 5,
  MarriageStatus_WeddingHoldingAndCar = 6,
  MarriageStatus_WeddingHoldedAndCar = 7,
  MarriageStatus_DivorceApply = 8,
  MarriageStatus_Divorced = 9,
  MarriageStatus_Max = 10
};
bool MarriageStatus_IsValid(int value);
const MarriageStatus MarriageStatus_MIN = MarriageStatus_Null;
const MarriageStatus MarriageStatus_MAX = MarriageStatus_Max;
const int MarriageStatus_ARRAYSIZE = MarriageStatus_MAX + 1;

enum WeddingInviteOperType {
  Wedding_Invite = 1,
  Wedding_Apply = 2,
  Wedding_AgreeApply = 3,
  Wedding_DisagreeApply = 4,
  Wedding_PermitStranger = 5,
  Wedding_ForbidStranger = 6,
  Wedding_CarCutScene = 7,
  Wedding_Start = 8
};
bool WeddingInviteOperType_IsValid(int value);
const WeddingInviteOperType WeddingInviteOperType_MIN = Wedding_Invite;
const WeddingInviteOperType WeddingInviteOperType_MAX = Wedding_Start;
const int WeddingInviteOperType_ARRAYSIZE = WeddingInviteOperType_MAX + 1;

enum MarriagePos {
  MarriagePos_Null = 1,
  MarriagePos_Husband = 2,
  MarriagePos_Wife = 3,
  Marriage_Max = 4
};
bool MarriagePos_IsValid(int value);
const MarriagePos MarriagePos_MIN = MarriagePos_Null;
const MarriagePos MarriagePos_MAX = Marriage_Max;
const int MarriagePos_ARRAYSIZE = MarriagePos_MAX + 1;

enum WeddingOperType {
  WeddingOper_Flower = 1,
  WeddingOper_Fireworks = 2,
  WeddingOper_ApplyVows = 3,
  WeddingOper_AgreeVows = 4,
  WeddingOper_DisAgreeVows = 5,
  WeddingOper_VowsPrepare = 6,
  WeddingOper_VowsStart = 7,
  WeddingOper_FlowerRewardOverMax = 8,
  WeddingOper_FireworksRewardOverMax = 9,
  WeddingOper_CandyRewardOverMax = 10,
  WeddingOper_Candy = 11,
  WeddingOper_RoleNum = 12
};
bool WeddingOperType_IsValid(int value);
const WeddingOperType WeddingOperType_MIN = WeddingOper_Flower;
const WeddingOperType WeddingOperType_MAX = WeddingOper_RoleNum;
const int WeddingOperType_ARRAYSIZE = WeddingOperType_MAX + 1;

enum ArtifactDeityStoveOpType {
  ArtifactDeityStove_Recast = 1,
  ArtifactDeityStove_Fuse = 2,
  ArtifactDeityStove_Inscription = 3
};
bool ArtifactDeityStoveOpType_IsValid(int value);
const ArtifactDeityStoveOpType ArtifactDeityStoveOpType_MIN = ArtifactDeityStove_Recast;
const ArtifactDeityStoveOpType ArtifactDeityStoveOpType_MAX = ArtifactDeityStove_Inscription;
const int ArtifactDeityStoveOpType_ARRAYSIZE = ArtifactDeityStoveOpType_MAX + 1;

enum DragonWeakType {
  DragonWeakType_Null = 1,
  DragonWeakType_Pass = 2,
  DragonWeakType_NotPass = 3,
  DragonWeakType_Max = 4
};
bool DragonWeakType_IsValid(int value);
const DragonWeakType DragonWeakType_MIN = DragonWeakType_Null;
const DragonWeakType DragonWeakType_MAX = DragonWeakType_Max;
const int DragonWeakType_ARRAYSIZE = DragonWeakType_MAX + 1;

enum BattleFieldType {
  BATTLE_FIELD_READY_ENTER = 1,
  BATTLE_FIELD_READY_LEAVE = 2
};
bool BattleFieldType_IsValid(int value);
const BattleFieldType BattleFieldType_MIN = BATTLE_FIELD_READY_ENTER;
const BattleFieldType BattleFieldType_MAX = BATTLE_FIELD_READY_LEAVE;
const int BattleFieldType_ARRAYSIZE = BattleFieldType_MAX + 1;

enum DragonGuildTaskType {
  TASK_NORMAL = 1,
  TASK_ACHIVEMENT = 2
};
bool DragonGuildTaskType_IsValid(int value);
const DragonGuildTaskType DragonGuildTaskType_MIN = TASK_NORMAL;
const DragonGuildTaskType DragonGuildTaskType_MAX = TASK_ACHIVEMENT;
const int DragonGuildTaskType_ARRAYSIZE = DragonGuildTaskType_MAX + 1;

enum DragonGuildTaskConditionType {
  TASK_PASS_SCENE = 1,
  TASK_PASS_NODIE = 2,
  TASK_TIME_SPAN = 3,
  TASK_PASS_PARTNER_COUNT = 4
};
bool DragonGuildTaskConditionType_IsValid(int value);
const DragonGuildTaskConditionType DragonGuildTaskConditionType_MIN = TASK_PASS_SCENE;
const DragonGuildTaskConditionType DragonGuildTaskConditionType_MAX = TASK_PASS_PARTNER_COUNT;
const int DragonGuildTaskConditionType_ARRAYSIZE = DragonGuildTaskConditionType_MAX + 1;

enum DragonGuildSortType {
  DragonGuildSortByLevel = 1,
  DragonGuildSortByMemberCount = 2,
  DragongGuildSortByTotalPPT = 3,
  DragonGuildSortBySceneID = 4,
  DragonGuildSortByName = 5,
  DragonGuildSortByLeaderName = 6
};
bool DragonGuildSortType_IsValid(int value);
const DragonGuildSortType DragonGuildSortType_MIN = DragonGuildSortByLevel;
const DragonGuildSortType DragonGuildSortType_MAX = DragonGuildSortByLeaderName;
const int DragonGuildSortType_ARRAYSIZE = DragonGuildSortType_MAX + 1;

enum DragonGuildUpdateType {
  DUType_AddMember = 1,
  DUType_LeaveMember = 2,
  DUType_Dissmiss = 3,
  DUType_ShopRefresh = 4,
  DUType_Level = 5
};
bool DragonGuildUpdateType_IsValid(int value);
const DragonGuildUpdateType DragonGuildUpdateType_MIN = DUType_AddMember;
const DragonGuildUpdateType DragonGuildUpdateType_MAX = DUType_Level;
const int DragonGuildUpdateType_ARRAYSIZE = DragonGuildUpdateType_MAX + 1;

enum CompeteDragonOpArg {
  CompeteDragon_GetInfo = 1,
  CompeteDragon_GetReward = 2
};
bool CompeteDragonOpArg_IsValid(int value);
const CompeteDragonOpArg CompeteDragonOpArg_MIN = CompeteDragon_GetInfo;
const CompeteDragonOpArg CompeteDragonOpArg_MAX = CompeteDragon_GetReward;
const int CompeteDragonOpArg_ARRAYSIZE = CompeteDragonOpArg_MAX + 1;

enum TaskConnType {
  TaskConn_ItemID = 1,
  TaskConn_StageID = 2,
  TaskConn_MonsterID = 3,
  TaskConn_ItemTypeQuality = 4,
  TaskConn_Activity = 5,
  TaskConn_WorldBossRank = 6,
  TaskConn_StageType = 7
};
bool TaskConnType_IsValid(int value);
const TaskConnType TaskConnType_MIN = TaskConn_ItemID;
const TaskConnType TaskConnType_MAX = TaskConn_StageType;
const int TaskConnType_ARRAYSIZE = TaskConnType_MAX + 1;

enum TaskActivityType {
  TaskActType_Dragonexp = 1,
  TaskActType_Tower = 2,
  TaskActType_SuperRisk = 3,
  TaskActType_SkyCityRound = 4,
  TaskActType_BigmeleeKill = 5,
  TaskActType_BigmeleeScore = 6,
  TaskActType_GuildBoss = 7,
  TaskActType_HeroBattleWin = 8,
  TaskActType_PkWin = 9,
  TaskActType_Help = 10,
  TaskActType_DonateItem = 11,
  TaskActType_Fish = 12,
  TaskActType_GardenSteal = 13,
  TaskActType_GardenHarvest = 14,
  TaskActType_Cooking = 15,
  TaskActType_Banquet = 16,
  TaskActType_JoinBanquet = 17,
  TaskActType_WorldBoss = 18
};
bool TaskActivityType_IsValid(int value);
const TaskActivityType TaskActivityType_MIN = TaskActType_Dragonexp;
const TaskActivityType TaskActivityType_MAX = TaskActType_WorldBoss;
const int TaskActivityType_ARRAYSIZE = TaskActivityType_MAX + 1;

enum PeriodTaskType {
  PeriodTaskType_Daily = 1,
  PeriodTaskType_Weekly = 2
};
bool PeriodTaskType_IsValid(int value);
const PeriodTaskType PeriodTaskType_MIN = PeriodTaskType_Daily;
const PeriodTaskType PeriodTaskType_MAX = PeriodTaskType_Weekly;
const int PeriodTaskType_ARRAYSIZE = PeriodTaskType_MAX + 1;

enum TaskOper {
  TaskOper_Set = 1,
  TaskOper_Add = 2,
  TaskOper_Del = 3
};
bool TaskOper_IsValid(int value);
const TaskOper TaskOper_MIN = TaskOper_Set;
const TaskOper TaskOper_MAX = TaskOper_Del;
const int TaskOper_ARRAYSIZE = TaskOper_MAX + 1;

enum NpcFlReqType {
  NPCFL_GIVE_GIFT = 1,
  NPCFL_EXCHANGE = 2,
  NPCFL_BASE_DATA = 3,
  NPCFL_NPC_LEVEL_UP = 4,
  NPCFL_UNITE_ACT = 5,
  NPCFL_BUY_GIFT_COUNT = 6
};
bool NpcFlReqType_IsValid(int value);
const NpcFlReqType NpcFlReqType_MIN = NPCFL_GIVE_GIFT;
const NpcFlReqType NpcFlReqType_MAX = NPCFL_BUY_GIFT_COUNT;
const int NpcFlReqType_ARRAYSIZE = NpcFlReqType_MAX + 1;

enum NpcFlItemType {
  NPCFL_ITEM_NORMAL = 1,
  NPCFL_ITEM_RANDOM = 2,
  NPCFL_ITEM_TRIGGER_FAVOR = 3
};
bool NpcFlItemType_IsValid(int value);
const NpcFlItemType NpcFlItemType_MIN = NPCFL_ITEM_NORMAL;
const NpcFlItemType NpcFlItemType_MAX = NPCFL_ITEM_TRIGGER_FAVOR;
const int NpcFlItemType_ARRAYSIZE = NpcFlItemType_MAX + 1;

enum DailyRefreshOperType {
  DROT_Refresh = 1,
  DROT_Refuse = 2,
  DROT_BuyCount = 3,
  DROT_AskHelp = 4
};
bool DailyRefreshOperType_IsValid(int value);
const DailyRefreshOperType DailyRefreshOperType_MIN = DROT_Refresh;
const DailyRefreshOperType DailyRefreshOperType_MAX = DROT_AskHelp;
const int DailyRefreshOperType_ARRAYSIZE = DailyRefreshOperType_MAX + 1;

enum DailyTaskIconType {
  DailyTaskIcon_AskHelp = 1,
  DailyTaskIcon_BeHelp = 2
};
bool DailyTaskIconType_IsValid(int value);
const DailyTaskIconType DailyTaskIconType_MIN = DailyTaskIcon_AskHelp;
const DailyTaskIconType DailyTaskIconType_MAX = DailyTaskIcon_BeHelp;
const int DailyTaskIconType_ARRAYSIZE = DailyTaskIconType_MAX + 1;

enum SurviveFightEndType {
  SURVIVE_LOAD_TIMEOUT = 1,
  SURVIVE_DIE = 2,
  SURVIVE_QUIT = 3,
  SURVIVE_WIN = 4
};
bool SurviveFightEndType_IsValid(int value);
const SurviveFightEndType SurviveFightEndType_MIN = SURVIVE_LOAD_TIMEOUT;
const SurviveFightEndType SurviveFightEndType_MAX = SURVIVE_WIN;
const int SurviveFightEndType_ARRAYSIZE = SurviveFightEndType_MAX + 1;

enum SurviveFightStage {
  SURVIVE_STAGE_READY = 1,
  SURVIVE_STAGE_FIGHT = 2
};
bool SurviveFightStage_IsValid(int value);
const SurviveFightStage SurviveFightStage_MIN = SURVIVE_STAGE_READY;
const SurviveFightStage SurviveFightStage_MAX = SURVIVE_STAGE_FIGHT;
const int SurviveFightStage_ARRAYSIZE = SurviveFightStage_MAX + 1;

enum BackFlowActOp {
  BackFlowAct_TreasureData = 1,
  BackFlowAct_GetTreasure = 2,
  BackFlowAct_ShopData = 3,
  BackFlowAct_ShopBuy = 4,
  BackFlowAct_ShopUpdate = 5
};
bool BackFlowActOp_IsValid(int value);
const BackFlowActOp BackFlowActOp_MIN = BackFlowAct_TreasureData;
const BackFlowActOp BackFlowActOp_MAX = BackFlowAct_ShopUpdate;
const int BackFlowActOp_ARRAYSIZE = BackFlowActOp_MAX + 1;

// ===================================================================


// ===================================================================


// ===================================================================


// @@protoc_insertion_point(namespace_scope)

}  // namespace KKSG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_enum_2eproto__INCLUDED
